{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.4", "generated_at": "2022-07-26T20:44:32.438896Z", "invocation_id": "a386b604-0688-4051-b8bc-3e2396b45ce2", "env": {}, "project_id": "0161153b585f60374e0a66941a656f43", "user_id": "8929baf0-9bc1-477e-9a57-eb8b0db4da62", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"seed.netsuite_source_integration_tests.netsuite2_currency_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_currency_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_currency_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_currency_data.csv", "original_file_path": "seeds/netsuite2_currency_data.csv", "name": "netsuite2_currency_data", "alias": "netsuite2_currency_data", "checksum": {"name": "sha256", "checksum": "860ccbec95ff9c17e8e40db2c32e28ab56f2ef18f6af775bc982fc5494aae23c"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.822525, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_currency_data\""}, "seed.netsuite_source_integration_tests.netsuite_vendors_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_vendors_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_vendors_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_vendors_data.csv", "original_file_path": "seeds/netsuite_vendors_data.csv", "name": "netsuite_vendors_data", "alias": "netsuite_vendors_data", "checksum": {"name": "sha256", "checksum": "f050ea1d5fa346fcefbe9a5792dfbe9f5aabbec17a359ab2e497be7b3e888e2d"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.827949, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_vendors_data\""}, "seed.netsuite_source_integration_tests.netsuite2_classification_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_classification_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_classification_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_classification_data.csv", "original_file_path": "seeds/netsuite2_classification_data.csv", "name": "netsuite2_classification_data", "alias": "netsuite2_classification_data", "checksum": {"name": "sha256", "checksum": "800dc93b65435dd17dbe1f668890a317bce221193a1ca52d6075c5ab8504e29c"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.8288589, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_classification_data\""}, "seed.netsuite_source_integration_tests.netsuite_accounting_books_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_accounting_books_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_accounting_books_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_accounting_books_data.csv", "original_file_path": "seeds/netsuite_accounting_books_data.csv", "name": "netsuite_accounting_books_data", "alias": "netsuite_accounting_books_data", "checksum": {"name": "sha256", "checksum": "45b73583ed0a1425f131de59b6a17b997caec17d9b0884947f27008ae81c1684"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.829839, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_accounting_books_data\""}, "seed.netsuite_source_integration_tests.netsuite2_entities_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_entities_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_entities_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_entities_data.csv", "original_file_path": "seeds/netsuite2_entities_data.csv", "name": "netsuite2_entities_data", "alias": "netsuite2_entities_data", "checksum": {"name": "sha256", "checksum": "e28458219e88aecec3f237ff9c58941d13c0e40c478fec9e8727fbb3d9d244c8"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.830824, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_entities_data\""}, "seed.netsuite_source_integration_tests.netsuite2_vendor_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_vendor_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_vendor_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_vendor_data.csv", "original_file_path": "seeds/netsuite2_vendor_data.csv", "name": "netsuite2_vendor_data", "alias": "netsuite2_vendor_data", "checksum": {"name": "sha256", "checksum": "f1f8f8762dd6b7192e2273f12ee86f43eb06933a2055da91d37c82f0ddbec0b8"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.831794, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_vendor_data\""}, "seed.netsuite_source_integration_tests.netsuite_consolidated_exchange_rates_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_consolidated_exchange_rates_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_consolidated_exchange_rates_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_consolidated_exchange_rates_data.csv", "original_file_path": "seeds/netsuite_consolidated_exchange_rates_data.csv", "name": "netsuite_consolidated_exchange_rates_data", "alias": "netsuite_consolidated_exchange_rates_data", "checksum": {"name": "sha256", "checksum": "b8719124e41745363f91f996b99812a9e6c98306ef24034c5efb12b64600a496"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.8326778, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_consolidated_exchange_rates_data\""}, "seed.netsuite_source_integration_tests.netsuite_customers_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_customers_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_customers_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_customers_data.csv", "original_file_path": "seeds/netsuite_customers_data.csv", "name": "netsuite_customers_data", "alias": "netsuite_customers_data", "checksum": {"name": "sha256", "checksum": "e3ce06d6edaeb9f777c340a597d8de7cfb2d3423a20a2421eae4c86264a9c93a"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.833786, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_customers_data\""}, "seed.netsuite_source_integration_tests.netsuite_locations_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_locations_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_locations_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_locations_data.csv", "original_file_path": "seeds/netsuite_locations_data.csv", "name": "netsuite_locations_data", "alias": "netsuite_locations_data", "checksum": {"name": "sha256", "checksum": "8a71a79adb44cc02707a75ee10a85f03b472324a894ddc32716eeea7d533bc2f"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.8346539, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_locations_data\""}, "seed.netsuite_source_integration_tests.netsuite2_transaction_line_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_transaction_line_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_transaction_line_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_transaction_line_data.csv", "original_file_path": "seeds/netsuite2_transaction_line_data.csv", "name": "netsuite2_transaction_line_data", "alias": "netsuite2_transaction_line_data", "checksum": {"name": "sha256", "checksum": "746773ecc92c2e3e1113ebf7d00fd1a33723016cd3f221fca37fa938315ca5b1"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.835538, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_transaction_line_data\""}, "seed.netsuite_source_integration_tests.netsuite2_account_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_account_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_account_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_account_data.csv", "original_file_path": "seeds/netsuite2_account_data.csv", "name": "netsuite2_account_data", "alias": "netsuite2_account_data", "checksum": {"name": "sha256", "checksum": "689909e17df06e2b189107699467b29cda77e8b4ab1d433c644872c481524747"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.8364239, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_account_data\""}, "seed.netsuite_source_integration_tests.netsuite_items_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_items_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_items_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_items_data.csv", "original_file_path": "seeds/netsuite_items_data.csv", "name": "netsuite_items_data", "alias": "netsuite_items_data", "checksum": {"name": "sha256", "checksum": "567fc2b4c8e46962f9297095017fa529544feafed31503e9fc3ed51bf60b866d"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.837385, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_items_data\""}, "seed.netsuite_source_integration_tests.netsuite2_subsidiary_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_subsidiary_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_subsidiary_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_subsidiary_data.csv", "original_file_path": "seeds/netsuite2_subsidiary_data.csv", "name": "netsuite2_subsidiary_data", "alias": "netsuite2_subsidiary_data", "checksum": {"name": "sha256", "checksum": "ab5bdff19af5d7a5f923820106bd9aa7fc321d3a1b1397ab2ad33f8d1fce3991"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.838238, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_subsidiary_data\""}, "seed.netsuite_source_integration_tests.netsuite2_account_type_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_account_type_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_account_type_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_account_type_data.csv", "original_file_path": "seeds/netsuite2_account_type_data.csv", "name": "netsuite2_account_type_data", "alias": "netsuite2_account_type_data", "checksum": {"name": "sha256", "checksum": "a25b940f65942b256bca8c5ac0c5d4f420a9b1e2d6330bd1102da3e8fa664c7f"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.839093, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_account_type_data\""}, "seed.netsuite_source_integration_tests.netsuite2_accounting_period_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_accounting_period_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_accounting_period_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_accounting_period_data.csv", "original_file_path": "seeds/netsuite2_accounting_period_data.csv", "name": "netsuite2_accounting_period_data", "alias": "netsuite2_accounting_period_data", "checksum": {"name": "sha256", "checksum": "8434862ad961a3c3e31effc380b84b721212641ca8623789446401e345cf9dba"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.839942, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_accounting_period_data\""}, "seed.netsuite_source_integration_tests.netsuite2_accounting_period_fiscal_cal_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_accounting_period_fiscal_cal_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_accounting_period_fiscal_cal_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_accounting_period_fiscal_cal_data.csv", "original_file_path": "seeds/netsuite2_accounting_period_fiscal_cal_data.csv", "name": "netsuite2_accounting_period_fiscal_cal_data", "alias": "netsuite2_accounting_period_fiscal_cal_data", "checksum": {"name": "sha256", "checksum": "ff3ab48ac65713c861da7a5542f14db75c64c4ad7ae4efc8acb2241c10b127c7"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.840868, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_accounting_period_fiscal_cal_data\""}, "seed.netsuite_source_integration_tests.netsuite_classes_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_classes_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_classes_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_classes_data.csv", "original_file_path": "seeds/netsuite_classes_data.csv", "name": "netsuite_classes_data", "alias": "netsuite_classes_data", "checksum": {"name": "sha256", "checksum": "18e8a63665925edfacbeaa443c7f6632c4489bd521df77d945ee657d398588e3"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.8422039, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_classes_data\""}, "seed.netsuite_source_integration_tests.netsuite2_entity_address_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_entity_address_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_entity_address_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_entity_address_data.csv", "original_file_path": "seeds/netsuite2_entity_address_data.csv", "name": "netsuite2_entity_address_data", "alias": "netsuite2_entity_address_data", "checksum": {"name": "sha256", "checksum": "194e01a215739408a796ec2d819da0bc650c860e052e2cddf6695c3faab3b059"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.843078, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_entity_address_data\""}, "seed.netsuite_source_integration_tests.netsuite_departments_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_departments_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_departments_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_departments_data.csv", "original_file_path": "seeds/netsuite_departments_data.csv", "name": "netsuite_departments_data", "alias": "netsuite_departments_data", "checksum": {"name": "sha256", "checksum": "9060203f11419c602daf8afc578035d29ef612e1e868b12fa22eaf7b37942607"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.84395, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_departments_data\""}, "seed.netsuite_source_integration_tests.netsuite2_customer_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_customer_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_customer_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_customer_data.csv", "original_file_path": "seeds/netsuite2_customer_data.csv", "name": "netsuite2_customer_data", "alias": "netsuite2_customer_data", "checksum": {"name": "sha256", "checksum": "5500a2147bb74338ce1aa8bc059d0f3cae74cdfcf4d0d68b49121540b5ccb573"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.8448188, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_customer_data\""}, "seed.netsuite_source_integration_tests.netsuite2_tran_acct_line_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_tran_acct_line_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_tran_acct_line_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_tran_acct_line_data.csv", "original_file_path": "seeds/netsuite2_tran_acct_line_data.csv", "name": "netsuite2_tran_acct_line_data", "alias": "netsuite2_tran_acct_line_data", "checksum": {"name": "sha256", "checksum": "c6e72ec64e0179be9c3f3fb6435a828570cd1cb9ba2092ce78b6a4900bc02ddb"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.845812, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_tran_acct_line_data\""}, "seed.netsuite_source_integration_tests.netsuite2_department_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_department_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_department_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_department_data.csv", "original_file_path": "seeds/netsuite2_department_data.csv", "name": "netsuite2_department_data", "alias": "netsuite2_department_data", "checksum": {"name": "sha256", "checksum": "6570dc2a4efbac97f87551588b34558d6c5c5b8e071b3cfea59bc9e13a0b7b4a"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.846689, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_department_data\""}, "seed.netsuite_source_integration_tests.netsuite_expense_accounts_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_expense_accounts_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_expense_accounts_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_expense_accounts_data.csv", "original_file_path": "seeds/netsuite_expense_accounts_data.csv", "name": "netsuite_expense_accounts_data", "alias": "netsuite_expense_accounts_data", "checksum": {"name": "sha256", "checksum": "983ef804359afb2c0f7db8c3bb32d5eecdec8c0d9fbf502360944877dc212f9c"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.84756, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_expense_accounts_data\""}, "seed.netsuite_source_integration_tests.netsuite_currencies_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_currencies_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_currencies_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_currencies_data.csv", "original_file_path": "seeds/netsuite_currencies_data.csv", "name": "netsuite_currencies_data", "alias": "netsuite_currencies_data", "checksum": {"name": "sha256", "checksum": "f98ba1751b715296956912fc4c2b43f58875c56740e829c045aefe1172cb2232"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.848427, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_currencies_data\""}, "seed.netsuite_source_integration_tests.netsuite2_accounting_book_sub_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_accounting_book_sub_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_accounting_book_sub_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_accounting_book_sub_data.csv", "original_file_path": "seeds/netsuite2_accounting_book_sub_data.csv", "name": "netsuite2_accounting_book_sub_data", "alias": "netsuite2_accounting_book_sub_data", "checksum": {"name": "sha256", "checksum": "e95506b5ada820d0a9a79e7759d749a1512beaa8922c3d6e78c105f9029f7992"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.8494442, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_accounting_book_sub_data\""}, "seed.netsuite_source_integration_tests.netsuite_accounts_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_accounts_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_accounts_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_accounts_data.csv", "original_file_path": "seeds/netsuite_accounts_data.csv", "name": "netsuite_accounts_data", "alias": "netsuite_accounts_data", "checksum": {"name": "sha256", "checksum": "a3d24c6bf7438f0bf6e0a725565ea0bb000c6fa01b7ffbdfb1b70689f5ad515b"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.85033, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_accounts_data\""}, "seed.netsuite_source_integration_tests.netsuite2_vendor_category_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_vendor_category_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_vendor_category_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_vendor_category_data.csv", "original_file_path": "seeds/netsuite2_vendor_category_data.csv", "name": "netsuite2_vendor_category_data", "alias": "netsuite2_vendor_category_data", "checksum": {"name": "sha256", "checksum": "498453adb748d03d07147625b2ef67966f7200523eef6d824ce8787212159bf8"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.8512251, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_vendor_category_data\""}, "seed.netsuite_source_integration_tests.netsuite_accounting_periods_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_accounting_periods_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_accounting_periods_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_accounting_periods_data.csv", "original_file_path": "seeds/netsuite_accounting_periods_data.csv", "name": "netsuite_accounting_periods_data", "alias": "netsuite_accounting_periods_data", "checksum": {"name": "sha256", "checksum": "673c2f4c76e4cb8bbccecc7e30c0056163d39f53174013f0460a2e4e5efe6e33"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.852106, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_accounting_periods_data\""}, "seed.netsuite_source_integration_tests.netsuite_subsidiaries_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_subsidiaries_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_subsidiaries_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_subsidiaries_data.csv", "original_file_path": "seeds/netsuite_subsidiaries_data.csv", "name": "netsuite_subsidiaries_data", "alias": "netsuite_subsidiaries_data", "checksum": {"name": "sha256", "checksum": "4dd2e8b192c4c052a847d6791b5a32da6968a3234d48b85a37ae20f7ee9445de"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.85308, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_subsidiaries_data\""}, "seed.netsuite_source_integration_tests.netsuite2_job_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_job_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_job_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_job_data.csv", "original_file_path": "seeds/netsuite2_job_data.csv", "name": "netsuite2_job_data", "alias": "netsuite2_job_data", "checksum": {"name": "sha256", "checksum": "5fa5024df2ff944188a0ada73be30727b1b1552f3a890b9bd244264d2188fd68"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.853987, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_job_data\""}, "seed.netsuite_source_integration_tests.netsuite2_transaction_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_transaction_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_transaction_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_transaction_data.csv", "original_file_path": "seeds/netsuite2_transaction_data.csv", "name": "netsuite2_transaction_data", "alias": "netsuite2_transaction_data", "checksum": {"name": "sha256", "checksum": "16b52e72a514adb263e4e26594326996ab0c1089e576155a4f429975b1d54db0"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.854872, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_transaction_data\""}, "seed.netsuite_source_integration_tests.netsuite2_location_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_location_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_location_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_location_data.csv", "original_file_path": "seeds/netsuite2_location_data.csv", "name": "netsuite2_location_data", "alias": "netsuite2_location_data", "checksum": {"name": "sha256", "checksum": "a3ce64b239774b83f9226b8e1f8504147dd5f890a86ab80fda41c0376a6e2d19"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.855756, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_location_data\""}, "seed.netsuite_source_integration_tests.netsuite_income_accounts_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_income_accounts_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_income_accounts_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_income_accounts_data.csv", "original_file_path": "seeds/netsuite_income_accounts_data.csv", "name": "netsuite_income_accounts_data", "alias": "netsuite_income_accounts_data", "checksum": {"name": "sha256", "checksum": "53a81321736b4a42663e253050539eb48b0d179847e23f161927d29c4cbf1367"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.856638, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_income_accounts_data\""}, "seed.netsuite_source_integration_tests.netsuite2_consolidated_exchange_rate_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_consolidated_exchange_rate_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_consolidated_exchange_rate_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_consolidated_exchange_rate_data.csv", "original_file_path": "seeds/netsuite2_consolidated_exchange_rate_data.csv", "name": "netsuite2_consolidated_exchange_rate_data", "alias": "netsuite2_consolidated_exchange_rate_data", "checksum": {"name": "sha256", "checksum": "d609008a0522dd0e4e60f8967234bd4ec6c6b5b4fcc8d97a7167869d27ab24ef"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.8577201, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_consolidated_exchange_rate_data\""}, "seed.netsuite_source_integration_tests.netsuite2_accounting_book_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_accounting_book_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_accounting_book_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_accounting_book_data.csv", "original_file_path": "seeds/netsuite2_accounting_book_data.csv", "name": "netsuite2_accounting_book_data", "alias": "netsuite2_accounting_book_data", "checksum": {"name": "sha256", "checksum": "e5762b59dceb08e4a5170f2ff5413591cfca97f2a8a9a5080bf96860cf276566"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.85864, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_accounting_book_data\""}, "seed.netsuite_source_integration_tests.netsuite2_location_main_address_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_location_main_address_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_location_main_address_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_location_main_address_data.csv", "original_file_path": "seeds/netsuite2_location_main_address_data.csv", "name": "netsuite2_location_main_address_data", "alias": "netsuite2_location_main_address_data", "checksum": {"name": "sha256", "checksum": "605372cb4ea25cff3ec9f9c80374d24c71d6848ff3dbda939928851568a7311d"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.8595278, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_location_main_address_data\""}, "seed.netsuite_source_integration_tests.netsuite_vendor_types_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_vendor_types_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_vendor_types_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_vendor_types_data.csv", "original_file_path": "seeds/netsuite_vendor_types_data.csv", "name": "netsuite_vendor_types_data", "alias": "netsuite_vendor_types_data", "checksum": {"name": "sha256", "checksum": "2111fb5a226e9e73c187a1a1a13caa0c2d3b54bb2eedfe3287f636c049c72b64"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.860418, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_vendor_types_data\""}, "seed.netsuite_source_integration_tests.netsuite2_item_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite2_item_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite2_item_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite2_item_data.csv", "original_file_path": "seeds/netsuite2_item_data.csv", "name": "netsuite2_item_data", "alias": "netsuite2_item_data", "checksum": {"name": "sha256", "checksum": "73809b7847e14ec59fa08705c6ba1ee6be142717f9bcbe2dde9eeb5b1c14a65f"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.861403, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_item_data\""}, "seed.netsuite_source_integration_tests.netsuite_transactions_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_transactions_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_transactions_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_transactions_data.csv", "original_file_path": "seeds/netsuite_transactions_data.csv", "name": "netsuite_transactions_data", "alias": "netsuite_transactions_data", "checksum": {"name": "sha256", "checksum": "c1d88d96de5d5e6ed310a6b008df7390a2aaf7b0d857668e0dfed259f0c704ed"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.862317, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_transactions_data\""}, "seed.netsuite_source_integration_tests.netsuite_transaction_lines_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"ending": "timestamp", "due_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests", "fqn": ["netsuite_source_integration_tests", "netsuite_transaction_lines_data"], "unique_id": "seed.netsuite_source_integration_tests.netsuite_transaction_lines_data", "package_name": "netsuite_source_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests", "path": "netsuite_transaction_lines_data.csv", "original_file_path": "seeds/netsuite_transaction_lines_data.csv", "name": "netsuite_transaction_lines_data", "alias": "netsuite_transaction_lines_data", "checksum": {"name": "sha256", "checksum": "6786bdf4b6e00d6243008c46d0bb69a21158ff27265690503aaa9d8b6faa01d2"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"ending": "timestamp", "due_date": "timestamp"}}, "created_at": 1658868250.863204, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_transaction_lines_data\""}, "model.netsuite_source.stg_netsuite2__transactions": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__transactions_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__transactions_tmp')),\n                staging_columns=get_netsuite2_transactions_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as transaction_id,\n        transactionnumber as transaction_number,\n        type as transaction_type,\n        memo,\n        trandate as transaction_date,\n        status,\n        createddate as created_at,\n        duedate as due_date_at,\n        closedate as closed_at,\n        currency as currency_id,\n        entity as entity_id,\n        postingperiod as accounting_period_id,\n        posting = 'T' as is_posting,\n        intercoadj = 'T' as is_intercompany_adjustment,\n        isreversal = 'T' as is_reversal\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('transactions_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_transactions_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__transactions_tmp", "model.netsuite_source.stg_netsuite2__transactions_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__transactions"], "unique_id": "model.netsuite_source.stg_netsuite2__transactions", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__transactions.sql", "original_file_path": "models/netsuite2/stg_netsuite2__transactions.sql", "name": "stg_netsuite2__transactions", "alias": "stg_netsuite2__transactions", "checksum": {"name": "sha256", "checksum": "6cfa8b003b02cfe90d29c76cb3690de25444fb558c3735c7b2dc4a89fb005251"}, "tags": [], "refs": [["stg_netsuite2__transactions_tmp"], ["stg_netsuite2__transactions_tmp"]], "sources": [], "description": "A table detailing all transactions.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_id": {"name": "transaction_id", "description": "The transaction id of referenced for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_number": {"name": "transaction_number", "description": "The Netsuite generated number of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "The type of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "Memo attached to the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "The timestamp of the transaction date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the record was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date_at": {"name": "due_date_at", "description": "Timestamp of the transactions due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed_at": {"name": "closed_at", "description": "Timestamp of when the transaction was closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "The entity id of the entity used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_posting": {"name": "is_posting", "description": "Boolean indicating if the transaction is a posting event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_intercompany_adjustment": {"name": "is_intercompany_adjustment", "description": "Boolean indicating if the transaction is an intercompany adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_reversal": {"name": "is_reversal", "description": "Boolean indicating if the transaction is a reversal entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.782068, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transactions_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    transactionnumber\n    \n as \n    \n    transactionnumber\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    trandate\n    \n as \n    \n    trandate\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    createddate\n    \n as \n    \n    createddate\n    \n, \n    \n    \n    duedate\n    \n as \n    \n    duedate\n    \n, \n    \n    \n    closedate\n    \n as \n    \n    closedate\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    entity\n    \n as \n    \n    entity\n    \n, \n    \n    \n    postingperiod\n    \n as \n    \n    postingperiod\n    \n, \n    \n    \n    posting\n    \n as \n    \n    posting\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    intercoadj\n    \n , \n    \n    \n    isreversal\n    \n as \n    \n    isreversal\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as transaction_id,\n        transactionnumber as transaction_number,\n        type as transaction_type,\n        memo,\n        trandate as transaction_date,\n        status,\n        createddate as created_at,\n        duedate as due_date_at,\n        closedate as closed_at,\n        currency as currency_id,\n        entity as entity_id,\n        postingperiod as accounting_period_id,\n        posting = 'T' as is_posting,\n        intercoadj = 'T' as is_intercompany_adjustment,\n        isreversal = 'T' as is_reversal\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transactions\""}, "model.netsuite_source.stg_netsuite2__jobs": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__jobs_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__jobs_tmp')),\n                staging_columns=get_job_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as job_id,\n        externalid as job_external_id,\n        customer as customer_id,\n        entityid as entity_id,\n        defaultbillingaddress as billing_address_id,\n        defaultshippingaddress as shipping_address_id,\n        parent as parent_id\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_job_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__jobs_tmp", "model.netsuite_source.stg_netsuite2__jobs_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__jobs"], "unique_id": "model.netsuite_source.stg_netsuite2__jobs", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__jobs.sql", "original_file_path": "models/netsuite2/stg_netsuite2__jobs.sql", "name": "stg_netsuite2__jobs", "alias": "stg_netsuite2__jobs", "checksum": {"name": "sha256", "checksum": "ad872a5592725850b2d219ce6051a429a48a1a0850bec9681dabc65b0b2f7cc9"}, "tags": [], "refs": [["stg_netsuite2__jobs_tmp"], ["stg_netsuite2__jobs_tmp"]], "sources": [], "description": "Table detailing all jobs.", "columns": {"job_id": {"name": "job_id", "description": "The unique identifier of the job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_external_id": {"name": "job_external_id", "description": "The unique identifier of the external job reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The unique identifier of the customer associated with the job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "Reference the the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_id": {"name": "billing_address_id", "description": "Default billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_id": {"name": "shipping_address_id", "description": "Default shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent job.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__jobs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.7706282, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__jobs_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountnumber\n    \n as \n    \n    accountnumber\n    \n, \n    \n    \n    actualtime\n    \n as \n    \n    actualtime\n    \n, \n    \n    \n    allowallresourcesfortasks\n    \n as \n    \n    allowallresourcesfortasks\n    \n, \n    \n    \n    allowexpenses\n    \n as \n    \n    allowexpenses\n    \n, \n    \n    \n    allowtime\n    \n as \n    \n    allowtime\n    \n, \n    \n    \n    alternatecontact\n    \n as \n    \n    alternatecontact\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    billingschedule\n    \n as \n    \n    billingschedule\n    \n, \n    \n    \n    calculatedenddate\n    \n as \n    \n    calculatedenddate\n    \n, \n    \n    \n    calculatedenddatebaseline\n    \n as \n    \n    calculatedenddatebaseline\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    contactlist\n    \n as \n    \n    contactlist\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    currencyprecision\n    \n as \n    \n    currencyprecision\n    \n, \n    \n    \n    custentity1\n    \n as \n    \n    custentity1\n    \n, \n    \n    \n    custentity4\n    \n as \n    \n    custentity4\n    \n, \n    \n    \n    custentity5\n    \n as \n    \n    custentity5\n    \n, \n    \n    \n    customer\n    \n as \n    \n    customer\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    enddate\n    \n as \n    \n    enddate\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitystatus\n    \n as \n    \n    entitystatus\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    estimatedcost\n    \n as \n    \n    estimatedcost\n    \n, \n    \n    \n    estimatedgrossprofit\n    \n as \n    \n    estimatedgrossprofit\n    \n, \n    \n    \n    estimatedgrossprofitpercent\n    \n as \n    \n    estimatedgrossprofitpercent\n    \n, \n    \n    \n    estimatedlaborcost\n    \n as \n    \n    estimatedlaborcost\n    \n, \n    \n    \n    estimatedlaborcostbaseline\n    \n as \n    \n    estimatedlaborcostbaseline\n    \n, \n    \n    \n    estimatedlaborrevenue\n    \n as \n    \n    estimatedlaborrevenue\n    \n, \n    \n    \n    estimatedrevenue\n    \n as \n    \n    estimatedrevenue\n    \n, \n    \n    \n    estimatedtime\n    \n as \n    \n    estimatedtime\n    \n, \n    \n    \n    estimatedtimeoverride\n    \n as \n    \n    estimatedtimeoverride\n    \n, \n    \n    \n    estimatedtimeoverridebaseline\n    \n as \n    \n    estimatedtimeoverridebaseline\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    files\n    \n as \n    \n    files\n    \n, \n    \n    \n    forecastchargerunondemand\n    \n as \n    \n    forecastchargerunondemand\n    \n, \n    \n    \n    fxrate\n    \n as \n    \n    fxrate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includecrmtasksintotals\n    \n as \n    \n    includecrmtasksintotals\n    \n, \n    \n    \n    isexempttime\n    \n as \n    \n    isexempttime\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isproductivetime\n    \n as \n    \n    isproductivetime\n    \n, \n    \n    \n    isutilizedtime\n    \n as \n    \n    isutilizedtime\n    \n, \n    \n    \n    jobbillingtype\n    \n as \n    \n    jobbillingtype\n    \n, \n    \n    \n    jobitem\n    \n as \n    \n    jobitem\n    \n, \n    \n    \n    jobprice\n    \n as \n    \n    jobprice\n    \n, \n    \n    \n    jobtype\n    \n as \n    \n    jobtype\n    \n, \n    \n    \n    lastbaselinedate\n    \n as \n    \n    lastbaselinedate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    limittimetoassignees\n    \n as \n    \n    limittimetoassignees\n    \n, \n    \n    \n    materializetime\n    \n as \n    \n    materializetime\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    percentcomplete\n    \n as \n    \n    percentcomplete\n    \n, \n    \n    \n    percenttimecomplete\n    \n as \n    \n    percenttimecomplete\n    \n, \n    \n    \n    primarycontact\n    \n as \n    \n    primarycontact\n    \n, \n    \n    \n    projectedenddate\n    \n as \n    \n    projectedenddate\n    \n, \n    \n    \n    projectedenddatebaseline\n    \n as \n    \n    projectedenddatebaseline\n    \n, \n    \n    \n    projectmanager\n    \n as \n    \n    projectmanager\n    \n, \n    \n    \n    startdate\n    \n as \n    \n    startdate\n    \n, \n    \n    \n    startdatebaseline\n    \n as \n    \n    startdatebaseline\n    \n, \n    \n    \n    timeapproval\n    \n as \n    \n    timeapproval\n    \n, \n    \n    \n    timeremaining\n    \n as \n    \n    timeremaining\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        id as job_id,\n        externalid as job_external_id,\n        customer as customer_id,\n        entityid as entity_id,\n        defaultbillingaddress as billing_address_id,\n        defaultshippingaddress as shipping_address_id,\n        parent as parent_id\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__jobs\""}, "model.netsuite_source.stg_netsuite2__vendors": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__vendors_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__vendors_tmp')),\n                staging_columns=get_netsuite2_vendors_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as vendor_id,\n        companyname as company_name,\n        datecreated as create_date_at,\n        category as vendor_category_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_vendors_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__vendors_tmp", "model.netsuite_source.stg_netsuite2__vendors_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__vendors"], "unique_id": "model.netsuite_source.stg_netsuite2__vendors", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__vendors.sql", "original_file_path": "models/netsuite2/stg_netsuite2__vendors.sql", "name": "stg_netsuite2__vendors", "alias": "stg_netsuite2__vendors", "checksum": {"name": "sha256", "checksum": "f4b5f8a87be234ed979c5f09110de8a2d32b791a6cc35fad0034b80493c6c4bb"}, "tags": [], "refs": [["stg_netsuite2__vendors_tmp"], ["stg_netsuite2__vendors_tmp"]], "sources": [], "description": "A table detailing all vendor information.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "The unique identifier of the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "Name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "create_date_at": {"name": "create_date_at", "description": "Timestamp of the record creation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_category_id": {"name": "vendor_category_id", "description": "Unique identifier of the vendor category.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__vendors.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.7836318, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__vendors_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountnumber\n    \n as \n    \n    accountnumber\n    \n, \n    \n    \n    altemail\n    \n as \n    \n    altemail\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    altphone\n    \n as \n    \n    altphone\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balanceprimary\n    \n as \n    \n    balanceprimary\n    \n, \n    cast(null as \n    int\n) as \n    \n    billingclass\n    \n , \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    contactlist\n    \n as \n    \n    contactlist\n    \n, \n    \n    \n    creditlimit\n    \n as \n    \n    creditlimit\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    defaultbankaccount\n    \n as \n    \n    defaultbankaccount\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    defaultvendorpaymentaccount\n    \n as \n    \n    defaultvendorpaymentaccount\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    emailpreference\n    \n as \n    \n    emailpreference\n    \n, \n    \n    \n    emailtransactions\n    \n as \n    \n    emailtransactions\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    expenseaccount\n    \n as \n    \n    expenseaccount\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fax\n    \n as \n    \n    fax\n    \n, \n    \n    \n    faxtransactions\n    \n as \n    \n    faxtransactions\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    giveaccess\n    \n as \n    \n    giveaccess\n    \n, \n    \n    \n    homephone\n    \n as \n    \n    homephone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    incoterm\n    \n as \n    \n    incoterm\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    isautogeneratedrepresentingentity\n    \n , \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isjobresourcevend\n    \n as \n    \n    isjobresourcevend\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    laborcost\n    \n as \n    \n    laborcost\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    legalname\n    \n as \n    \n    legalname\n    \n, \n    \n    \n    middlename\n    \n as \n    \n    middlename\n    \n, \n    \n    \n    mobilephone\n    \n as \n    \n    mobilephone\n    \n, \n    \n    \n    payablesaccount\n    \n as \n    \n    payablesaccount\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    printoncheckas\n    \n as \n    \n    printoncheckas\n    \n, \n    \n    \n    printtransactions\n    \n as \n    \n    printtransactions\n    \n, \n    \n    \n    purchaseorderamount\n    \n as \n    \n    purchaseorderamount\n    \n, \n    \n    \n    purchaseorderquantity\n    \n as \n    \n    purchaseorderquantity\n    \n, \n    \n    \n    purchaseorderquantitydiff\n    \n as \n    \n    purchaseorderquantitydiff\n    \n, \n    \n    \n    receiptamount\n    \n as \n    \n    receiptamount\n    \n, \n    \n    \n    receiptquantity\n    \n as \n    \n    receiptquantity\n    \n, \n    \n    \n    receiptquantitydiff\n    \n as \n    \n    receiptquantitydiff\n    \n, \n    cast(null as \n    int\n) as \n    \n    representingsubsidiary\n    \n , \n    \n    \n    rolesforsearch\n    \n as \n    \n    rolesforsearch\n    \n, \n    \n    \n    salutation\n    \n as \n    \n    salutation\n    \n, \n    \n    \n    subsidiaryedition\n    \n as \n    \n    subsidiaryedition\n    \n, \n    \n    \n    terms\n    \n as \n    \n    terms\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    unbilledorders\n    \n as \n    \n    unbilledorders\n    \n, \n    \n    \n    unbilledordersprimary\n    \n as \n    \n    unbilledordersprimary\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    workcalendar\n    \n as \n    \n    workcalendar\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as vendor_id,\n        companyname as company_name,\n        datecreated as create_date_at,\n        category as vendor_category_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__vendors\""}, "model.netsuite_source.stg_netsuite2__classes": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__classes_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__classes_tmp')),\n                staging_columns=get_netsuite2_classes_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as class_id,\n        externalid as class_external_id,\n        name,\n        fullname as full_name,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('classes_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_classes_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__classes_tmp", "model.netsuite_source.stg_netsuite2__classes_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__classes"], "unique_id": "model.netsuite_source.stg_netsuite2__classes", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__classes.sql", "original_file_path": "models/netsuite2/stg_netsuite2__classes.sql", "name": "stg_netsuite2__classes", "alias": "stg_netsuite2__classes", "checksum": {"name": "sha256", "checksum": "55d1438c5add45a09f7a06b5edb622b71d7b1fb040fdf473c3db51261844d4a1"}, "tags": [], "refs": [["stg_netsuite2__classes_tmp"], ["stg_netsuite2__classes_tmp"]], "sources": [], "description": "Table detailing all classes set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_external_id": {"name": "class_external_id", "description": "Reference to the external class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_inactive": {"name": "is_inactive", "description": "Boolean indicating if the class is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__classes.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.757237, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__classes_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as class_id,\n        externalid as class_external_id,\n        name,\n        fullname as full_name,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__classes\""}, "model.netsuite_source.stg_netsuite2__account_types": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__account_types_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__account_types_tmp')),\n                staging_columns=get_accounttype_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        id as account_type_id,\n        balancesheet = 'T' as is_balancesheet,\n        {%- if target.type == 'bigquery' -%}\n        `left` \n        {%- elif target.type == 'snowflake' -%}\n        \"LEFT\"\n        {%- elif target.type in ('redshift', 'postgres') -%}\n        \"left\" \n        {%- else -%}\n        left\n        {%- endif -%} = 'T' as is_leftside,\n        longname as type_name\n\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_accounttype_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__account_types_tmp", "model.netsuite_source.stg_netsuite2__account_types_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__account_types"], "unique_id": "model.netsuite_source.stg_netsuite2__account_types", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__account_types.sql", "original_file_path": "models/netsuite2/stg_netsuite2__account_types.sql", "name": "stg_netsuite2__account_types", "alias": "stg_netsuite2__account_types", "checksum": {"name": "sha256", "checksum": "899ddfe641e319f7830072bbb040247692af2e25cfd465b838d27b46746b0106"}, "tags": [], "refs": [["stg_netsuite2__account_types_tmp"], ["stg_netsuite2__account_types_tmp"]], "sources": [], "description": "A table containing the various account types within Netsuite.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_type_id": {"name": "account_type_id", "description": "Unique identifier of thea account type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_balancesheet": {"name": "is_balancesheet", "description": "Boolean indicating if the account type is a balance sheet account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_leftside": {"name": "is_leftside", "description": "Boolean indicating if the account type is leftside.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type_name": {"name": "type_name", "description": "The name of the account type.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__account_types.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.746891, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__account_types_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balancesheet\n    \n as \n    \n    balancesheet\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    defaultcashflowratetype\n    \n as \n    \n    defaultcashflowratetype\n    \n, \n    \n    \n    defaultgeneralratetype\n    \n as \n    \n    defaultgeneralratetype\n    \n, \n    \n    \n    eliminationalgo\n    \n as \n    \n    eliminationalgo\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includeinrevaldefault\n    \n as \n    \n    includeinrevaldefault\n    \n, \n    \n    \n    internalid\n    \n as \n    \n    internalid\n    \n, \n    \n    \n        \n            \n            \"left\"\n            \n        \n    \n as \n    \n        \n            \n            \"left\"\n            \n        \n    \n, \n    \n    \n    longname\n    \n as \n    \n    longname\n    \n, \n    \n    \n    seqnum\n    \n as \n    \n    seqnum\n    \n, \n    \n    \n    usercanchangerevaloption\n    \n as \n    \n    usercanchangerevaloption\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        id as account_type_id,\n        balancesheet = 'T' as is_balancesheet,\"left\"= 'T' as is_leftside,\n        longname as type_name\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__account_types\""}, "model.netsuite_source.stg_netsuite2__entities": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__entities_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__entities_tmp')),\n                staging_columns=get_entity_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as entity_id,\n        parent as parent_id,\n        entitytitle as entity_name,\n        type as entity_type,\n        isperson = 'T' as is_person,\n        contact as contact_id,\n        customer as customer_id,\n        employee as employee_id,\n        project as job_id,\n        vendor as vendor_id\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_entity_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__entities_tmp", "model.netsuite_source.stg_netsuite2__entities_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__entities"], "unique_id": "model.netsuite_source.stg_netsuite2__entities", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__entities.sql", "original_file_path": "models/netsuite2/stg_netsuite2__entities.sql", "name": "stg_netsuite2__entities", "alias": "stg_netsuite2__entities", "checksum": {"name": "sha256", "checksum": "96c2b4dc091545f8b992e7fd62354e3df9fcf7bfe2756a44bad286e691454492"}, "tags": [], "refs": [["stg_netsuite2__entities_tmp"], ["stg_netsuite2__entities_tmp"]], "sources": [], "description": "Table detailing all entities in Netsuite.", "columns": {"entity_id": {"name": "entity_id", "description": "Th \"The entity id of the entity used for the record.\"e unique identifier of the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The unique identifier of the contact associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The  \"Unique identifier of the customer.\"unique identifier of the customer associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "employee_id": {"name": "employee_id", "description": "The unique identifier of the employee associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_name": {"name": "entity_name", "description": "The entity name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_person": {"name": "is_person", "description": "Boolean indicating whether the entity is a person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The unique identifier of the parent entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "The unique identifier of the project (job) associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_type": {"name": "entity_type", "description": "The entity type (Contact, CustJob, Job, etc).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Th \"The unique identifier of the vendor.\"e unique identifier of the vendor associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__entities.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.765173, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__entities_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    altemail\n    \n as \n    \n    altemail\n    \n, \n    \n    \n    altname\n    \n as \n    \n    altname\n    \n, \n    \n    \n    altphone\n    \n as \n    \n    altphone\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    contact\n    \n as \n    \n    contact\n    \n, \n    \n    \n    customer\n    \n as \n    \n    customer\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    datecreated\n    \n as \n    \n    datecreated\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    employee\n    \n as \n    \n    employee\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    entitynumber\n    \n as \n    \n    entitynumber\n    \n, \n    \n    \n    entitytitle\n    \n as \n    \n    entitytitle\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fax\n    \n as \n    \n    fax\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    genericresource\n    \n as \n    \n    genericresource\n    \n, \n    \n    \n    homephone\n    \n as \n    \n    homephone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    laborcost\n    \n as \n    \n    laborcost\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    middlename\n    \n as \n    \n    middlename\n    \n, \n    \n    \n    mobilephone\n    \n as \n    \n    mobilephone\n    \n, \n    \n    \n    othername\n    \n as \n    \n    othername\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    partner\n    \n as \n    \n    partner\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    project\n    \n as \n    \n    project\n    \n, \n    \n    \n    projecttemplate\n    \n as \n    \n    projecttemplate\n    \n, \n    \n    \n    salutation\n    \n as \n    \n    salutation\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    toplevelparent\n    \n as \n    \n    toplevelparent\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as entity_id,\n        parent as parent_id,\n        entitytitle as entity_name,\n        type as entity_type,\n        isperson = 'T' as is_person,\n        contact as contact_id,\n        customer as customer_id,\n        employee as employee_id,\n        project as job_id,\n        vendor as vendor_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__entities\""}, "model.netsuite_source.stg_netsuite2__accounting_periods": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__accounting_periods_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__accounting_periods_tmp')),\n                staging_columns=get_netsuite2_accounting_periods_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_period_id,\n        parent as parent_id, \n        periodname as name,\n        startdate as starting_at,\n        enddate as ending_at,\n        closedondate as closed_at,\n        isquarter = 'T' as is_quarter,\n        isyear = 'T' as is_year,\n        isadjust = 'T' as is_adjustment,\n        isposting = 'T' as is_posting,\n        closed = 'T' as is_closed,\n        alllocked = 'T' as is_all_locked,\n        arlocked = 'T' as is_ar_locked,\n        aplocked = 'T' as is_ap_locked\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_accounting_periods_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_periods_tmp", "model.netsuite_source.stg_netsuite2__accounting_periods_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__accounting_periods"], "unique_id": "model.netsuite_source.stg_netsuite2__accounting_periods", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__accounting_periods.sql", "original_file_path": "models/netsuite2/stg_netsuite2__accounting_periods.sql", "name": "stg_netsuite2__accounting_periods", "alias": "stg_netsuite2__accounting_periods", "checksum": {"name": "sha256", "checksum": "8007d75811cab3d6e1a2041de1c45e56095ba2e376c83d96bdeb8909527b4f7d"}, "tags": [], "refs": [["stg_netsuite2__accounting_periods_tmp"], ["stg_netsuite2__accounting_periods_tmp"]], "sources": [], "description": "Table detailing all accounting periods, including monthly, quarterly and yearly.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "starting_at": {"name": "starting_at", "description": "Timestamp of when the accounting period starts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ending_at": {"name": "ending_at", "description": "Timestamp if when the accounting period ends.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed_at": {"name": "closed_at", "description": "Timestamp of when the accounting period is closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_quarter": {"name": "is_quarter", "description": "Boolean indicating if the accounting period is the initial quarter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_year": {"name": "is_year", "description": "Boolean indicating if the accounting period is the initial period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_adjustment": {"name": "is_adjustment", "description": "Boolean indicating if the accounting period is an adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_posting": {"name": "is_posting", "description": "Boolean indicating if the accounting period is posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "Boolean indicating if the accounting period is closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_all_locked": {"name": "is_all_locked", "description": "Boolean indicating if all the accounting periods are locked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_ar_locked": {"name": "is_ar_locked", "description": "Boolean indicating if the ar accounting period is locked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_ap_locked": {"name": "is_ap_locked", "description": "Boolean indicating if the ap accounting period is locked.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__accounting_periods.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.7531142, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_periods_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    alllocked\n    \n as \n    \n    alllocked\n    \n, \n    \n    \n    allownonglchanges\n    \n as \n    \n    allownonglchanges\n    \n, \n    \n    \n    aplocked\n    \n as \n    \n    aplocked\n    \n, \n    \n    \n    arlocked\n    \n as \n    \n    arlocked\n    \n, \n    \n    \n    closed\n    \n as \n    \n    closed\n    \n, \n    \n    \n    closedondate\n    \n as \n    \n    closedondate\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    enddate\n    \n as \n    \n    enddate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isadjust\n    \n as \n    \n    isadjust\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    isposting\n    \n as \n    \n    isposting\n    \n, \n    \n    \n    isquarter\n    \n as \n    \n    isquarter\n    \n, \n    \n    \n    isyear\n    \n as \n    \n    isyear\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    periodname\n    \n as \n    \n    periodname\n    \n, \n    \n    \n    startdate\n    \n as \n    \n    startdate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_period_id,\n        parent as parent_id, \n        periodname as name,\n        startdate as starting_at,\n        enddate as ending_at,\n        closedondate as closed_at,\n        isquarter = 'T' as is_quarter,\n        isyear = 'T' as is_year,\n        isadjust = 'T' as is_adjustment,\n        isposting = 'T' as is_posting,\n        closed = 'T' as is_closed,\n        alllocked = 'T' as is_all_locked,\n        arlocked = 'T' as is_ar_locked,\n        aplocked = 'T' as is_ap_locked\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_periods\""}, "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__accounting_period_fiscal_cal_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__accounting_period_fiscal_cal_tmp')),\n                staging_columns=get_accountingperiodfiscalcalendars_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingperiod as accounting_period_id,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_accountingperiodfiscalcalendars_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp", "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__accounting_period_fiscal_cal"], "unique_id": "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__accounting_period_fiscal_cal.sql", "original_file_path": "models/netsuite2/stg_netsuite2__accounting_period_fiscal_cal.sql", "name": "stg_netsuite2__accounting_period_fiscal_cal", "alias": "stg_netsuite2__accounting_period_fiscal_cal", "checksum": {"name": "sha256", "checksum": "2678f0fb6ff02c4a845196aa5ca3538a4a526d711e6fd3a36bda1bd96facb37d"}, "tags": [], "refs": [["stg_netsuite2__accounting_period_fiscal_cal_tmp"], ["stg_netsuite2__accounting_period_fiscal_cal_tmp"]], "sources": [], "description": "A table containing the accounting fiscal calendar periods.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscal_calendar_id": {"name": "fiscal_calendar_id", "description": "Reference to the fiscal calendar used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent fiscal calendar accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__accounting_period_fiscal_cal.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.7505238, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_period_fiscal_cal_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountingperiod\n    \n as \n    \n    accountingperiod\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    fiscalcalendar\n    \n as \n    \n    fiscalcalendar\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingperiod as accounting_period_id,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_period_fiscal_cal\""}, "model.netsuite_source.stg_netsuite2__customers": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__customers_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__customers_tmp')),\n                staging_columns=get_netsuite2_customers_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        id as customer_id,\n        entityid as entity_id,\n        externalid as customer_external_id,\n        parent as parent_id,\n        isperson = 'T' as is_person,\n        companyname as company_name,\n        firstname as first_name,\n        lastname as last_name,\n        email as email_address,\n        phone as phone_number,\n        defaultbillingaddress as default_billing_address_id,\n        defaultshippingaddress as default_shipping_address_id,\n        receivablesaccount as receivables_account_id,\n        currency as currency_id,\n        firstorderdate as date_first_order_at\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('customers_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_customers_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__customers_tmp", "model.netsuite_source.stg_netsuite2__customers_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__customers"], "unique_id": "model.netsuite_source.stg_netsuite2__customers", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__customers.sql", "original_file_path": "models/netsuite2/stg_netsuite2__customers.sql", "name": "stg_netsuite2__customers", "alias": "stg_netsuite2__customers", "checksum": {"name": "sha256", "checksum": "d0d06f971eb7ccff2cbba7e2d5b137177f34095ea8781804fbea74025b14189f"}, "tags": [], "refs": [["stg_netsuite2__customers_tmp"], ["stg_netsuite2__customers_tmp"]], "sources": [], "description": "Table detailing all customer information.", "columns": {"customer_id": {"name": "customer_id", "description": "Unique identifier of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "The entity id of the entity used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_external_id": {"name": "customer_external_id", "description": "Reference to the associated external customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_person": {"name": "is_person", "description": "Boolean indicating if the customer is an individual person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "Name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Last name of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "Customers email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Phone number of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_billing_address_id": {"name": "default_billing_address_id", "description": "Reference to the associated billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_shipping_address_id": {"name": "default_shipping_address_id", "description": "Reference to the associated default shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receivables_account_id": {"name": "receivables_account_id", "description": "Reference to the associated receivables account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_first_order_at": {"name": "date_first_order_at", "description": "Timestamp of when the first order was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__customers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.762107, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__customers_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    entityid\n    \n as \n    \n    entityid\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    isperson\n    \n as \n    \n    isperson\n    \n, \n    \n    \n    companyname\n    \n as \n    \n    companyname\n    \n, \n    \n    \n    firstname\n    \n as \n    \n    firstname\n    \n, \n    \n    \n    lastname\n    \n as \n    \n    lastname\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    defaultbillingaddress\n    \n as \n    \n    defaultbillingaddress\n    \n, \n    \n    \n    defaultshippingaddress\n    \n as \n    \n    defaultshippingaddress\n    \n, \n    \n    \n    receivablesaccount\n    \n as \n    \n    receivablesaccount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    firstorderdate\n    \n as \n    \n    firstorderdate\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as customer_id,\n        entityid as entity_id,\n        externalid as customer_external_id,\n        parent as parent_id,\n        isperson = 'T' as is_person,\n        companyname as company_name,\n        firstname as first_name,\n        lastname as last_name,\n        email as email_address,\n        phone as phone_number,\n        defaultbillingaddress as default_billing_address_id,\n        defaultshippingaddress as default_shipping_address_id,\n        receivablesaccount as receivables_account_id,\n        currency as currency_id,\n        firstorderdate as date_first_order_at\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__customers\""}, "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__accounting_book_subsidiaries_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__accounting_book_subsidiaries_tmp')),\n                staging_columns=get_accountingbooksubsidiaries_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingbook as accounting_book_id,\n        status,\n        subsidiary as subsidiary_id\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_accountingbooksubsidiaries_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp", "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__accounting_book_subsidiaries"], "unique_id": "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__accounting_book_subsidiaries.sql", "original_file_path": "models/netsuite2/stg_netsuite2__accounting_book_subsidiaries.sql", "name": "stg_netsuite2__accounting_book_subsidiaries", "alias": "stg_netsuite2__accounting_book_subsidiaries", "checksum": {"name": "sha256", "checksum": "39777cdd00b82f3bcdf35e01f1d089ba815201daa8f93f8b56c9026b506819ee"}, "tags": [], "refs": [["stg_netsuite2__accounting_book_subsidiaries_tmp"], ["stg_netsuite2__accounting_book_subsidiaries_tmp"]], "sources": [], "description": "A table containing the various account books and the respective subsidiaries.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_book_id": {"name": "accounting_book_id", "description": "Unique identifier of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the accounting book subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__accounting_book_subsidiaries.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.747879, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_book_subsidiaries_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        _fivetran_synced,\n        accountingbook as accounting_book_id,\n        status,\n        subsidiary as subsidiary_id\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_book_subsidiaries\""}, "model.netsuite_source.stg_netsuite2__accounts": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__accounts_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__accounts_tmp')),\n                staging_columns=get_netsuite2_accounts_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as account_id, \n        externalid as account_external_id,\n        parent as parent_id,\n        acctnumber as account_number,\n        accttype as account_type_id,\n        fullname as name,\n        description as account_description,\n        deferralacct as deferral_account_id,\n        cashflowrate as cash_flow_rate_type,\n        generalrate as general_rate_type,\n        currency as currency_id,\n        class as class_id,\n        department as department_id,\n        location as location_id,\n        includechildren = 'T' as is_including_child_subs,\n        isinactive = 'T' as is_inactive,\n        issummary = 'T' as is_summary,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('accounts_pass_through_columns') }}\n        \n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_accounts_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__accounts_tmp", "model.netsuite_source.stg_netsuite2__accounts_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__accounts"], "unique_id": "model.netsuite_source.stg_netsuite2__accounts", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__accounts.sql", "original_file_path": "models/netsuite2/stg_netsuite2__accounts.sql", "name": "stg_netsuite2__accounts", "alias": "stg_netsuite2__accounts", "checksum": {"name": "sha256", "checksum": "784d22fb98d78fd586615f77eacad4791287ef26e5638f184eb117fe0f008585"}, "tags": [], "refs": [["stg_netsuite2__accounts_tmp"], ["stg_netsuite2__accounts_tmp"]], "sources": [], "description": "Table detailing all accounts set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier associated with the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_external_id": {"name": "account_external_id", "description": "Reference to the external account,", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "Netsuite generate account number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_type_id": {"name": "account_type_id", "description": "Reference to the account type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_description": {"name": "account_description", "description": "Description of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferral_account_id": {"name": "deferral_account_id", "description": "Reference to the deferral account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cash_flow_rate_type": {"name": "cash_flow_rate_type", "description": "The cash flow rate type of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "general_rate_type": {"name": "general_rate_type", "description": "The general rate type of the account (Current, Historical, Average).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_including_child_subs": {"name": "is_including_child_subs", "description": "Boolean indicating if the account includes sub accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_inactive": {"name": "is_inactive", "description": "Boolean indicating if the account is inactive.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_summary": {"name": "is_summary", "description": "Boolean indicating if the account is a summary account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__accounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.755979, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounts_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    acctnumber\n    \n as \n    \n    acctnumber\n    \n, \n    \n    \n    accttype\n    \n as \n    \n    accttype\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    deferralacct\n    \n as \n    \n    deferralacct\n    \n, \n    \n    \n    cashflowrate\n    \n as \n    \n    cashflowrate\n    \n, \n    \n    \n    generalrate\n    \n as \n    \n    generalrate\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    includechildren\n    \n as \n    \n    includechildren\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    issummary\n    \n as \n    \n    issummary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as account_id, \n        externalid as account_external_id,\n        parent as parent_id,\n        acctnumber as account_number,\n        accttype as account_type_id,\n        fullname as name,\n        description as account_description,\n        deferralacct as deferral_account_id,\n        cashflowrate as cash_flow_rate_type,\n        generalrate as general_rate_type,\n        currency as currency_id,\n        class as class_id,\n        department as department_id,\n        location as location_id,\n        includechildren = 'T' as is_including_child_subs,\n        isinactive = 'T' as is_inactive,\n        issummary = 'T' as is_summary,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounts\""}, "model.netsuite_source.stg_netsuite2__transaction_lines": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__transaction_lines_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__transaction_lines_tmp')),\n                staging_columns=get_netsuite2_transaction_lines_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as transaction_line_id,\n        transaction as transaction_id,\n        linesequencenumber as transaction_line_number,\n        memo,\n        entity as entity_id,\n        item as item_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        department as department_id,\n        isclosed = 'T' as is_closed,\n        isbillable = 'T' as is_billable,\n        iscogs = 'T' as is_cogs,\n        cleared = 'T' as is_cleared,\n        commitmentfirm = 'T' as is_commitment_firm,\n        mainline = 'T' as is_main_line,\n        taxline = 'T' as is_tax_line\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('transaction_lines_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_transaction_lines_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_lines_tmp", "model.netsuite_source.stg_netsuite2__transaction_lines_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__transaction_lines"], "unique_id": "model.netsuite_source.stg_netsuite2__transaction_lines", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__transaction_lines.sql", "original_file_path": "models/netsuite2/stg_netsuite2__transaction_lines.sql", "name": "stg_netsuite2__transaction_lines", "alias": "stg_netsuite2__transaction_lines", "checksum": {"name": "sha256", "checksum": "f9c8883dafafdece7fb1ec344c62126790721198f540457a66a762808d96bc3b"}, "tags": [], "refs": [["stg_netsuite2__transaction_lines_tmp"], ["stg_netsuite2__transaction_lines_tmp"]], "sources": [], "description": "A table detailing all transaction lines for all transactions.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_line_id": {"name": "transaction_line_id", "description": "Unique identifier of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_id": {"name": "transaction_id", "description": "The transaction id of referenced for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_line_number": {"name": "transaction_line_number", "description": "Netsuite generated number associated with the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "The memo attached to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "The entity id of the entity used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "The unique identifier of the item used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "Boolean indicating if the transaction line is closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_billable": {"name": "is_billable", "description": "Boolean indicating if the transaction line is billable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_cogs": {"name": "is_cogs", "description": "Boolean indicating if the transaction line is a cost of goods sold entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_cleared": {"name": "is_cleared", "description": "Boolean indicating if the transaction line is cleared.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_commitment_firm": {"name": "is_commitment_firm", "description": "Boolean indicating if the transaction line is a commitment firm.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_main_line": {"name": "is_main_line", "description": "Boolean indicating if the transaction line is a main line entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_tax_line": {"name": "is_tax_line", "description": "Boolean indicating if the transaction line is a tax line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__transaction_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.779744, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transaction_lines_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    transaction\n    \n as \n    \n    transaction\n    \n, \n    \n    \n    linesequencenumber\n    \n as \n    \n    linesequencenumber\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    entity\n    \n as \n    \n    entity\n    \n, \n    \n    \n    item\n    \n as \n    \n    item\n    \n, \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n, \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    isclosed\n    \n as \n    \n    isclosed\n    \n, \n    \n    \n    isbillable\n    \n as \n    \n    isbillable\n    \n, \n    \n    \n    iscogs\n    \n as \n    \n    iscogs\n    \n, \n    \n    \n    cleared\n    \n as \n    \n    cleared\n    \n, \n    \n    \n    commitmentfirm\n    \n as \n    \n    commitmentfirm\n    \n, \n    \n    \n    mainline\n    \n as \n    \n    mainline\n    \n, \n    \n    \n    taxline\n    \n as \n    \n    taxline\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as transaction_line_id,\n        transaction as transaction_id,\n        linesequencenumber as transaction_line_number,\n        memo,\n        entity as entity_id,\n        item as item_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        department as department_id,\n        isclosed = 'T' as is_closed,\n        isbillable = 'T' as is_billable,\n        iscogs = 'T' as is_cogs,\n        cleared = 'T' as is_cleared,\n        commitmentfirm = 'T' as is_commitment_firm,\n        mainline = 'T' as is_main_line,\n        taxline = 'T' as is_tax_line\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transaction_lines\""}, "model.netsuite_source.stg_netsuite2__subsidiaries": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__subsidiaries_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__subsidiaries_tmp')),\n                staging_columns=get_netsuite2_subsidiaries_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as subsidiary_id,\n        name,\n        fullname as full_name,\n        email as email_address,\n        mainaddress as main_address_id,\n        country,\n        state,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('subsidiaries_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_subsidiaries_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__subsidiaries_tmp", "model.netsuite_source.stg_netsuite2__subsidiaries_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__subsidiaries"], "unique_id": "model.netsuite_source.stg_netsuite2__subsidiaries", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__subsidiaries.sql", "original_file_path": "models/netsuite2/stg_netsuite2__subsidiaries.sql", "name": "stg_netsuite2__subsidiaries", "alias": "stg_netsuite2__subsidiaries", "checksum": {"name": "sha256", "checksum": "3be3646f51e6cbce641a4069402d860f7db873e67e2cd8f73a58345d3a91b378"}, "tags": [], "refs": [["stg_netsuite2__subsidiaries_tmp"], ["stg_netsuite2__subsidiaries_tmp"]], "sources": [], "description": "Table detailing all subsidiaries.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "Email address associated with the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "main_address_id": {"name": "main_address_id", "description": "Reference to the main address used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country which the subsidiary is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The state which the subsidiary is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscal_calendar_id": {"name": "fiscal_calendar_id", "description": "Reference to the fiscal calendar used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__subsidiaries.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.775105, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__subsidiaries_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    mainaddress\n    \n as \n    \n    mainaddress\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    fiscalcalendar\n    \n as \n    \n    fiscalcalendar\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as subsidiary_id,\n        name,\n        fullname as full_name,\n        email as email_address,\n        mainaddress as main_address_id,\n        country,\n        state,\n        fiscalcalendar as fiscal_calendar_id,\n        parent as parent_id\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__subsidiaries\""}, "model.netsuite_source.stg_netsuite2__entity_address": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__entity_address_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__entity_address_tmp')),\n                staging_columns=get_entityaddress_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_entityaddress_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__entity_address_tmp", "model.netsuite_source.stg_netsuite2__entity_address_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__entity_address"], "unique_id": "model.netsuite_source.stg_netsuite2__entity_address", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__entity_address.sql", "original_file_path": "models/netsuite2/stg_netsuite2__entity_address.sql", "name": "stg_netsuite2__entity_address", "alias": "stg_netsuite2__entity_address", "checksum": {"name": "sha256", "checksum": "71fa72175fd4e45cae5f56d051c957830f1b8593aaa90b849d9610dd48668b2c"}, "tags": [], "refs": [["stg_netsuite2__entity_address_tmp"], ["stg_netsuite2__entity_address_tmp"]], "sources": [], "description": "A table containing addresses and the various entities which they map.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr1": {"name": "addr1", "description": "The associated address 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr2": {"name": "addr2", "description": "The associated address 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr3": {"name": "addr3", "description": "The associated address 3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addressee": {"name": "addressee", "description": "The individual associated with the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_address": {"name": "full_address", "description": "The full address associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The associated city.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The associated country.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The associated state.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nkey": {"name": "nkey", "description": "The associated Netsuite key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zipcode": {"name": "zipcode", "description": "The associated zipcode.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__entity_address.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.7669702, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__entity_address_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    addr1\n    \n as \n    \n    addr1\n    \n, \n    \n    \n    addr2\n    \n as \n    \n    addr2\n    \n, \n    \n    \n    addr3\n    \n as \n    \n    addr3\n    \n, \n    \n    \n    addressee\n    \n as \n    \n    addressee\n    \n, \n    \n    \n    addrphone\n    \n as \n    \n    addrphone\n    \n, \n    \n    \n    addrtext\n    \n as \n    \n    addrtext\n    \n, \n    \n    \n    attention\n    \n as \n    \n    attention\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    dropdownstate\n    \n as \n    \n    dropdownstate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    nkey\n    \n as \n    \n    nkey\n    \n, \n    \n    \n    override\n    \n as \n    \n    override\n    \n, \n    \n    \n    recordowner\n    \n as \n    \n    recordowner\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__entity_address\""}, "model.netsuite_source.stg_netsuite2__location_main_address": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__location_main_address_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__location_main_address_tmp')),\n                staging_columns=get_locationmainaddress_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_locationmainaddress_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__location_main_address_tmp", "model.netsuite_source.stg_netsuite2__location_main_address_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__location_main_address"], "unique_id": "model.netsuite_source.stg_netsuite2__location_main_address", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__location_main_address.sql", "original_file_path": "models/netsuite2/stg_netsuite2__location_main_address.sql", "name": "stg_netsuite2__location_main_address", "alias": "stg_netsuite2__location_main_address", "checksum": {"name": "sha256", "checksum": "71d9ec2fd5ab6d7c0a577fc3bbdc4444c6c266d474e88c3906f12a2d3798dfaf"}, "tags": [], "refs": [["stg_netsuite2__location_main_address_tmp"], ["stg_netsuite2__location_main_address_tmp"]], "sources": [], "description": "A table containing the location main addresses.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr1": {"name": "addr1", "description": "The associated address 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr2": {"name": "addr2", "description": "The associated address 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr3": {"name": "addr3", "description": "The associated address 3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addressee": {"name": "addressee", "description": "The individual associated with the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_address": {"name": "full_address", "description": "The full address associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The associated city.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The associated country.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The associated state.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nkey": {"name": "nkey", "description": "The associated Netsuite key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zipcode": {"name": "zipcode", "description": "The associated zipcode.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__location_main_address.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.772314, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__location_main_address_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    addr1\n    \n as \n    \n    addr1\n    \n, \n    \n    \n    addr2\n    \n as \n    \n    addr2\n    \n, \n    \n    \n    addr3\n    \n as \n    \n    addr3\n    \n, \n    \n    \n    addressee\n    \n as \n    \n    addressee\n    \n, \n    \n    \n    addrphone\n    \n as \n    \n    addrphone\n    \n, \n    \n    \n    addrtext\n    \n as \n    \n    addrtext\n    \n, \n    \n    \n    attention\n    \n as \n    \n    attention\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    dropdownstate\n    \n as \n    \n    dropdownstate\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    nkey\n    \n as \n    \n    nkey\n    \n, \n    \n    \n    override\n    \n as \n    \n    override\n    \n, \n    \n    \n    recordowner\n    \n as \n    \n    recordowner\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        addr1,\n        addr2,\n        addr3,\n        addressee,\n        addrtext as full_address,\n        city,\n        country,\n        coalesce(state, dropdownstate) as state,\n        nkey,\n        zip as zipcode\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__location_main_address\""}, "model.netsuite_source.stg_netsuite2__vendor_categories": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__vendor_categories_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__vendor_categories_tmp')),\n                staging_columns=get_vendorcategory_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        id as vendor_category_id,\n        name,\n        _fivetran_synced\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_vendorcategory_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__vendor_categories_tmp", "model.netsuite_source.stg_netsuite2__vendor_categories_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__vendor_categories"], "unique_id": "model.netsuite_source.stg_netsuite2__vendor_categories", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__vendor_categories.sql", "original_file_path": "models/netsuite2/stg_netsuite2__vendor_categories.sql", "name": "stg_netsuite2__vendor_categories", "alias": "stg_netsuite2__vendor_categories", "checksum": {"name": "sha256", "checksum": "a45b44927e18434b668db3bb0b0720f6aca37bb13f31efc6e60f768933e055d3"}, "tags": [], "refs": [["stg_netsuite2__vendor_categories_tmp"], ["stg_netsuite2__vendor_categories_tmp"]], "sources": [], "description": "A table containing categories and how they map to vendors.", "columns": {"vendor_category_id": {"name": "vendor_category_id", "description": "Unique identifier of the vendor category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the vendor category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__vendor_categories.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.7826781, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__vendor_categories_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    istaxagency\n    \n as \n    \n    istaxagency\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as vendor_category_id,\n        name,\n        _fivetran_synced\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__vendor_categories\""}, "model.netsuite_source.stg_netsuite2__departments": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__departments_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__departments_tmp')),\n                staging_columns=get_netsuite2_departments_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as department_id,\n        parent as parent_id,\n        name,\n        fullname as full_name,\n        subsidiary as subsidiary_id,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('departments_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_departments_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__departments_tmp", "model.netsuite_source.stg_netsuite2__departments_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__departments"], "unique_id": "model.netsuite_source.stg_netsuite2__departments", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__departments.sql", "original_file_path": "models/netsuite2/stg_netsuite2__departments.sql", "name": "stg_netsuite2__departments", "alias": "stg_netsuite2__departments", "checksum": {"name": "sha256", "checksum": "11fa478222fba8dfc22c4d63b005fe315d9fb8f98dbf5e5e3af23a3304d763ed"}, "tags": [], "refs": [["stg_netsuite2__departments_tmp"], ["stg_netsuite2__departments_tmp"]], "sources": [], "description": "Table detailing all departments set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_inactive": {"name": "is_inactive", "description": "Boolean indicating if the department is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__departments.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.7633998, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__departments_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as department_id,\n        parent as parent_id,\n        name,\n        fullname as full_name,\n        subsidiary as subsidiary_id,\n        isinactive = 'T' as is_inactive,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__departments\""}, "model.netsuite_source.stg_netsuite2__transaction_accounting_lines": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__transaction_accounting_lines_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__transaction_accounting_lines_tmp')),\n                staging_columns=get_transactionaccountingline_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        transaction as transaction_id,\n        transactionline as transaction_line_id,\n        accountingbook as accounting_book_id,\n        account as account_id,\n        posting = 'T' as is_posting,\n        amount,\n        credit as credit_amount,\n        debit as debit_amount,\n        netamount as net_amount,\n        amountpaid as paid_amount,\n        amountunpaid as unpaid_amount\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_transactionaccountingline_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp", "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__transaction_accounting_lines"], "unique_id": "model.netsuite_source.stg_netsuite2__transaction_accounting_lines", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__transaction_accounting_lines.sql", "original_file_path": "models/netsuite2/stg_netsuite2__transaction_accounting_lines.sql", "name": "stg_netsuite2__transaction_accounting_lines", "alias": "stg_netsuite2__transaction_accounting_lines", "checksum": {"name": "sha256", "checksum": "8f11b9036edda818da5d940ba0b8f012be8602910c6488dac1b8f0c854165e1a"}, "tags": [], "refs": [["stg_netsuite2__transaction_accounting_lines_tmp"], ["stg_netsuite2__transaction_accounting_lines_tmp"]], "sources": [], "description": "A table detailing all transaction lines for all transactions.", "columns": {"transaction_id": {"name": "transaction_id", "description": "The tra \"The transaction id of referenced for the record.\"nsaction id which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_line_id": {"name": "transaction_line_id", "description": "The unique identifier of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_amount": {"name": "net_amount", "description": "The net amount of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_book_id": {"name": "accounting_book_id", "description": "Reference to the accounting book of the entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Reference to the account associated with the entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_posting": {"name": "is_posting", "description": "Boolean indicating if the entry is posting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_amount": {"name": "credit_amount", "description": "Amount associated as a credit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "debit_amount": {"name": "debit_amount", "description": "Amount associated as a debit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid_amount": {"name": "paid_amount", "description": "Total amount paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unpaid_amount": {"name": "unpaid_amount", "description": "Total amount unpaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__transaction_accounting_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.777076, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transaction_accounting_lines_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account\n    \n as \n    \n    account\n    \n, \n    \n    \n    accountingbook\n    \n as \n    \n    accountingbook\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amountlinked\n    \n as \n    \n    amountlinked\n    \n, \n    \n    \n    amountpaid\n    \n as \n    \n    amountpaid\n    \n, \n    \n    \n    amountunpaid\n    \n as \n    \n    amountunpaid\n    \n, \n    \n    \n    credit\n    \n as \n    \n    credit\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    debit\n    \n as \n    \n    debit\n    \n, \n    \n    \n    exchangerate\n    \n as \n    \n    exchangerate\n    \n, \n    \n    \n    netamount\n    \n as \n    \n    netamount\n    \n, \n    \n    \n    overheadparentitem\n    \n as \n    \n    overheadparentitem\n    \n, \n    \n    \n    paymentamountunused\n    \n as \n    \n    paymentamountunused\n    \n, \n    \n    \n    paymentamountused\n    \n as \n    \n    paymentamountused\n    \n, \n    \n    \n    posting\n    \n as \n    \n    posting\n    \n, \n    \n    \n    transaction\n    \n as \n    \n    transaction\n    \n, \n    \n    \n    transactionline\n    \n as \n    \n    transactionline\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        _fivetran_synced,\n        transaction as transaction_id,\n        transactionline as transaction_line_id,\n        accountingbook as accounting_book_id,\n        account as account_id,\n        posting = 'T' as is_posting,\n        amount,\n        credit as credit_amount,\n        debit as debit_amount,\n        netamount as net_amount,\n        amountpaid as paid_amount,\n        amountunpaid as unpaid_amount\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transaction_accounting_lines\""}, "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__consolidated_exchange_rates_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__consolidated_exchange_rates_tmp')),\n                staging_columns=get_netsuite2_consolidated_exchange_rates_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        id as consolidated_exchange_rate_id,\n        postingperiod as accounting_period_id,\n        fromcurrency as from_currency_id,\n        fromsubsidiary as from_subsidiary_id,\n        tocurrency as to_currency_id,\n        tosubsidiary as to_subsidiary_id,\n        currentrate as current_rate, \n        averagerate as average_rate,\n        historicalrate as historical_rate\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('consolidated_exchange_rates_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_consolidated_exchange_rates_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp", "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__consolidated_exchange_rates"], "unique_id": "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__consolidated_exchange_rates.sql", "original_file_path": "models/netsuite2/stg_netsuite2__consolidated_exchange_rates.sql", "name": "stg_netsuite2__consolidated_exchange_rates", "alias": "stg_netsuite2__consolidated_exchange_rates", "checksum": {"name": "sha256", "checksum": "d818a9207416d913242d57089bfdf69d9c3f9e0c0d865ec51ae24b6b36a93c34"}, "tags": [], "refs": [["stg_netsuite2__consolidated_exchange_rates_tmp"], ["stg_netsuite2__consolidated_exchange_rates_tmp"]], "sources": [], "description": "Table detailing average, historical and current exchange rates for all accounting periods.", "columns": {"consolidated_exchange_rate_id": {"name": "consolidated_exchange_rate_id", "description": "unique identifier for the consolidated exchange rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_currency_id": {"name": "from_currency_id", "description": "The currency id which the consolidated exchange rate is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_subsidiary_id": {"name": "from_subsidiary_id", "description": "The subsidiary id which the consolidated exchange rate is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_currency_id": {"name": "to_currency_id", "description": "The subsidiary id which the consolidated exchange rate is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_subsidiary_id": {"name": "to_subsidiary_id", "description": "The subsidiary id which the consolidated exchange rate is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_rate": {"name": "current_rate", "description": "The current rate associated with the exchange rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_rate": {"name": "average_rate", "description": "The consolidated exchange rates average rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "historical_rate": {"name": "historical_rate", "description": "The historical rate of the exchange rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__consolidated_exchange_rates.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.7586648, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__consolidated_exchange_rates_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    averagerate\n    \n as \n    \n    averagerate\n    \n, \n    \n    \n    currentrate\n    \n as \n    \n    currentrate\n    \n, \n    \n    \n    fromcurrency\n    \n as \n    \n    fromcurrency\n    \n, \n    \n    \n    fromsubsidiary\n    \n as \n    \n    fromsubsidiary\n    \n, \n    \n    \n    historicalrate\n    \n as \n    \n    historicalrate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    postingperiod\n    \n as \n    \n    postingperiod\n    \n, \n    \n    \n    tocurrency\n    \n as \n    \n    tocurrency\n    \n, \n    \n    \n    tosubsidiary\n    \n as \n    \n    tosubsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as consolidated_exchange_rate_id,\n        postingperiod as accounting_period_id,\n        fromcurrency as from_currency_id,\n        fromsubsidiary as from_subsidiary_id,\n        tocurrency as to_currency_id,\n        tosubsidiary as to_subsidiary_id,\n        currentrate as current_rate, \n        averagerate as average_rate,\n        historicalrate as historical_rate\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__consolidated_exchange_rates\""}, "model.netsuite_source.stg_netsuite2__accounting_books": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__accounting_books_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__accounting_books_tmp')),\n                staging_columns=get_netsuite2_accounting_books_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_book_id,\n        name as accounting_book_name,\n        basebook as base_book_id,\n        effectiveperiod as effective_period_id,\n        isadjustmentonly = 'T' as is_adjustment_only,\n        isconsolidated = 'T' as is_consolidated,\n        contingentrevenuehandling as is_contingent_revenue_handling,\n        isprimary = 'T' as is_primary,\n        twosteprevenueallocation as is_two_step_revenue_allocation\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_accounting_books_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_books_tmp", "model.netsuite_source.stg_netsuite2__accounting_books_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__accounting_books"], "unique_id": "model.netsuite_source.stg_netsuite2__accounting_books", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__accounting_books.sql", "original_file_path": "models/netsuite2/stg_netsuite2__accounting_books.sql", "name": "stg_netsuite2__accounting_books", "alias": "stg_netsuite2__accounting_books", "checksum": {"name": "sha256", "checksum": "10a5c8ef91c968893a74423d0235f7d63ac7e279cb2e08a404ae92a85567bbc9"}, "tags": [], "refs": [["stg_netsuite2__accounting_books_tmp"], ["stg_netsuite2__accounting_books_tmp"]], "sources": [], "description": "Table detailing all accounting books set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_book_id": {"name": "accounting_book_id", "description": "Unique identifier of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_book_name": {"name": "accounting_book_name", "description": "Name of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_book_id": {"name": "base_book_id", "description": "Reference to the base book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_period_id": {"name": "effective_period_id", "description": "Reference to the effective period of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_adjustment_only": {"name": "is_adjustment_only", "description": "Boolean indicating if the accounting book is an adjustment only.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_consolidated": {"name": "is_consolidated", "description": "Boolean indicating if the accounting book is a consolidated entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_contingent_revenue_handling": {"name": "is_contingent_revenue_handling", "description": "Boolean indicating if the accounting book is contingent revenue handling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_primary": {"name": "is_primary", "description": "Boolean indicating if the accounting book is a primary entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_two_step_revenue_allocation": {"name": "is_two_step_revenue_allocation", "description": "Boolean indicating if the accounting book is a two step revenue allocation entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__accounting_books.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.7496178, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_books_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    basebook\n    \n as \n    \n    basebook\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    contingentrevenuehandling\n    \n , \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    effectiveperiod\n    \n as \n    \n    effectiveperiod\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    isadjustmentonly\n    \n as \n    \n    isadjustmentonly\n    \n, \n    \n    \n    isconsolidated\n    \n as \n    \n    isconsolidated\n    \n, \n    \n    \n    isprimary\n    \n as \n    \n    isprimary\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    subsidiariesstring\n    \n as \n    \n    subsidiariesstring\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    twosteprevenueallocation\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    unbilledreceivablegrouping\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as accounting_book_id,\n        name as accounting_book_name,\n        basebook as base_book_id,\n        effectiveperiod as effective_period_id,\n        isadjustmentonly = 'T' as is_adjustment_only,\n        isconsolidated = 'T' as is_consolidated,\n        contingentrevenuehandling as is_contingent_revenue_handling,\n        isprimary = 'T' as is_primary,\n        twosteprevenueallocation as is_two_step_revenue_allocation\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_books\""}, "model.netsuite_source.stg_netsuite2__items": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__items_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__items_tmp')),\n                staging_columns=get_netsuite2_items_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as item_id,\n        fullname as name,\n        itemtype as type_name,\n        description as sales_description,\n        department as department_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        assetaccount as asset_account_id,\n        expenseaccount as expense_account_id,\n        gainlossaccount as gain_loss_account_id,\n        incomeaccount as income_account_id,\n        intercoexpenseaccount as interco_expense_account_id,\n        intercoincomeaccount as interco_income_account_id,\n        deferralaccount as deferred_expense_account_id,\n        deferredrevenueaccount as deferred_revenue_account_id,\n        parent as parent_item_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_items_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__items_tmp", "model.netsuite_source.stg_netsuite2__items_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__items"], "unique_id": "model.netsuite_source.stg_netsuite2__items", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__items.sql", "original_file_path": "models/netsuite2/stg_netsuite2__items.sql", "name": "stg_netsuite2__items", "alias": "stg_netsuite2__items", "checksum": {"name": "sha256", "checksum": "4ab457d19f1ffedf51a61dd39255596ec7199e281ebda2927355ee002d5b2614"}, "tags": [], "refs": [["stg_netsuite2__items_tmp"], ["stg_netsuite2__items_tmp"]], "sources": [], "description": "Table detailing information about the items created in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "The unique identifier of the item used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type_name": {"name": "type_name", "description": "Item type name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_description": {"name": "sales_description", "description": "Sales description associated with the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_account_id": {"name": "asset_account_id", "description": "Reference to the asset account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expense_account_id": {"name": "expense_account_id", "description": "Reference to the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gain_loss_account_id": {"name": "gain_loss_account_id", "description": "Reference to the gain or loss account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "income_account_id": {"name": "income_account_id", "description": "Reference to the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interco_expense_account_id": {"name": "interco_expense_account_id", "description": "Reference to the intercompany expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interco_income_account_id": {"name": "interco_income_account_id", "description": "Reference to the intercompany income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferred_expense_account_id": {"name": "deferred_expense_account_id", "description": "Reference to the deferred expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferred_revenue_account_id": {"name": "deferred_revenue_account_id", "description": "Reference to the deferred revenue account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_item_id": {"name": "parent_item_id", "description": "Reference to the parent item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__items.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.769512, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__items_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as \n    int\n) as \n    \n    alternatedemandsourceitem\n    \n , \n    cast(null as \n    int\n) as \n    \n    amortizationperiod\n    \n , \n    cast(null as \n    int\n) as \n    \n    amortizationtemplate\n    \n , \n    \n    \n    assetaccount\n    \n as \n    \n    assetaccount\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    atpmethod\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    autoexpandkitforrevenuemgmt\n    \n , \n    cast(null as \n    float\n) as \n    \n    averagecost\n    \n , \n    cast(null as \n    int\n) as \n    \n    backwardconsumptiondays\n    \n , \n    cast(null as \n    int\n) as \n    \n    billexchratevarianceacct\n    \n , \n    cast(null as \n    int\n) as \n    \n    billingschedule\n    \n , \n    cast(null as \n    int\n) as \n    \n    billpricevarianceacct\n    \n , \n    cast(null as \n    int\n) as \n    \n    billqtyvarianceacct\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    buildentireassembly\n    \n , \n    cast(null as \n    float\n) as \n    \n    buildtime\n    \n , \n    \n    \n    class\n    \n as \n    \n    class\n    \n, \n    cast(null as \n    int\n) as \n    \n    consumptionunit\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    copydescription\n    \n , \n    cast(null as \n    float\n) as \n    \n    cost\n    \n , \n    cast(null as \n    float\n) as \n    \n    costestimate\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    costestimatetype\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    costingmethod\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    costingmethoddisplay\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    countryofmanufacture\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    createddate\n    \n , \n    cast(null as \n    int\n) as \n    \n    createexpenseplanson\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    createjob\n    \n , \n    cast(null as \n    int\n) as \n    \n    createrevenueplanson\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_deleted\n    \n , \n    \n    \n    deferralaccount\n    \n as \n    \n    deferralaccount\n    \n, \n    cast(null as \n    int\n) as \n    \n    deferredrevenueaccount\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    deferrevrec\n    \n , \n    cast(null as \n    float\n) as \n    \n    demandmodifier\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    demandsource\n    \n , \n    cast(null as \n    int\n) as \n    \n    demandtimefence\n    \n , \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    directrevenueposting\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    displayname\n    \n , \n    cast(null as \n    int\n) as \n    \n    dropshipexpenseaccount\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    enforceminqtyinternally\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    excludefromsitemap\n    \n , \n    \n    \n    expenseaccount\n    \n as \n    \n    expenseaccount\n    \n, \n    cast(null as \n    int\n) as \n    \n    expenseamortizationrule\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    externalid\n    \n , \n    cast(null as \n    float\n) as \n    \n    fixedlotsize\n    \n , \n    cast(null as \n    int\n) as \n    \n    forwardconsumptiondays\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    froogleproductfeed\n    \n , \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    cast(null as \n    float\n) as \n    \n    fxcost\n    \n , \n    \n    \n    gainlossaccount\n    \n as \n    \n    gainlossaccount\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    generateaccruals\n    \n , \n    cast(null as \n    float\n) as \n    \n    handlingcost\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    includechildren\n    \n , \n    \n    \n    incomeaccount\n    \n as \n    \n    incomeaccount\n    \n, \n    cast(null as \n    int\n) as \n    \n    intercodefrevaccount\n    \n , \n    cast(null as \n    int\n) as \n    \n    intercoexpenseaccount\n    \n , \n    cast(null as \n    int\n) as \n    \n    intercoincomeaccount\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isdropshipitem\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isfulfillable\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isinactive\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    islotitem\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isonline\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isphantom\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isserialitem\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isspecialorderitem\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isspecialworkorderitem\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    itemid\n    \n , \n    cast(null as \n    int\n) as \n    \n    itemrevenuecategory\n    \n , \n    \n    \n    itemtype\n    \n as \n    \n    itemtype\n    \n, \n    cast(null as \n    timestamp without time zone\n) as \n    \n    lastmodifieddate\n    \n , \n    cast(null as \n    float\n) as \n    \n    lastpurchaseprice\n    \n , \n    cast(null as \n    int\n) as \n    \n    leadtime\n    \n , \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    manufacturer\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    matchbilltoreceipt\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    matrixitemnametemplate\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    matrixtype\n    \n , \n    cast(null as \n    int\n) as \n    \n    maximumquantity\n    \n , \n    cast(null as \n    int\n) as \n    \n    minimumquantity\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    mpn\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    nextagcategory\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    nextagproductfeed\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    overallquantitypricingtype\n    \n , \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    cast(null as \n    int\n) as \n    \n    periodiclotsizedays\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    periodiclotsizetype\n    \n , \n    cast(null as \n    int\n) as \n    \n    preferredlocation\n    \n , \n    cast(null as \n    int\n) as \n    \n    pricinggroup\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    printitems\n    \n , \n    cast(null as \n    int\n) as \n    \n    prodpricevarianceacct\n    \n , \n    cast(null as \n    int\n) as \n    \n    prodqtyvarianceacct\n    \n , \n    cast(null as \n    int\n) as \n    \n    projectexpensetype\n    \n , \n    cast(null as \n    int\n) as \n    \n    projecttemplate\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    purchasedescription\n    \n , \n    cast(null as \n    float\n) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as \n    float\n) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as \n    float\n) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as \n    int\n) as \n    \n    purchasepricevarianceacct\n    \n , \n    cast(null as \n    int\n) as \n    \n    purchaseunit\n    \n , \n    cast(null as \n    int\n) as \n    \n    quantitypricingschedule\n    \n , \n    cast(null as \n    float\n) as \n    \n    receiptamount\n    \n , \n    cast(null as \n    float\n) as \n    \n    receiptquantity\n    \n , \n    cast(null as \n    float\n) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    relateditemsdescription\n    \n , \n    cast(null as \n    int\n) as \n    \n    rescheduleindays\n    \n , \n    cast(null as \n    int\n) as \n    \n    rescheduleoutdays\n    \n , \n    cast(null as \n    float\n) as \n    \n    residual\n    \n , \n    cast(null as \n    int\n) as \n    \n    revenueallocationgroup\n    \n , \n    cast(null as \n    int\n) as \n    \n    revenuerecognitionrule\n    \n , \n    cast(null as \n    int\n) as \n    \n    revrecforecastrule\n    \n , \n    cast(null as \n    int\n) as \n    \n    revreclassfxaccount\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    roundupascomponent\n    \n , \n    cast(null as \n    float\n) as \n    \n    safetystocklevel\n    \n , \n    cast(null as \n    int\n) as \n    \n    saleunit\n    \n , \n    cast(null as \n    int\n) as \n    \n    scrapacct\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    searchkeywords\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    seasonaldemand\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    shipindividually\n    \n , \n    cast(null as \n    int\n) as \n    \n    shippackage\n    \n , \n    cast(null as \n    float\n) as \n    \n    shippingcost\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    shoppingdotcomcategory\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    shoppingproductfeed\n    \n , \n    cast(null as \n    int\n) as \n    \n    shopzillacategoryid\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    shopzillaproductfeed\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    sitemappriority\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    stockdescription\n    \n , \n    cast(null as \n    int\n) as \n    \n    stockunit\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    storedescription\n    \n , \n    cast(null as \n    int\n) as \n    \n    storedisplayimage\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    storedisplayname\n    \n , \n    cast(null as \n    int\n) as \n    \n    storedisplaythumbnail\n    \n , \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    subtype\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    supplylotsizingmethod\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    supplyreplenishmentmethod\n    \n , \n    cast(null as \n    int\n) as \n    \n    supplytimefence\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    supplytype\n    \n , \n    cast(null as \n    float\n) as \n    \n    totalquantityonhand\n    \n , \n    cast(null as \n    float\n) as \n    \n    totalvalue\n    \n , \n    cast(null as \n    float\n) as \n    \n    transferprice\n    \n , \n    cast(null as \n    int\n) as \n    \n    unbuildvarianceaccount\n    \n , \n    cast(null as \n    int\n) as \n    \n    unitstype\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    upccode\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    usebins\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    usemarginalrates\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    vendorname\n    \n , \n    cast(null as \n    int\n) as \n    \n    vendreturnvarianceaccount\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    vsoedelivered\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    vsoepermitdiscount\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    vsoesopgroup\n    \n , \n    cast(null as \n    float\n) as \n    \n    weight\n    \n , \n    cast(null as \n    int\n) as \n    \n    weightunit\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    weightunits\n    \n , \n    cast(null as \n    int\n) as \n    \n    wipacct\n    \n , \n    cast(null as \n    int\n) as \n    \n    wipvarianceacct\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    yahooproductfeed\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as item_id,\n        fullname as name,\n        itemtype as type_name,\n        description as sales_description,\n        department as department_id,\n        class as class_id,\n        location as location_id,\n        subsidiary as subsidiary_id,\n        assetaccount as asset_account_id,\n        expenseaccount as expense_account_id,\n        gainlossaccount as gain_loss_account_id,\n        incomeaccount as income_account_id,\n        intercoexpenseaccount as interco_expense_account_id,\n        intercoincomeaccount as interco_income_account_id,\n        deferralaccount as deferred_expense_account_id,\n        deferredrevenueaccount as deferred_revenue_account_id,\n        parent as parent_item_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__items\""}, "model.netsuite_source.stg_netsuite2__currencies": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__currencies_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__currencies_tmp')),\n                staging_columns=get_netsuite2_currencies_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as currency_id,\n        name,\n        symbol\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_currencies_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__currencies_tmp", "model.netsuite_source.stg_netsuite2__currencies_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__currencies"], "unique_id": "model.netsuite_source.stg_netsuite2__currencies", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__currencies.sql", "original_file_path": "models/netsuite2/stg_netsuite2__currencies.sql", "name": "stg_netsuite2__currencies", "alias": "stg_netsuite2__currencies", "checksum": {"name": "sha256", "checksum": "1732f9e10cdf1c28cb34fff21a98ce324488fb97373e28f948479653fddb4f52"}, "tags": [], "refs": [["stg_netsuite2__currencies_tmp"], ["stg_netsuite2__currencies_tmp"]], "sources": [], "description": "Table detailing all currency information.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "symbol": {"name": "symbol", "description": "Currency symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__currencies.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.7595258, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__currencies_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    currencyprecision\n    \n as \n    \n    currencyprecision\n    \n, \n    \n    \n    date_deleted\n    \n as \n    \n    date_deleted\n    \n, \n    \n    \n    displaysymbol\n    \n as \n    \n    displaysymbol\n    \n, \n    \n    \n    exchangerate\n    \n as \n    \n    exchangerate\n    \n, \n    \n    \n    externalid\n    \n as \n    \n    externalid\n    \n, \n    \n    \n    fxrateupdatetimezone\n    \n as \n    \n    fxrateupdatetimezone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includeinfxrateupdates\n    \n as \n    \n    includeinfxrateupdates\n    \n, \n    \n    \n    isbasecurrency\n    \n as \n    \n    isbasecurrency\n    \n, \n    \n    \n    isinactive\n    \n as \n    \n    isinactive\n    \n, \n    \n    \n    lastmodifieddate\n    \n as \n    \n    lastmodifieddate\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    overridecurrencyformat\n    \n as \n    \n    overridecurrencyformat\n    \n, \n    \n    \n    symbol\n    \n as \n    \n    symbol\n    \n, \n    \n    \n    symbolplacement\n    \n as \n    \n    symbolplacement\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as currency_id,\n        name,\n        symbol\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__currencies\""}, "model.netsuite_source.stg_netsuite2__locations": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite2__locations_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite2__locations_tmp')),\n                staging_columns=get_netsuite2_locations_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as location_id,\n        name,\n        fullname as full_name,\n        mainaddress as main_address_id,\n        parent as parent_id,\n        subsidiary as subsidiary_id\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('locations_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_netsuite2_locations_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite2__locations_tmp", "model.netsuite_source.stg_netsuite2__locations_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "stg_netsuite2__locations"], "unique_id": "model.netsuite_source.stg_netsuite2__locations", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/stg_netsuite2__locations.sql", "original_file_path": "models/netsuite2/stg_netsuite2__locations.sql", "name": "stg_netsuite2__locations", "alias": "stg_netsuite2__locations", "checksum": {"name": "sha256", "checksum": "f209763d31da50bf88ec1381c272ebc8800cec9be699a5d2bb3d35ee83a213c3"}, "tags": [], "refs": [["stg_netsuite2__locations_tmp"], ["stg_netsuite2__locations_tmp"]], "sources": [], "description": "Table detailing all locations, including store, warehouse and office locations.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "main_address_id": {"name": "main_address_id", "description": "Reference to the main address used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Reference to the parent location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite2.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite2/stg_netsuite2__locations.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.7734988, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__locations_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    fullname\n    \n as \n    \n    fullname\n    \n, \n    \n    \n    mainaddress\n    \n as \n    \n    mainaddress\n    \n, \n    \n    \n    parent\n    \n as \n    \n    parent\n    \n, \n    \n    \n    subsidiary\n    \n as \n    \n    subsidiary\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_synced,\n        id as location_id,\n        name,\n        fullname as full_name,\n        mainaddress as main_address_id,\n        parent as parent_id,\n        subsidiary as subsidiary_id\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__locations\""}, "model.netsuite_source.stg_netsuite2__subsidiaries_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_subsidiaries') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.subsidiary"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__subsidiaries_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__subsidiaries_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__subsidiaries_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__subsidiaries_tmp.sql", "name": "stg_netsuite2__subsidiaries_tmp", "alias": "stg_netsuite2__subsidiaries_tmp", "checksum": {"name": "sha256", "checksum": "6666ee27a531fb4f909f1a5bb1ed78860aaab0fce53c3a7d64110b1bb94f8978"}, "tags": [], "refs": [], "sources": [["netsuite2", "subsidiary"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__subsidiaries_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.248231, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_subsidiary_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__subsidiaries_tmp\""}, "model.netsuite_source.stg_netsuite2__transactions_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_transactions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.transaction"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__transactions_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__transactions_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__transactions_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__transactions_tmp.sql", "name": "stg_netsuite2__transactions_tmp", "alias": "stg_netsuite2__transactions_tmp", "checksum": {"name": "sha256", "checksum": "1625f18a3c8501316cb07107ba8fa7193670933f4257bbb1d9af4ba906a2dad0"}, "tags": [], "refs": [], "sources": [["netsuite2", "transaction"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__transactions_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.251595, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_transaction_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transactions_tmp\""}, "model.netsuite_source.stg_netsuite2__entity_address_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_entity_address') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.entity_address"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__entity_address_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__entity_address_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__entity_address_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__entity_address_tmp.sql", "name": "stg_netsuite2__entity_address_tmp", "alias": "stg_netsuite2__entity_address_tmp", "checksum": {"name": "sha256", "checksum": "fcf2a49835607b81e8b532e6103522e1ae39c31c40cab59ac1afe6d989ddf459"}, "tags": [], "refs": [], "sources": [["netsuite2", "entity_address"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__entity_address_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.254808, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_entity_address_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__entity_address_tmp\""}, "model.netsuite_source.stg_netsuite2__account_types_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_account_types') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.account_type"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__account_types_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__account_types_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__account_types_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__account_types_tmp.sql", "name": "stg_netsuite2__account_types_tmp", "alias": "stg_netsuite2__account_types_tmp", "checksum": {"name": "sha256", "checksum": "3415db1a2707377cc7b0653882967c59ed725db0dd959536151d511a41c678c1"}, "tags": [], "refs": [], "sources": [["netsuite2", "account_type"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__account_types_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.258471, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_account_type_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__account_types_tmp\""}, "model.netsuite_source.stg_netsuite2__accounting_periods_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect *\nfrom {{ var('netsuite2_accounting_periods') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.accounting_period"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__accounting_periods_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__accounting_periods_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__accounting_periods_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__accounting_periods_tmp.sql", "name": "stg_netsuite2__accounting_periods_tmp", "alias": "stg_netsuite2__accounting_periods_tmp", "checksum": {"name": "sha256", "checksum": "0149cbd8d601dfcba0487e44f82d6ec166fb513775670cf614d6c6be4164c437"}, "tags": [], "refs": [], "sources": [["netsuite2", "accounting_period"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__accounting_periods_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.261504, "compiled_sql": "\n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_accounting_period_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_periods_tmp\""}, "model.netsuite_source.stg_netsuite2__jobs_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_jobs') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.job"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__jobs_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__jobs_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__jobs_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__jobs_tmp.sql", "name": "stg_netsuite2__jobs_tmp", "alias": "stg_netsuite2__jobs_tmp", "checksum": {"name": "sha256", "checksum": "14799bd78ef93ef464b4dca07908e6ee44a7ff9881faf86757d39b5f4b1d0fd9"}, "tags": [], "refs": [], "sources": [["netsuite2", "job"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__jobs_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.264533, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_job_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__jobs_tmp\""}, "model.netsuite_source.stg_netsuite2__transaction_lines_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_transaction_lines') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.transaction_line"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__transaction_lines_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__transaction_lines_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__transaction_lines_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__transaction_lines_tmp.sql", "name": "stg_netsuite2__transaction_lines_tmp", "alias": "stg_netsuite2__transaction_lines_tmp", "checksum": {"name": "sha256", "checksum": "15ebc09543829a7c09c0e49c546ffa8aae2b509054f26f5cbf06f3aa31731c80"}, "tags": [], "refs": [], "sources": [["netsuite2", "transaction_line"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__transaction_lines_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.267574, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_transaction_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transaction_lines_tmp\""}, "model.netsuite_source.stg_netsuite2__accounts_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect *\nfrom {{ var('netsuite2_accounts') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.account"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__accounts_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__accounts_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__accounts_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__accounts_tmp.sql", "name": "stg_netsuite2__accounts_tmp", "alias": "stg_netsuite2__accounts_tmp", "checksum": {"name": "sha256", "checksum": "2a8d008c5c30f44eca40fa5871ea2579d0b51cf45cf10a39addb620fd870259f"}, "tags": [], "refs": [], "sources": [["netsuite2", "account"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__accounts_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.270568, "compiled_sql": "\n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_account_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounts_tmp\""}, "model.netsuite_source.stg_netsuite2__customers_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect *\nfrom {{ var('netsuite2_customers') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.customer"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__customers_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__customers_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__customers_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__customers_tmp.sql", "name": "stg_netsuite2__customers_tmp", "alias": "stg_netsuite2__customers_tmp", "checksum": {"name": "sha256", "checksum": "e2db5f557cfe416e87f1b8fb38e2b62277871d2ed4c8b3f0ba83f35bcda6ecba"}, "tags": [], "refs": [], "sources": [["netsuite2", "customer"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__customers_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.273802, "compiled_sql": "\n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_customer_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__customers_tmp\""}, "model.netsuite_source.stg_netsuite2__entities_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_entities') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.entity"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__entities_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__entities_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__entities_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__entities_tmp.sql", "name": "stg_netsuite2__entities_tmp", "alias": "stg_netsuite2__entities_tmp", "checksum": {"name": "sha256", "checksum": "bb55a24286c0f26fd9e40a0f56b694fed4a736385a94deeb64ee3360c1310c29"}, "tags": [], "refs": [], "sources": [["netsuite2", "entity"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__entities_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.2775848, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_entities_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__entities_tmp\""}, "model.netsuite_source.stg_netsuite2__currencies_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect *\nfrom {{ var('netsuite2_currencies') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.currency"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__currencies_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__currencies_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__currencies_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__currencies_tmp.sql", "name": "stg_netsuite2__currencies_tmp", "alias": "stg_netsuite2__currencies_tmp", "checksum": {"name": "sha256", "checksum": "1f06a4a8f01197479386859c92462ba485f304e6c944130f66424fb4511a5799"}, "tags": [], "refs": [], "sources": [["netsuite2", "currency"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__currencies_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.2806022, "compiled_sql": "\n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_currency_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__currencies_tmp\""}, "model.netsuite_source.stg_netsuite2__vendors_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_vendors') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.vendor"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__vendors_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__vendors_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__vendors_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__vendors_tmp.sql", "name": "stg_netsuite2__vendors_tmp", "alias": "stg_netsuite2__vendors_tmp", "checksum": {"name": "sha256", "checksum": "e18a924a82a09bd660ba8517d492632efd1c2eabb10e4979e93f422e558d8022"}, "tags": [], "refs": [], "sources": [["netsuite2", "vendor"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__vendors_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.283675, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_vendor_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__vendors_tmp\""}, "model.netsuite_source.stg_netsuite2__items_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_items') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.item"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__items_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__items_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__items_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__items_tmp.sql", "name": "stg_netsuite2__items_tmp", "alias": "stg_netsuite2__items_tmp", "checksum": {"name": "sha256", "checksum": "521a428cea21fb1a256cb1a87335aebc92154e37ead547e3e21b5deeae0ea6c2"}, "tags": [], "refs": [], "sources": [["netsuite2", "item"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__items_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.28663, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_item_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__items_tmp\""}, "model.netsuite_source.stg_netsuite2__accounting_books_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_accounting_books') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.accounting_book"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__accounting_books_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__accounting_books_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__accounting_books_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__accounting_books_tmp.sql", "name": "stg_netsuite2__accounting_books_tmp", "alias": "stg_netsuite2__accounting_books_tmp", "checksum": {"name": "sha256", "checksum": "cc98aeb539020875ec062839d35fd9bed387c7596e29f8fabe2301a90e59d3ac"}, "tags": [], "refs": [], "sources": [["netsuite2", "accounting_book"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__accounting_books_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.289543, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_accounting_book_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_books_tmp\""}, "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_accounting_period_fiscal_calendars') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.accounting_period_fiscal_calendars"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__accounting_period_fiscal_cal_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__accounting_period_fiscal_cal_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__accounting_period_fiscal_cal_tmp.sql", "name": "stg_netsuite2__accounting_period_fiscal_cal_tmp", "alias": "stg_netsuite2__accounting_period_fiscal_cal_tmp", "checksum": {"name": "sha256", "checksum": "d88060ffff63d2d9030c23de1a17a15dd7a34ecda89e323dc7e9cf140a04b03a"}, "tags": [], "refs": [], "sources": [["netsuite2", "accounting_period_fiscal_calendars"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__accounting_period_fiscal_cal_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.292503, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_accounting_period_fiscal_cal_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_period_fiscal_cal_tmp\""}, "model.netsuite_source.stg_netsuite2__vendor_categories_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_vendor_categories') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.vendor_category"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__vendor_categories_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__vendor_categories_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__vendor_categories_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__vendor_categories_tmp.sql", "name": "stg_netsuite2__vendor_categories_tmp", "alias": "stg_netsuite2__vendor_categories_tmp", "checksum": {"name": "sha256", "checksum": "f82fdbf026c789b1a690db3fbcdebfa21b0d7cd1a4224fb03e169fda80079960"}, "tags": [], "refs": [], "sources": [["netsuite2", "vendor_category"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__vendor_categories_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.296136, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_vendor_category_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__vendor_categories_tmp\""}, "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_accounting_book_subsidiaries') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.accounting_book_subsidiaries"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__accounting_book_subsidiaries_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__accounting_book_subsidiaries_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__accounting_book_subsidiaries_tmp.sql", "name": "stg_netsuite2__accounting_book_subsidiaries_tmp", "alias": "stg_netsuite2__accounting_book_subsidiaries_tmp", "checksum": {"name": "sha256", "checksum": "963b2446cfee86b091792d2f0543ce69674775e2abddef92bafff8f6fc3e4220"}, "tags": [], "refs": [], "sources": [["netsuite2", "accounting_book_subsidiaries"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__accounting_book_subsidiaries_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.299152, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_accounting_book_sub_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_book_subsidiaries_tmp\""}, "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_transaction_accounting_lines') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.transaction_accounting_line"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__transaction_accounting_lines_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__transaction_accounting_lines_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__transaction_accounting_lines_tmp.sql", "name": "stg_netsuite2__transaction_accounting_lines_tmp", "alias": "stg_netsuite2__transaction_accounting_lines_tmp", "checksum": {"name": "sha256", "checksum": "91bfd0a5babb67c22979bdb03a16a185b90199fc905d8f55ec34516aa3674991"}, "tags": [], "refs": [], "sources": [["netsuite2", "transaction_accounting_line"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__transaction_accounting_lines_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.302124, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_tran_acct_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transaction_accounting_lines_tmp\""}, "model.netsuite_source.stg_netsuite2__location_main_address_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_location_main_address') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.location_main_address"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__location_main_address_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__location_main_address_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__location_main_address_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__location_main_address_tmp.sql", "name": "stg_netsuite2__location_main_address_tmp", "alias": "stg_netsuite2__location_main_address_tmp", "checksum": {"name": "sha256", "checksum": "360d4cd8b3a246007978c640ed7a423c49b628411bda7d8aab78f431f973d4be"}, "tags": [], "refs": [], "sources": [["netsuite2", "location_main_address"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__location_main_address_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.305093, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_location_main_address_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__location_main_address_tmp\""}, "model.netsuite_source.stg_netsuite2__locations_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect * \nfrom {{ var('netsuite2_locations') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.location"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__locations_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__locations_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__locations_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__locations_tmp.sql", "name": "stg_netsuite2__locations_tmp", "alias": "stg_netsuite2__locations_tmp", "checksum": {"name": "sha256", "checksum": "f9747c40667070b7685c826bbaa541ec10a5dbcb5682fad9e65aa2b28b8b7e42"}, "tags": [], "refs": [], "sources": [["netsuite2", "location"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__locations_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.308325, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_location_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__locations_tmp\""}, "model.netsuite_source.stg_netsuite2__departments_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect *\nfrom {{ var('netsuite2_departments') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.department"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__departments_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__departments_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__departments_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__departments_tmp.sql", "name": "stg_netsuite2__departments_tmp", "alias": "stg_netsuite2__departments_tmp", "checksum": {"name": "sha256", "checksum": "d5a6479a4a567ab3f6c9f85f6a42fb752ab7889065c4f63f1ded657023ff54c9"}, "tags": [], "refs": [], "sources": [["netsuite2", "department"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__departments_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.311475, "compiled_sql": "\n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_department_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__departments_tmp\""}, "model.netsuite_source.stg_netsuite2__classes_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect *\nfrom {{ var('netsuite2_classes') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.classification"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__classes_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__classes_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__classes_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__classes_tmp.sql", "name": "stg_netsuite2__classes_tmp", "alias": "stg_netsuite2__classes_tmp", "checksum": {"name": "sha256", "checksum": "c5d7c66aef27878ade36b031c9e26b523c76373ac106b0f7b618a8e76f3518a2"}, "tags": [], "refs": [], "sources": [["netsuite2", "classification"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__classes_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.315773, "compiled_sql": "\n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_classification_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__classes_tmp\""}, "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == var('netsuite_data_model_override','netsuite2')) }}\n\nselect *\nfrom {{ var('netsuite2_consolidated_exchange_rates') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite2.consolidated_exchange_rate"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite2", "tmp", "stg_netsuite2__consolidated_exchange_rates_tmp"], "unique_id": "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite2/tmp/stg_netsuite2__consolidated_exchange_rates_tmp.sql", "original_file_path": "models/netsuite2/tmp/stg_netsuite2__consolidated_exchange_rates_tmp.sql", "name": "stg_netsuite2__consolidated_exchange_rates_tmp", "alias": "stg_netsuite2__consolidated_exchange_rates_tmp", "checksum": {"name": "sha256", "checksum": "8cfcb1761c48b4f9b640cc61023b4106f86122fd925bea98200d2453da892c36"}, "tags": [], "refs": [], "sources": [["netsuite2", "consolidated_exchange_rate"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite2/tmp/stg_netsuite2__consolidated_exchange_rates_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.319228, "compiled_sql": "\n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_consolidated_exchange_rate_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__consolidated_exchange_rates_tmp\""}, "model.netsuite_source.stg_netsuite__transactions": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__transactions_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__transactions_tmp')),\n                staging_columns=get_transactions_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        status,\n        trandate as transaction_date,\n        currency_id,\n        accounting_period_id,\n        due_date as due_date_at,\n        transaction_type,\n        is_intercompany,\n        is_advanced_intercompany,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('transactions_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_transactions_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__transactions_tmp", "model.netsuite_source.stg_netsuite__transactions_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__transactions"], "unique_id": "model.netsuite_source.stg_netsuite__transactions", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__transactions.sql", "original_file_path": "models/netsuite/stg_netsuite__transactions.sql", "name": "stg_netsuite__transactions", "alias": "stg_netsuite__transactions", "checksum": {"name": "sha256", "checksum": "229453298c19897d353712750c015e5fb7c80d41715a69a04bdb44c1d42dd50a"}, "tags": [], "refs": [["stg_netsuite__transactions_tmp"], ["stg_netsuite__transactions_tmp"]], "sources": [], "description": "A table detailing all transactions.", "columns": {"transaction_id": {"name": "transaction_id", "description": "The unique identifier of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the transaction (ie. Paid In Full, Open, Cancelled).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "The timestamp of the transaction date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "The currency id of the currency used in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date_at": {"name": "due_date_at", "description": "The timestamp of the transaction due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "The transaction type (ie. Bill, Check, Deposit).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_intercompany": {"name": "is_intercompany", "description": "Value indicating whether the transaction is intercompany (either Yes or No).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_advanced_intercompany": {"name": "is_advanced_intercompany", "description": "Value indicating whether the transaction is an advanced intercompany journal entry (either Yes or No).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.694622, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__transactions_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    is_advanced_intercompany\n    \n as \n    \n    is_advanced_intercompany\n    \n, \n    \n    \n    is_intercompany\n    \n as \n    \n    is_intercompany\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    cast(null as \n    timestamp without time zone\n) as \n    \n    trandate\n    \n , \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    transaction_type\n    \n as \n    \n    transaction_type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        status,\n        trandate as transaction_date,\n        currency_id,\n        accounting_period_id,\n        due_date as due_date_at,\n        transaction_type,\n        is_intercompany,\n        is_advanced_intercompany,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your transactions_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__transactions\""}, "model.netsuite_source.stg_netsuite__customers": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__customers_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__customers_tmp')),\n                staging_columns=get_customers_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        companyname as company_name,\n        customer_extid as customer_external_id,\n        city,\n        state,\n        zipcode,\n        country,\n        date_first_order as date_first_order_at,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('customers_pass_through_columns') }}\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_customers_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__customers_tmp", "model.netsuite_source.stg_netsuite__customers_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__customers"], "unique_id": "model.netsuite_source.stg_netsuite__customers", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__customers.sql", "original_file_path": "models/netsuite/stg_netsuite__customers.sql", "name": "stg_netsuite__customers", "alias": "stg_netsuite__customers", "checksum": {"name": "sha256", "checksum": "c9e469c13b1608752f66936b6d5f93e6c21385726175cc422a3dcae92ac46025"}, "tags": [], "refs": [["stg_netsuite__customers_tmp"], ["stg_netsuite__customers_tmp"]], "sources": [], "description": "Table detailing all customer information.", "columns": {"customer_id": {"name": "customer_id", "description": "The unique identifier of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_external_id": {"name": "customer_external_id", "description": "The unique identifier of the external customer reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The city where the customer is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The state where the customer is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zipcode": {"name": "zipcode", "description": "The zipcode of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country where the customer is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_first_order_at": {"name": "date_first_order_at", "description": "The timestamp of the customers first order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__customers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.685545, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__customers_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    companyname\n    \n , \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    customer_extid\n    \n , \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    date_first_order\n    \n as \n    \n    date_first_order\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    zipcode\n    \n as \n    \n    zipcode\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        companyname as company_name,\n        customer_extid as customer_external_id,\n        city,\n        state,\n        zipcode,\n        country,\n        date_first_order as date_first_order_at,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your customers_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__customers\""}, "model.netsuite_source.stg_netsuite__accounting_books": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__accounting_books_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__accounting_books_tmp')),\n                staging_columns=get_accounting_books_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_book_id,\n        is_primary,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_accounting_books_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite__accounting_books_tmp", "model.netsuite_source.stg_netsuite__accounting_books_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__accounting_books"], "unique_id": "model.netsuite_source.stg_netsuite__accounting_books", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__accounting_books.sql", "original_file_path": "models/netsuite/stg_netsuite__accounting_books.sql", "name": "stg_netsuite__accounting_books", "alias": "stg_netsuite__accounting_books", "checksum": {"name": "sha256", "checksum": "1979e4645a6245ff201816e275fd790f10d92570aa910990ef7ac5a145a904f7"}, "tags": [], "refs": [["stg_netsuite__accounting_books_tmp"], ["stg_netsuite__accounting_books_tmp"]], "sources": [], "description": "Table detailing all accounting books set up in Netsuite.", "columns": {"accounting_book_id": {"name": "accounting_book_id", "description": "The unique identifier of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_primary": {"name": "is_primary", "description": "Boolean indicating whether it is a primary accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__accounting_books.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.676933, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounting_books_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    accounting_book_extid\n    \n , \n    \n    \n    accounting_book_id\n    \n as \n    \n    accounting_book_id\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    accounting_book_name\n    \n , \n    cast(null as \n    float\n) as \n    \n    base_book_id\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_created\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_deleted\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_last_modified\n    \n , \n    cast(null as \n    float\n) as \n    \n    effective_period_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    form_template_component_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    form_template_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_adjustment_only\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_arrangement_level_reclass\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_consolidated\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_contingent_revenue_handling\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_include_child_subsidiaries\n    \n , \n    \n    \n    is_primary\n    \n as \n    \n    is_primary\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    is_two_step_revenue_allocation\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    unbilled_receivable_grouping\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_book_id,\n        is_primary,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounting_books\""}, "model.netsuite_source.stg_netsuite__consolidated_exchange_rates": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__consolidated_exchange_rates_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__consolidated_exchange_rates_tmp')),\n                staging_columns=get_consolidated_exchange_rates_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        consolidated_exchange_rate_id,\n        accounting_book_id,\n        accounting_period_id,\n        average_rate,\n        current_rate,\n        historical_rate,\n        from_subsidiary_id,\n        to_subsidiary_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('consolidated_exchange_rates_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_consolidated_exchange_rates_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp", "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__consolidated_exchange_rates"], "unique_id": "model.netsuite_source.stg_netsuite__consolidated_exchange_rates", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__consolidated_exchange_rates.sql", "original_file_path": "models/netsuite/stg_netsuite__consolidated_exchange_rates.sql", "name": "stg_netsuite__consolidated_exchange_rates", "alias": "stg_netsuite__consolidated_exchange_rates", "checksum": {"name": "sha256", "checksum": "6a4909b08f327411a1947017c8f33d333e541e91c578c6c180dd754ebef85b9c"}, "tags": [], "refs": [["stg_netsuite__consolidated_exchange_rates_tmp"], ["stg_netsuite__consolidated_exchange_rates_tmp"]], "sources": [], "description": "Table detailing average, historical and current exchange rates for all accounting periods.", "columns": {"consolidated_exchange_rate_id": {"name": "consolidated_exchange_rate_id", "description": "The unique identifier for the consolidated exchange rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_book_id": {"name": "accounting_book_id", "description": "The accounting book the consolidated exchange rate is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period the consolidated exchange rate is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_rate": {"name": "average_rate", "description": "The consolidated exchange rates average rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_rate": {"name": "current_rate", "description": "The consolidated exchange rates current rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "historical_rate": {"name": "historical_rate", "description": "The consolidated exchange rates historical rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_subsidiary_id": {"name": "from_subsidiary_id", "description": "The subsidiary id which the consolidated exchange rate is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_subsidiary_id": {"name": "to_subsidiary_id", "description": "The subsidiary id which the consolidated exchange rate is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__consolidated_exchange_rates.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.683291, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__consolidated_exchange_rates_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as \n    timestamp without time zone\n) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    accounting_book_id\n    \n as \n    \n    accounting_book_id\n    \n, \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    cast(null as \n    float\n) as \n    \n    average_budget_rate\n    \n , \n    \n    \n    average_rate\n    \n as \n    \n    average_rate\n    \n, \n    \n    \n    consolidated_exchange_rate_id\n    \n as \n    \n    consolidated_exchange_rate_id\n    \n, \n    cast(null as \n    float\n) as \n    \n    current_budget_rate\n    \n , \n    \n    \n    current_rate\n    \n as \n    \n    current_rate\n    \n, \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_deleted\n    \n , \n    \n    \n    from_subsidiary_id\n    \n as \n    \n    from_subsidiary_id\n    \n, \n    cast(null as \n    float\n) as \n    \n    historical_budget_rate\n    \n , \n    \n    \n    historical_rate\n    \n as \n    \n    historical_rate\n    \n, \n    \n    \n    to_subsidiary_id\n    \n as \n    \n    to_subsidiary_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        consolidated_exchange_rate_id,\n        accounting_book_id,\n        accounting_period_id,\n        average_rate,\n        current_rate,\n        historical_rate,\n        from_subsidiary_id,\n        to_subsidiary_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your consolidated_exchange_rates_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__consolidated_exchange_rates\""}, "model.netsuite_source.stg_netsuite__transaction_lines": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__transaction_lines_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__transaction_lines_tmp')),\n                staging_columns=get_transaction_lines_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        transaction_line_id,\n        subsidiary_id,\n        account_id,\n        company_id,\n        item_id,\n        amount,\n        non_posting_line,\n        class_id,\n        location_id,\n        department_id,\n        memo\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('transaction_lines_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_transaction_lines_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__transaction_lines_tmp", "model.netsuite_source.stg_netsuite__transaction_lines_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__transaction_lines"], "unique_id": "model.netsuite_source.stg_netsuite__transaction_lines", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__transaction_lines.sql", "original_file_path": "models/netsuite/stg_netsuite__transaction_lines.sql", "name": "stg_netsuite__transaction_lines", "alias": "stg_netsuite__transaction_lines", "checksum": {"name": "sha256", "checksum": "439d9f1cc5d341305a11759ce2f4be9e154524b992103409aef648f97c471b80"}, "tags": [], "refs": [["stg_netsuite__transaction_lines_tmp"], ["stg_netsuite__transaction_lines_tmp"]], "sources": [], "description": "A table detailing all transaction lines for all transactions.", "columns": {"transaction_id": {"name": "transaction_id", "description": "The transaction id which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_line_id": {"name": "transaction_line_id", "description": "The unique identifier of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The subsidiary id of the subsidiary which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account id of the account linked to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The company id of the company linked to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "The item id of the item which is included in the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "non_posting_line": {"name": "non_posting_line", "description": "Value indicating whether the transaction line is a non posting line (either Yes or No).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "The class id of the class which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The location id of the location which the transaction line took place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "The department id of the department linked to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "The memo attached to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__transaction_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.6930938, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__transaction_lines_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    company_id\n    \n as \n    \n    company_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    memo\n    \n as \n    \n    memo\n    \n, \n    \n    \n    non_posting_line\n    \n as \n    \n    non_posting_line\n    \n, \n    \n    \n    subsidiary_id\n    \n as \n    \n    subsidiary_id\n    \n, \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    transaction_line_id\n    \n as \n    \n    transaction_line_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        transaction_id,\n        transaction_line_id,\n        subsidiary_id,\n        account_id,\n        company_id,\n        item_id,\n        amount,\n        non_posting_line,\n        class_id,\n        location_id,\n        department_id,\n        memo\n\n        --The below macro adds the fields defined within your transaction_lines_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__transaction_lines\""}, "model.netsuite_source.stg_netsuite__income_accounts": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__income_accounts_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__income_accounts_tmp')),\n                staging_columns=get_income_accounts_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        income_account_id,\n        name, \n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_income_accounts_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite__income_accounts_tmp", "model.netsuite_source.stg_netsuite__income_accounts_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__income_accounts"], "unique_id": "model.netsuite_source.stg_netsuite__income_accounts", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__income_accounts.sql", "original_file_path": "models/netsuite/stg_netsuite__income_accounts.sql", "name": "stg_netsuite__income_accounts", "alias": "stg_netsuite__income_accounts", "checksum": {"name": "sha256", "checksum": "299fb45e200223bd290f01314ad47a4619932d39f3b04fe929a82c5ee8a0fe2b"}, "tags": [], "refs": [["stg_netsuite__income_accounts_tmp"], ["stg_netsuite__income_accounts_tmp"]], "sources": [], "description": "Table detailing all income accounts.", "columns": {"income_account_id": {"name": "income_account_id", "description": "The unique identifier of the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The income account's associated parent account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "The account number associated with the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__income_accounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.68819, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__income_accounts_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    comments\n    \n , \n    cast(null as \n    float\n) as \n    \n    current_balance\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_deleted\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_last_modified\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    desription\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    full_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    income_account_extid\n    \n , \n    \n    \n    income_account_id\n    \n as \n    \n    income_account_id\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    is_including_child_subs\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_summary\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isinactive\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    legal_name\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        income_account_id,\n        name, \n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__income_accounts\""}, "model.netsuite_source.stg_netsuite__expense_accounts": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__expense_accounts_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__expense_accounts_tmp')),\n                staging_columns=get_expense_accounts_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        expense_account_id,\n        name,\n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_expense_accounts_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite__expense_accounts_tmp", "model.netsuite_source.stg_netsuite__expense_accounts_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__expense_accounts"], "unique_id": "model.netsuite_source.stg_netsuite__expense_accounts", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__expense_accounts.sql", "original_file_path": "models/netsuite/stg_netsuite__expense_accounts.sql", "name": "stg_netsuite__expense_accounts", "alias": "stg_netsuite__expense_accounts", "checksum": {"name": "sha256", "checksum": "f7c1276dddff15a68a1de673f503dc127efb4a2932756ea28c09c231aaf52b2c"}, "tags": [], "refs": [["stg_netsuite__expense_accounts_tmp"], ["stg_netsuite__expense_accounts_tmp"]], "sources": [], "description": "Table detailing all expense accounts.", "columns": {"expense_account_id": {"name": "expense_account_id", "description": "The unique identifier of the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The expense account's associated parent account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "The account number associated with the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__expense_accounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.6871948, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__expense_accounts_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    comments\n    \n , \n    cast(null as \n    float\n) as \n    \n    current_balance\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_deleted\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_last_modified\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    desription\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    expense_account_extid\n    \n , \n    \n    \n    expense_account_id\n    \n as \n    \n    expense_account_id\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    full_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_including_child_subs\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_summary\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isinactive\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    legal_name\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        expense_account_id,\n        name,\n        parent_id,\n        account_number,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__expense_accounts\""}, "model.netsuite_source.stg_netsuite__vendors": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__vendors_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__vendors_tmp')),\n                staging_columns=get_vendors_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_id,\n        companyname as company_name,\n        create_date as create_date_at,\n        vendor_type_id,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_vendors_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite__vendors_tmp", "model.netsuite_source.stg_netsuite__vendors_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__vendors"], "unique_id": "model.netsuite_source.stg_netsuite__vendors", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__vendors.sql", "original_file_path": "models/netsuite/stg_netsuite__vendors.sql", "name": "stg_netsuite__vendors", "alias": "stg_netsuite__vendors", "checksum": {"name": "sha256", "checksum": "d51ababd306a844771fb765167ef7520a6880c87bc27b41e3475c8e942c1a251"}, "tags": [], "refs": [["stg_netsuite__vendors_tmp"], ["stg_netsuite__vendors_tmp"]], "sources": [], "description": "A table detailing all vendor information.", "columns": {"vendor_id": {"name": "vendor_id", "description": "The unique identifier of the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_type_id": {"name": "vendor_type_id", "description": "The vendor type the vendor is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The vendor's company name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "create_date_at": {"name": "create_date_at", "description": "The timestamp of the date the vendor was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__vendors.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.696216, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__vendors_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as \n    timestamp without time zone\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    account_owner\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    accountnumber\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    accounts_email\n    \n , \n    cast(null as \n    float\n) as \n    \n    annual_revenue\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    auto_renewals\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    auto_send_statements\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    billaddress\n    \n , \n    cast(null as \n    float\n) as \n    \n    billing_class_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    city\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    comments\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    companyname\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    country\n    \n , \n    \n    \n    create_date\n    \n as \n    \n    create_date\n    \n, \n    cast(null as \n    float\n) as \n    \n    creditlimit\n    \n , \n    cast(null as \n    float\n) as \n    \n    currency_id\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_deleted\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_last_modified\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    dic\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    email\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    email_bill_payment_vouchers\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    email_cash_sales\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    email_credit_notes\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    email_invoices\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    email_item_fulfilments\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    email_purchase_orders\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    email_quotes\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    email_sales_orders\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    email_statements\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    employee_number\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    exemption_certificate_no\n    \n , \n    cast(null as \n    float\n) as \n    \n    expense_account_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    fax\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    full_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    home_phone\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    hris_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    ico\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    id_number_in_the_country_of_r\n    \n , \n    cast(null as \n    float\n) as \n    \n    id_type_in_the_country_of_r_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    in_transit_balance\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    incoterm\n    \n , \n    cast(null as \n    float\n) as \n    \n    industry_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    invoice_via_procurement_syste\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    invoicing_details\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is1099eligible\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_partner\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_person\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isemailhtml\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isemailpdf\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isinactive\n    \n , \n    cast(null as \n    float\n) as \n    \n    labor_cost\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    last_modified_date\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    last_sales_activity\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    line1\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    line2\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    line3\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    loginaccess\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    lsa_link\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    lsa_link_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    mobile_phone\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    msa_effective_date\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    name\n    \n , \n    cast(null as \n    float\n) as \n    \n    no__of_employees\n    \n , \n    cast(null as \n    float\n) as \n    \n    openbalance\n    \n , \n    cast(null as \n    float\n) as \n    \n    openbalance_foreign\n    \n , \n    cast(null as \n    float\n) as \n    \n    payables_account_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    payment_terms_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    phone\n    \n , \n    cast(null as \n    float\n) as \n    \n    prepayment_balance\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    printoncheckas\n    \n , \n    cast(null as \n    float\n) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as \n    float\n) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as \n    float\n) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    purchases_email\n    \n , \n    cast(null as \n    float\n) as \n    \n    receiptamount\n    \n , \n    cast(null as \n    float\n) as \n    \n    receiptquantity\n    \n , \n    cast(null as \n    float\n) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as \n    float\n) as \n    \n    represents_subsidiary_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    restrict_access_to_expensify\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    salesforce_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    shipaddress\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    shipping_email\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    state\n    \n , \n    cast(null as \n    float\n) as \n    \n    subsidiary\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    tax_contact_first_name\n    \n , \n    cast(null as \n    float\n) as \n    \n    tax_contact_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    tax_contact_last_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    tax_contact_middle_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    tax_number\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    taxidnum\n    \n , \n    cast(null as \n    float\n) as \n    \n    time_approver_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    transactions_need_approval\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    uen\n    \n , \n    cast(null as \n    float\n) as \n    \n    unbilled_orders\n    \n , \n    cast(null as \n    float\n) as \n    \n    unbilled_orders_foreign\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    url\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    vat_registration_no\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    vendor_extid\n    \n , \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n, \n    \n    \n    vendor_type_id\n    \n as \n    \n    vendor_type_id\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    zipcode\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_id,\n        companyname as company_name,\n        create_date as create_date_at,\n        vendor_type_id,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__vendors\""}, "model.netsuite_source.stg_netsuite__classes": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__classes_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__classes_tmp')),\n                staging_columns=get_classes_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        class_id,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('classes_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_classes_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__classes_tmp", "model.netsuite_source.stg_netsuite__classes_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__classes"], "unique_id": "model.netsuite_source.stg_netsuite__classes", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__classes.sql", "original_file_path": "models/netsuite/stg_netsuite__classes.sql", "name": "stg_netsuite__classes", "alias": "stg_netsuite__classes", "checksum": {"name": "sha256", "checksum": "edf56a2971642640474b042c3ec91efc7aa294b9fb3861a1bd747b61af23205b"}, "tags": [], "refs": [["stg_netsuite__classes_tmp"], ["stg_netsuite__classes_tmp"]], "sources": [], "description": "Table detailing all classes set up in Netsuite.", "columns": {"class_id": {"name": "class_id", "description": "The unique identifier of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__classes.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.68116, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__classes_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        class_id,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your classes_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__classes\""}, "model.netsuite_source.stg_netsuite__subsidiaries": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__subsidiaries_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__subsidiaries_tmp')),\n                staging_columns=get_subsidiaries_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        subsidiary_id,\n        fiscal_calendar_id,\n        full_name,\n        name,\n        parent_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('subsidiaries_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_subsidiaries_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__subsidiaries_tmp", "model.netsuite_source.stg_netsuite__subsidiaries_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__subsidiaries"], "unique_id": "model.netsuite_source.stg_netsuite__subsidiaries", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__subsidiaries.sql", "original_file_path": "models/netsuite/stg_netsuite__subsidiaries.sql", "name": "stg_netsuite__subsidiaries", "alias": "stg_netsuite__subsidiaries", "checksum": {"name": "sha256", "checksum": "f6477b555a1708adf2e9853d11edeba88e1fe42f4638d1f377e80f7a5523a622"}, "tags": [], "refs": [["stg_netsuite__subsidiaries_tmp"], ["stg_netsuite__subsidiaries_tmp"]], "sources": [], "description": "Table detailing all subsidiaries.", "columns": {"subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscal_calendar_id": {"name": "fiscal_calendar_id", "description": "The fiscal calendar id associated with the fiscal calendar the subsidiary is on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The parent subsidiary id which the subsidiary is under.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__subsidiaries.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.6911738, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__subsidiaries_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    address\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    address1\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    address2\n    \n , \n    cast(null as \n    float\n) as \n    \n    base_currency_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    branch_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    brn\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    city\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    country\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_deleted\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_last_modified\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    edition\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    federal_number\n    \n , \n    \n    \n    fiscal_calendar_id\n    \n as \n    \n    fiscal_calendar_id\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    full_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_elimination\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_moss\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isinactive\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isinactive_bool\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    legal_name\n    \n , \n    cast(null as \n    float\n) as \n    \n    moss_nexus_id\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    cast(null as \n    float\n) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as \n    float\n) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as \n    float\n) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as \n    float\n) as \n    \n    receiptamount\n    \n , \n    cast(null as \n    float\n) as \n    \n    receiptquantity\n    \n , \n    cast(null as \n    float\n) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    return_address\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    return_address1\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    return_address2\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    return_city\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    return_country\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    return_state\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    return_zipcode\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    shipping_address\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    shipping_address1\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    shipping_address2\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    shipping_city\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    shipping_country\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    shipping_state\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    shipping_zipcode\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    state\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    state_tax_number\n    \n , \n    cast(null as \n    float\n) as \n    \n    subnav__searchable_subsidiary\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    subsidiary_extid\n    \n , \n    \n    \n    subsidiary_id\n    \n as \n    \n    subsidiary_id\n    \n, \n    cast(null as \n    float\n) as \n    \n    taxonomy_reference_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    tran_num_prefix\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    uen\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    url\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    zipcode\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        subsidiary_id,\n        fiscal_calendar_id,\n        full_name,\n        name,\n        parent_id,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your subsidiaries_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__subsidiaries\""}, "model.netsuite_source.stg_netsuite__accounts": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__accounts_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__accounts_tmp')),\n                staging_columns=get_accounts_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        account_id,\n        parent_id,\n        name,\n        type_name,\n        accountnumber as account_number,\n        general_rate_type,\n        is_leftside,\n        is_balancesheet,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('accounts_pass_through_columns') }}\n        \n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_accounts_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__accounts_tmp", "model.netsuite_source.stg_netsuite__accounts_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__accounts"], "unique_id": "model.netsuite_source.stg_netsuite__accounts", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__accounts.sql", "original_file_path": "models/netsuite/stg_netsuite__accounts.sql", "name": "stg_netsuite__accounts", "alias": "stg_netsuite__accounts", "checksum": {"name": "sha256", "checksum": "510d294af59df7ffa89fbfad25c7b865acc90b656833abb3aacf861889f170d1"}, "tags": [], "refs": [["stg_netsuite__accounts_tmp"], ["stg_netsuite__accounts_tmp"]], "sources": [], "description": "Table detailing all accounts set up in Netsuite.", "columns": {"account_id": {"name": "account_id", "description": "The unique identifier associated with the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The accounts associated parent account id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type_name": {"name": "type_name", "description": "The name of the type of the account (ie. Bank, Equity, Income, Expense).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "The account number associated with the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "general_rate_type": {"name": "general_rate_type", "description": "The general rate type of the account (Current, Historical, Average).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_leftside": {"name": "is_leftside", "description": "Value indicating whether the account is on the leftside (debit).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_balancesheet": {"name": "is_balancesheet", "description": "Value indicating whether the account is a balance sheet account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__accounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.680513, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounts_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    accountnumber\n    \n , \n    \n    \n    general_rate_type\n    \n as \n    \n    general_rate_type\n    \n, \n    \n    \n    is_balancesheet\n    \n as \n    \n    is_balancesheet\n    \n, \n    \n    \n    is_leftside\n    \n as \n    \n    is_leftside\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    type_name\n    \n as \n    \n    type_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        account_id,\n        parent_id,\n        name,\n        type_name,\n        accountnumber as account_number,\n        general_rate_type,\n        is_leftside,\n        is_balancesheet,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n        \n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounts\""}, "model.netsuite_source.stg_netsuite__items": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__items_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__items_tmp')),\n                staging_columns=get_items_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        item_id,\n        name,\n        type_name,\n        salesdescription as sales_description,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_items_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite__items_tmp", "model.netsuite_source.stg_netsuite__items_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__items"], "unique_id": "model.netsuite_source.stg_netsuite__items", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__items.sql", "original_file_path": "models/netsuite/stg_netsuite__items.sql", "name": "stg_netsuite__items", "alias": "stg_netsuite__items", "checksum": {"name": "sha256", "checksum": "4c95764215887a08029fc3dc5c820c5bc88aae7bd735850cc0ef93c7b778b188"}, "tags": [], "refs": [["stg_netsuite__items_tmp"], ["stg_netsuite__items_tmp"]], "sources": [], "description": "Table detailing information about the items created in Netsuite.", "columns": {"item_id": {"name": "item_id", "description": "The unique identifier of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type_name": {"name": "type_name", "description": "The type of the item (ie. Markup, Service, Discount).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_description": {"name": "sales_description", "description": "The items sales description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__items.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.689075, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__items_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    allow_drop_ship\n    \n , \n    cast(null as \n    float\n) as \n    \n    alt_demand_source_item_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    asset_account_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    atp_lead_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    atp_method\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    available_to_partners\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    avatax_taxcode\n    \n , \n    cast(null as \n    float\n) as \n    \n    averagecost\n    \n , \n    cast(null as \n    float\n) as \n    \n    backward_consumption_days\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    build_sub_assemblies\n    \n , \n    cast(null as \n    float\n) as \n    \n    class_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    code_of_supply_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    commodity_code\n    \n , \n    cast(null as \n    float\n) as \n    \n    consumption_unit_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    cost_0\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    cost_category\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    cost_estimate_type\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    costing_method\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    country_of_manufacture\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    create_plan_on_event_type\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    created\n    \n , \n    cast(null as \n    float\n) as \n    \n    current_on_order_count\n    \n , \n    cast(null as \n    float\n) as \n    \n    custreturn_variance_account_id\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_deleted\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_last_modified\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_of_last_transaction\n    \n , \n    cast(null as \n    float\n) as \n    \n    default_return_cost\n    \n , \n    cast(null as \n    float\n) as \n    \n    deferred_expense_account_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    deferred_revenue_account_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    demand_source\n    \n , \n    cast(null as \n    float\n) as \n    \n    demand_time_fence\n    \n , \n    cast(null as \n    float\n) as \n    \n    department_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    deposit\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    displayname\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    distribution_category\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    distribution_network\n    \n , \n    cast(null as \n    float\n) as \n    \n    dropship_expense_account_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    effective_bom_control_type\n    \n , \n    cast(null as \n    float\n) as \n    \n    expense_account_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    featureddescription\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    featureditem\n    \n , \n    cast(null as \n    float\n) as \n    \n    fixed_lot_size\n    \n , \n    cast(null as \n    float\n) as \n    \n    forward_consumption_days\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    fraud_risk\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    full_name\n    \n , \n    cast(null as \n    float\n) as \n    \n    fx_adjustment_account_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    gain_loss_account_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    handling_cost\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    hazmat\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    hazmat_hazard_class\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    hazmat_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    hazmat_item_units\n    \n , \n    cast(null as \n    float\n) as \n    \n    hazmat_item_units_qty\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    hazmat_packing_group\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    hazmat_shipping_name\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    include_child_subsidiaries\n    \n , \n    cast(null as \n    float\n) as \n    \n    income_account_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    interco_expense_account_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    interco_income_account_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    invt_count_classification\n    \n , \n    cast(null as \n    float\n) as \n    \n    invt_count_interval\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_cont_rev_handling\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_enforce_min_qty_internally\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_hold_rev_rec\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_moss\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_phantom\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_special_order_item\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isinactive\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isonline\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    istaxable\n    \n , \n    cast(null as \n    float\n) as \n    \n    item_defined_cost\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    item_extid\n    \n , \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    cast(null as \n    float\n) as \n    \n    item_image\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    item_revenue_category\n    \n , \n    cast(null as \n    float\n) as \n    \n    item_term_id\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    last_cogs_correction\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    last_invt_count_date\n    \n , \n    cast(null as \n    float\n) as \n    \n    last_purchase_price\n    \n , \n    cast(null as \n    float\n) as \n    \n    location_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    lot_numbered_item\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    lot_sizing_method\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    manufacturer\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    manufacturing_charge_item\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    match_bill_to_receipt\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    matrix_type\n    \n , \n    cast(null as \n    float\n) as \n    \n    maximum_quantity\n    \n , \n    cast(null as \n    float\n) as \n    \n    minimum_quantity\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    modified\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    mpn\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as \n    float\n) as \n    \n    nature_of_transaction_codes_id\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    next_invt_count_date\n    \n , \n    cast(null as \n    float\n) as \n    \n    ng_asset_type_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    ns_lead_time\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    offersupport\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    onspecial\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    overhead_type\n    \n , \n    cast(null as \n    float\n) as \n    \n    parent_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    payment_method_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    periodic_lot_size_days\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    periodic_lot_size_type\n    \n , \n    cast(null as \n    float\n) as \n    \n    pref_purchase_tax_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    pref_sale_tax_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    pref_stock_level\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    prices_include_tax\n    \n , \n    cast(null as \n    float\n) as \n    \n    pricing_group_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    print_sub_items\n    \n , \n    cast(null as \n    float\n) as \n    \n    prod_price_var_account_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    prod_qty_var_account_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    prompt_payment_discount_item\n    \n , \n    cast(null as \n    float\n) as \n    \n    purchase_price_var_account_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    purchase_unit_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    purchasedescription\n    \n , \n    cast(null as \n    float\n) as \n    \n    purchaseorderamount\n    \n , \n    cast(null as \n    float\n) as \n    \n    purchaseorderquantity\n    \n , \n    cast(null as \n    float\n) as \n    \n    purchaseorderquantitydiff\n    \n , \n    cast(null as \n    float\n) as \n    \n    quantityavailable\n    \n , \n    cast(null as \n    float\n) as \n    \n    quantitybackordered\n    \n , \n    cast(null as \n    float\n) as \n    \n    quantityonhand\n    \n , \n    cast(null as \n    float\n) as \n    \n    receiptamount\n    \n , \n    cast(null as \n    float\n) as \n    \n    receiptquantity\n    \n , \n    cast(null as \n    float\n) as \n    \n    receiptquantitydiff\n    \n , \n    cast(null as \n    float\n) as \n    \n    reorder_multiple\n    \n , \n    cast(null as \n    float\n) as \n    \n    reorderpoint\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    replenishment_method\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    resalable\n    \n , \n    cast(null as \n    float\n) as \n    \n    reschedule_in_days\n    \n , \n    cast(null as \n    float\n) as \n    \n    reschedule_out_days\n    \n , \n    cast(null as \n    float\n) as \n    \n    rev_rec_forecast_rule_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    rev_rec_rule_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    revenue_allocation_group\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    round_up_as_component\n    \n , \n    cast(null as \n    float\n) as \n    \n    safety_stock_days\n    \n , \n    cast(null as \n    float\n) as \n    \n    safety_stock_level\n    \n , \n    cast(null as \n    float\n) as \n    \n    sale_unit_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    salesdescription\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    salesforce_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    salesprice\n    \n , \n    cast(null as \n    float\n) as \n    \n    scrap_account_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    serialized_item\n    \n , \n    cast(null as \n    float\n) as \n    \n    shippingcost\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    special_work_order_item\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    specialsdescription\n    \n , \n    cast(null as \n    float\n) as \n    \n    stock_unit_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    storedescription\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    storedetaileddescription\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    storedisplayname\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    subtype\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    supplementary_unit__abberviat\n    \n , \n    cast(null as \n    float\n) as \n    \n    supplementary_unit_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    supply_time_fence\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    supply_type\n    \n , \n    cast(null as \n    float\n) as \n    \n    tax_item_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    totalvalue\n    \n , \n    cast(null as \n    float\n) as \n    \n    transferprice\n    \n , \n    \n    \n    type_name\n    \n as \n    \n    type_name\n    \n, \n    cast(null as \n    float\n) as \n    \n    type_of_goods_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    udf1\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    udf2\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    un_number\n    \n , \n    cast(null as \n    float\n) as \n    \n    unbuild_variance_account_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    units_type_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    upc_code\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    use_component_yield\n    \n , \n    cast(null as \n    float\n) as \n    \n    vendor_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    vendorname\n    \n , \n    cast(null as \n    float\n) as \n    \n    vendreturn_variance_account_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    vsoe_deferral\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    vsoe_delivered\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    vsoe_discount\n    \n , \n    cast(null as \n    float\n) as \n    \n    vsoe_price\n    \n , \n    cast(null as \n    float\n) as \n    \n    weight\n    \n , \n    cast(null as \n    float\n) as \n    \n    weight_in_user_defined_unit\n    \n , \n    cast(null as \n    float\n) as \n    \n    weight_unit_index\n    \n , \n    cast(null as \n    float\n) as \n    \n    wip_account_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    wip_cost_variance_account_id\n    \n , \n    cast(null as \n    float\n) as \n    \n    work_order_lead_time\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        item_id,\n        name,\n        type_name,\n        salesdescription as sales_description,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__items\""}, "model.netsuite_source.stg_netsuite__locations": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__locations_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__locations_tmp')),\n                staging_columns=get_locations_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        location_id,\n        name,\n        full_name,\n        city,\n        country,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('locations_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_locations_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__locations_tmp", "model.netsuite_source.stg_netsuite__locations_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__locations"], "unique_id": "model.netsuite_source.stg_netsuite__locations", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__locations.sql", "original_file_path": "models/netsuite/stg_netsuite__locations.sql", "name": "stg_netsuite__locations", "alias": "stg_netsuite__locations", "checksum": {"name": "sha256", "checksum": "0e5129658fedf16df7b26cf25ad2351302ce70723e60b4b4b9d12a1e252c9254"}, "tags": [], "refs": [["stg_netsuite__locations_tmp"], ["stg_netsuite__locations_tmp"]], "sources": [], "description": "Table detailing all locations, including store, warehouse and office locations.", "columns": {"location_id": {"name": "location_id", "description": "The unique identifier of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The location's name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The location's city.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The location's country.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__locations.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.6900811, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__locations_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        location_id,\n        name,\n        full_name,\n        city,\n        country,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your locations_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__locations\""}, "model.netsuite_source.stg_netsuite__departments": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__departments_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__departments_tmp')),\n                staging_columns=get_departments_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        department_id,\n        name,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('departments_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_departments_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.netsuite_source.stg_netsuite__departments_tmp", "model.netsuite_source.stg_netsuite__departments_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__departments"], "unique_id": "model.netsuite_source.stg_netsuite__departments", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__departments.sql", "original_file_path": "models/netsuite/stg_netsuite__departments.sql", "name": "stg_netsuite__departments", "alias": "stg_netsuite__departments", "checksum": {"name": "sha256", "checksum": "48851e18603bddeadb3b3992c83d3c779dada4b760fba2a2da68fe2bc9b431db"}, "tags": [], "refs": [["stg_netsuite__departments_tmp"], ["stg_netsuite__departments_tmp"]], "sources": [], "description": "Table detailing all departments set up in Netsuite.", "columns": {"department_id": {"name": "department_id", "description": "The unique identifier of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The department's full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__departments.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.6863081, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__departments_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        department_id,\n        name,\n        full_name,\n        _fivetran_deleted\n\n        --The below macro adds the fields defined within your departments_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__departments\""}, "model.netsuite_source.stg_netsuite__currencies": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__currencies_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__currencies_tmp')),\n                staging_columns=get_currencies_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        currency_id,\n        name,\n        symbol,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_currencies_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite__currencies_tmp", "model.netsuite_source.stg_netsuite__currencies_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__currencies"], "unique_id": "model.netsuite_source.stg_netsuite__currencies", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__currencies.sql", "original_file_path": "models/netsuite/stg_netsuite__currencies.sql", "name": "stg_netsuite__currencies", "alias": "stg_netsuite__currencies", "checksum": {"name": "sha256", "checksum": "64b53f34b5bf46bcf43e5753e5eb67143e96eaffad215604e424f4769791e793"}, "tags": [], "refs": [["stg_netsuite__currencies_tmp"], ["stg_netsuite__currencies_tmp"]], "sources": [], "description": "Table detailing all currency information.", "columns": {"currency_id": {"name": "currency_id", "description": "The unique identifier of the currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "symbol": {"name": "symbol", "description": "The currency's three letter symbol (ie. USD, EUR, CAD).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__currencies.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.684055, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__currencies_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as \n    timestamp without time zone\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    currency_extid\n    \n , \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_deleted\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_last_modified\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    is_inactive\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as \n    float\n) as \n    \n    precision_0\n    \n , \n    \n    \n    symbol\n    \n as \n    \n    symbol\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        currency_id,\n        name,\n        symbol,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__currencies\""}, "model.netsuite_source.stg_netsuite__vendor_types": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__vendor_types_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__vendor_types_tmp')),\n                staging_columns=get_vendor_types_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_type_id,\n        name,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_vendor_types_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite__vendor_types_tmp", "model.netsuite_source.stg_netsuite__vendor_types_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__vendor_types"], "unique_id": "model.netsuite_source.stg_netsuite__vendor_types", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__vendor_types.sql", "original_file_path": "models/netsuite/stg_netsuite__vendor_types.sql", "name": "stg_netsuite__vendor_types", "alias": "stg_netsuite__vendor_types", "checksum": {"name": "sha256", "checksum": "6d96a09d56ad4edb4011a0ce09eee13c465195ce03bec4902450ab57e9d2f74d"}, "tags": [], "refs": [["stg_netsuite__vendor_types_tmp"], ["stg_netsuite__vendor_types_tmp"]], "sources": [], "description": "A table detailing all the various types of vendors.", "columns": {"vendor_type_id": {"name": "vendor_type_id", "description": "The unique identifier of the vendor type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the vendor type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__vendor_types.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.695331, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__vendor_types_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as \n    timestamp without time zone\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_deleted\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    isinactive\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as \n    float\n) as \n    \n    parent_id\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    vendor_type_extid\n    \n , \n    \n    \n    vendor_type_id\n    \n as \n    \n    vendor_type_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        vendor_type_id,\n        name,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__vendor_types\""}, "model.netsuite_source.stg_netsuite__accounting_periods": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_netsuite__accounting_periods_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_netsuite__accounting_periods_tmp')),\n                staging_columns=get_accounting_periods_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_period_id,\n        name,\n        full_name,\n        fiscal_calendar_id,\n        year_id,\n        starting as starting_at,\n        ending as ending_at,\n        quarter,\n        year_0,\n        is_adjustment,\n        closed as is_closed,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.netsuite_source.get_accounting_periods_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.netsuite_source.stg_netsuite__accounting_periods_tmp", "model.netsuite_source.stg_netsuite__accounting_periods_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "stg_netsuite__accounting_periods"], "unique_id": "model.netsuite_source.stg_netsuite__accounting_periods", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/stg_netsuite__accounting_periods.sql", "original_file_path": "models/netsuite/stg_netsuite__accounting_periods.sql", "name": "stg_netsuite__accounting_periods", "alias": "stg_netsuite__accounting_periods", "checksum": {"name": "sha256", "checksum": "bd47f06946086147dacee032fd6ad9a36577fae371fa05c51336b3bac1c5f9cc"}, "tags": [], "refs": [["stg_netsuite__accounting_periods_tmp"], ["stg_netsuite__accounting_periods_tmp"]], "sources": [], "description": "Table detailing all accounting periods, including monthly, quarterly and yearly.", "columns": {"accounting_period_id": {"name": "accounting_period_id", "description": "The unique identifier of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year_id": {"name": "year_id", "description": "The year id the accounting period is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscal_calendar_id": {"name": "fiscal_calendar_id", "description": "The fiscal calendar id the accounting period is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quarter": {"name": "quarter", "description": "The quarter which the accounting period takes place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "starting_at": {"name": "starting_at", "description": "The timestamp indicating the start of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ending_at": {"name": "ending_at", "description": "The timestamp indicating the end of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year_0": {"name": "year_0", "description": "Value indicating whether the accounting period is in it's initial year.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_adjustment": {"name": "is_adjustment", "description": "Value indicating whether the accounting period is an adjustment (either yes or no).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "Value indicating whether the accounting period is closed (either yes or no).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "netsuite_source://models/stg_netsuite.yml", "compiled_path": "target/compiled/netsuite_source/models/netsuite/stg_netsuite__accounting_periods.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.6789818, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounting_periods_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_salesforce_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_salesforce_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    _fivetran_id\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    \n    \n    closed\n    \n as \n    \n    closed\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    closed_accounts_payable\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    closed_accounts_receivable\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    closed_all\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    closed_on\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    closed_payroll\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_deleted\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    date_last_modified\n    \n , \n    \n    \n    ending\n    \n as \n    \n    ending\n    \n, \n    \n    \n    fiscal_calendar_id\n    \n as \n    \n    fiscal_calendar_id\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    fivetran_index\n    \n , \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    is_adjustment\n    \n as \n    \n    is_adjustment\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    isinactive\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    locked_accounts_payable\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    locked_accounts_receivable\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    locked_all\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    locked_payroll\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as \n    float\n) as \n    \n    parent_id\n    \n , \n    \n    \n    quarter\n    \n as \n    \n    quarter\n    \n, \n    \n    \n    starting\n    \n as \n    \n    starting\n    \n, \n    \n    \n    year_0\n    \n as \n    \n    year_0\n    \n, \n    \n    \n    year_id\n    \n as \n    \n    year_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        accounting_period_id,\n        name,\n        full_name,\n        fiscal_calendar_id,\n        year_id,\n        starting as starting_at,\n        ending as ending_at,\n        quarter,\n        year_0,\n        is_adjustment,\n        closed as is_closed,\n        _fivetran_deleted\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounting_periods\""}, "model.netsuite_source.stg_netsuite__accounting_periods_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_accounting_periods') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.accounting_periods"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__accounting_periods_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__accounting_periods_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__accounting_periods_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__accounting_periods_tmp.sql", "name": "stg_netsuite__accounting_periods_tmp", "alias": "stg_netsuite__accounting_periods_tmp", "checksum": {"name": "sha256", "checksum": "af85ada4c304fe9e0c3fdaf8dca681113d692711ab665fa20a48bf20a3f53513"}, "tags": [], "refs": [], "sources": [["netsuite", "accounting_periods"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__accounting_periods_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.5810921, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_accounting_periods_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounting_periods_tmp\""}, "model.netsuite_source.stg_netsuite__accounting_books_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_accounting_books') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.accounting_books"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__accounting_books_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__accounting_books_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__accounting_books_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__accounting_books_tmp.sql", "name": "stg_netsuite__accounting_books_tmp", "alias": "stg_netsuite__accounting_books_tmp", "checksum": {"name": "sha256", "checksum": "2a71eefcec7c5db5922ea1217879f5e7856b348418cd1698c81dd7ca78e95fbe"}, "tags": [], "refs": [], "sources": [["netsuite", "accounting_books"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__accounting_books_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.5844219, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_accounting_books_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounting_books_tmp\""}, "model.netsuite_source.stg_netsuite__customers_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_customers') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.customers"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__customers_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__customers_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__customers_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__customers_tmp.sql", "name": "stg_netsuite__customers_tmp", "alias": "stg_netsuite__customers_tmp", "checksum": {"name": "sha256", "checksum": "dd42aefc427f9f532fc0d79d50a1db8f9e6ea5f7038c43e2d8ea08ca6986fd2b"}, "tags": [], "refs": [], "sources": [["netsuite", "customers"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__customers_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.587908, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_customers_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__customers_tmp\""}, "model.netsuite_source.stg_netsuite__transaction_lines_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_transaction_lines') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.transaction_lines"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__transaction_lines_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__transaction_lines_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__transaction_lines_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__transaction_lines_tmp.sql", "name": "stg_netsuite__transaction_lines_tmp", "alias": "stg_netsuite__transaction_lines_tmp", "checksum": {"name": "sha256", "checksum": "1e8e8e85dcbf177ac5a8539ed3ca4ab87c6b66bd8e98f8fac81bf8c92ecc4178"}, "tags": [], "refs": [], "sources": [["netsuite", "transaction_lines"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__transaction_lines_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.590789, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_transaction_lines_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__transaction_lines_tmp\""}, "model.netsuite_source.stg_netsuite__income_accounts_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_income_accounts') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.income_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__income_accounts_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__income_accounts_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__income_accounts_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__income_accounts_tmp.sql", "name": "stg_netsuite__income_accounts_tmp", "alias": "stg_netsuite__income_accounts_tmp", "checksum": {"name": "sha256", "checksum": "db2a368685ddd59347ffb164ea9204f378d33a39a4eebbffe35a22d59d387925"}, "tags": [], "refs": [], "sources": [["netsuite", "income_accounts"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__income_accounts_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.59391, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_income_accounts_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__income_accounts_tmp\""}, "model.netsuite_source.stg_netsuite__accounts_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_accounts') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__accounts_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__accounts_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__accounts_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__accounts_tmp.sql", "name": "stg_netsuite__accounts_tmp", "alias": "stg_netsuite__accounts_tmp", "checksum": {"name": "sha256", "checksum": "bb440ea013b9eb4fd2654be4f267bf3c08b4a4fbdb88e666c2721e79157bf54c"}, "tags": [], "refs": [], "sources": [["netsuite", "accounts"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__accounts_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.596931, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_accounts_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounts_tmp\""}, "model.netsuite_source.stg_netsuite__departments_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_departments') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.departments"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__departments_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__departments_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__departments_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__departments_tmp.sql", "name": "stg_netsuite__departments_tmp", "alias": "stg_netsuite__departments_tmp", "checksum": {"name": "sha256", "checksum": "4d20b8f9c501e6642f4ed19fe0d6003244f3132bb8f127e6cd04749a2161a1d5"}, "tags": [], "refs": [], "sources": [["netsuite", "departments"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__departments_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.599862, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_departments_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__departments_tmp\""}, "model.netsuite_source.stg_netsuite__currencies_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_currencies') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.currencies"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__currencies_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__currencies_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__currencies_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__currencies_tmp.sql", "name": "stg_netsuite__currencies_tmp", "alias": "stg_netsuite__currencies_tmp", "checksum": {"name": "sha256", "checksum": "299203cc57a2fe306df440758d025485e593599f6390c02ce418cc17f6cbf085"}, "tags": [], "refs": [], "sources": [["netsuite", "currencies"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__currencies_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.602859, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_currencies_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__currencies_tmp\""}, "model.netsuite_source.stg_netsuite__vendor_types_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_vendor_types') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.vendor_types"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__vendor_types_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__vendor_types_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__vendor_types_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__vendor_types_tmp.sql", "name": "stg_netsuite__vendor_types_tmp", "alias": "stg_netsuite__vendor_types_tmp", "checksum": {"name": "sha256", "checksum": "9418a3d15515e6876d45e9647eef973ee64e92a8ebd36de9ef48b4213362fbb8"}, "tags": [], "refs": [], "sources": [["netsuite", "vendor_types"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__vendor_types_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.6066182, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_vendor_types_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__vendor_types_tmp\""}, "model.netsuite_source.stg_netsuite__vendors_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_vendors') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.vendors"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__vendors_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__vendors_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__vendors_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__vendors_tmp.sql", "name": "stg_netsuite__vendors_tmp", "alias": "stg_netsuite__vendors_tmp", "checksum": {"name": "sha256", "checksum": "8e59bcb209c1fbcc2e4d3d45fbfa58520b4664fc1ca095cdc257b866d56bf48f"}, "tags": [], "refs": [], "sources": [["netsuite", "vendors"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__vendors_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.609754, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_vendors_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__vendors_tmp\""}, "model.netsuite_source.stg_netsuite__locations_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_locations') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.locations"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__locations_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__locations_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__locations_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__locations_tmp.sql", "name": "stg_netsuite__locations_tmp", "alias": "stg_netsuite__locations_tmp", "checksum": {"name": "sha256", "checksum": "ef49c17ad5f2ebc7ef36e8327bf47863dd5e5cae56eb79239babc1db36a64083"}, "tags": [], "refs": [], "sources": [["netsuite", "locations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__locations_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.612971, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_locations_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__locations_tmp\""}, "model.netsuite_source.stg_netsuite__items_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_items') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.items"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__items_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__items_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__items_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__items_tmp.sql", "name": "stg_netsuite__items_tmp", "alias": "stg_netsuite__items_tmp", "checksum": {"name": "sha256", "checksum": "439132075eae5e14389f7542772d7ca936ea1489e7cdac59de46e8cb7173eb0a"}, "tags": [], "refs": [], "sources": [["netsuite", "items"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__items_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.6162088, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_items_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__items_tmp\""}, "model.netsuite_source.stg_netsuite__subsidiaries_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_subsidiaries') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.subsidiaries"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__subsidiaries_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__subsidiaries_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__subsidiaries_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__subsidiaries_tmp.sql", "name": "stg_netsuite__subsidiaries_tmp", "alias": "stg_netsuite__subsidiaries_tmp", "checksum": {"name": "sha256", "checksum": "a6ac0f509e1ac21ecc3f89a4d5c0eed5c703a57e8fc4af43e01bdcf75ea2e679"}, "tags": [], "refs": [], "sources": [["netsuite", "subsidiaries"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__subsidiaries_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.619785, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_subsidiaries_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__subsidiaries_tmp\""}, "model.netsuite_source.stg_netsuite__transactions_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_transactions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.transactions"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__transactions_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__transactions_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__transactions_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__transactions_tmp.sql", "name": "stg_netsuite__transactions_tmp", "alias": "stg_netsuite__transactions_tmp", "checksum": {"name": "sha256", "checksum": "3784b104dd5b534cf77958a0db3b7a596311f53fe6cbc065385ded88577cfdd0"}, "tags": [], "refs": [], "sources": [["netsuite", "transactions"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__transactions_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.623159, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_transactions_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__transactions_tmp\""}, "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_consolidated_exchange_rates') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.consolidated_exchange_rates"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__consolidated_exchange_rates_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__consolidated_exchange_rates_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__consolidated_exchange_rates_tmp.sql", "name": "stg_netsuite__consolidated_exchange_rates_tmp", "alias": "stg_netsuite__consolidated_exchange_rates_tmp", "checksum": {"name": "sha256", "checksum": "adef1eae799060e22040088aae3f36771a563821178b7986be7863221df9283e"}, "tags": [], "refs": [], "sources": [["netsuite", "consolidated_exchange_rates"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__consolidated_exchange_rates_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.627351, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_consolidated_exchange_rates_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__consolidated_exchange_rates_tmp\""}, "model.netsuite_source.stg_netsuite__classes_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_classes') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.classes"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__classes_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__classes_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__classes_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__classes_tmp.sql", "name": "stg_netsuite__classes_tmp", "alias": "stg_netsuite__classes_tmp", "checksum": {"name": "sha256", "checksum": "d0e5d095963df0342aa32dab6b3385cee09e2ee9a404972e692675a5e82c9fb0"}, "tags": [], "refs": [], "sources": [["netsuite", "classes"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__classes_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.630728, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_classes_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__classes_tmp\""}, "model.netsuite_source.stg_netsuite__expense_accounts_tmp": {"raw_sql": "{{ config(enabled=var('netsuite_data_model', 'netsuite') == 'netsuite') }}\n\nselect * \nfrom {{ var('netsuite_expense_accounts') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.netsuite_source.netsuite.expense_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "netsuite_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "netsuite_source_integration_tests_netsuite_source", "fqn": ["netsuite_source", "netsuite", "tmp", "stg_netsuite__expense_accounts_tmp"], "unique_id": "model.netsuite_source.stg_netsuite__expense_accounts_tmp", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "netsuite/tmp/stg_netsuite__expense_accounts_tmp.sql", "original_file_path": "models/netsuite/tmp/stg_netsuite__expense_accounts_tmp.sql", "name": "stg_netsuite__expense_accounts_tmp", "alias": "stg_netsuite__expense_accounts_tmp", "checksum": {"name": "sha256", "checksum": "a47ced403e84ab6ca539aa177139c53e021b0c56d15dd9dfc83dcb0ebe7cd797"}, "tags": [], "refs": [], "sources": [["netsuite", "expense_accounts"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/netsuite/tmp/stg_netsuite__expense_accounts_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "netsuite_source", "enabled": true}, "created_at": 1658868251.6342232, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"netsuite_source_integration_tests\".\"netsuite_expense_accounts_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__expense_accounts_tmp\""}, "test.netsuite_source.unique_stg_netsuite__accounting_books_accounting_book_id.22e0106417": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "accounting_book_id", "model": "{{ get_where_subquery(ref('stg_netsuite__accounting_books')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__accounting_books"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite__accounting_books_accounting_book_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite__accounting_books_accounting_book_id.22e0106417", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite__accounting_books_accounting_book_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "unique_stg_netsuite__accounting_books_accounting_book_id", "alias": "unique_stg_netsuite__accounting_books_accounting_book_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__accounting_books"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__accounting_books_accounting_book_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.700342, "compiled_sql": "\n    \n    \n\nselect\n    accounting_book_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounting_books\"\nwhere accounting_book_id is not null\ngroup by accounting_book_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "accounting_book_id", "file_key_name": "models.stg_netsuite__accounting_books"}, "test.netsuite_source.not_null_stg_netsuite__accounting_books_accounting_book_id.12972ee6fc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "accounting_book_id", "model": "{{ get_where_subquery(ref('stg_netsuite__accounting_books')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__accounting_books"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__accounting_books_accounting_book_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_books_accounting_book_id.12972ee6fc", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__accounting_books_accounting_book_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__accounting_books_accounting_book_id", "alias": "not_null_stg_netsuite__accounting_books_accounting_book_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__accounting_books"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__accounting_books_accounting_book_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.701587, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounting_books\"\nwhere accounting_book_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "accounting_book_id", "file_key_name": "models.stg_netsuite__accounting_books"}, "test.netsuite_source.not_null_stg_netsuite__accounting_periods_accounting_period_id.5c1c46821c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "accounting_period_id", "model": "{{ get_where_subquery(ref('stg_netsuite__accounting_periods')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__accounting_periods"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__accounting_periods_accounting_period_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_periods_accounting_period_id.5c1c46821c", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__accounting_periods_accounting_period_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__accounting_periods_accounting_period_id", "alias": "not_null_stg_netsuite__accounting_periods_accounting_period_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__accounting_periods"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__accounting_periods_accounting_period_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.7026381, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounting_periods\"\nwhere accounting_period_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "accounting_period_id", "file_key_name": "models.stg_netsuite__accounting_periods"}, "test.netsuite_source.not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.8d75190563": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fiscal_calendar_id", "model": "{{ get_where_subquery(ref('stg_netsuite__accounting_periods')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__accounting_periods"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__accounting_periods_fiscal_calendar_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.8d75190563", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__accounting_periods_fiscal_calendar_id", "alias": "not_null_stg_netsuite__accounting_periods_fiscal_calendar_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__accounting_periods"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.703753, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounting_periods\"\nwhere fiscal_calendar_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "fiscal_calendar_id", "file_key_name": "models.stg_netsuite__accounting_periods"}, "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id.43005ecb69": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1ce8525af2d081fefdb862c9ad63042d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["accounting_period_id", "fiscal_calendar_id"], "model": "{{ get_where_subquery(ref('stg_netsuite__accounting_periods')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__accounting_periods"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1ce8525af2d081fefdb862c9ad63042d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id"], "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id.43005ecb69", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "dbt_utils_unique_combination_o_1ce8525af2d081fefdb862c9ad63042d.sql", "original_file_path": "models/stg_netsuite.yml", "name": "dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id", "alias": "dbt_utils_unique_combination_o_1ce8525af2d081fefdb862c9ad63042d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__accounting_periods"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/dbt_utils_unique_combination_o_1ce8525af2d081fefdb862c9ad63042d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1ce8525af2d081fefdb862c9ad63042d"}, "created_at": 1658868251.7047381, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        accounting_period_id, fiscal_calendar_id\n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounting_periods\"\n    group by accounting_period_id, fiscal_calendar_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_netsuite__accounting_periods"}, "test.netsuite_source.unique_stg_netsuite__accounts_account_id.e94563d281": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_netsuite__accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite__accounts_account_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite__accounts_account_id.e94563d281", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite__accounts_account_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "unique_stg_netsuite__accounts_account_id", "alias": "unique_stg_netsuite__accounts_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__accounts_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.712117, "compiled_sql": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounts\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_netsuite__accounts"}, "test.netsuite_source.not_null_stg_netsuite__accounts_account_id.f03cddbace": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_netsuite__accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__accounts_account_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__accounts_account_id.f03cddbace", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__accounts_account_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__accounts_account_id", "alias": "not_null_stg_netsuite__accounts_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__accounts_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.713347, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__accounts\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_netsuite__accounts"}, "test.netsuite_source.unique_stg_netsuite__classes_class_id.c63c54840b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "class_id", "model": "{{ get_where_subquery(ref('stg_netsuite__classes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__classes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite__classes_class_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite__classes_class_id.c63c54840b", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite__classes_class_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "unique_stg_netsuite__classes_class_id", "alias": "unique_stg_netsuite__classes_class_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__classes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__classes_class_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.714397, "compiled_sql": "\n    \n    \n\nselect\n    class_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__classes\"\nwhere class_id is not null\ngroup by class_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "class_id", "file_key_name": "models.stg_netsuite__classes"}, "test.netsuite_source.not_null_stg_netsuite__classes_class_id.462bfda765": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "class_id", "model": "{{ get_where_subquery(ref('stg_netsuite__classes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__classes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__classes_class_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__classes_class_id.462bfda765", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__classes_class_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__classes_class_id", "alias": "not_null_stg_netsuite__classes_class_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__classes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__classes_class_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.7154229, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__classes\"\nwhere class_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "class_id", "file_key_name": "models.stg_netsuite__classes"}, "test.netsuite_source.unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.2ca94ecb54": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_netsuite__consolida_2fe3f87bba0a20283ee2045219b523ee\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "consolidated_exchange_rate_id", "model": "{{ get_where_subquery(ref('stg_netsuite__consolidated_exchange_rates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates"]}, "config": {"enabled": true, "alias": "unique_stg_netsuite__consolida_2fe3f87bba0a20283ee2045219b523ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.2ca94ecb54", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite__consolida_2fe3f87bba0a20283ee2045219b523ee.sql", "original_file_path": "models/stg_netsuite.yml", "name": "unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id", "alias": "unique_stg_netsuite__consolida_2fe3f87bba0a20283ee2045219b523ee", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__consolidated_exchange_rates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__consolida_2fe3f87bba0a20283ee2045219b523ee.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_netsuite__consolida_2fe3f87bba0a20283ee2045219b523ee"}, "created_at": 1658868251.716405, "compiled_sql": "\n    \n    \n\nselect\n    consolidated_exchange_rate_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is not null\ngroup by consolidated_exchange_rate_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "consolidated_exchange_rate_id", "file_key_name": "models.stg_netsuite__consolidated_exchange_rates"}, "test.netsuite_source.not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.83de8c8e97": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_netsuite__consoli_701f72321e6216b9c59fbdd954f93e86\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "consolidated_exchange_rate_id", "model": "{{ get_where_subquery(ref('stg_netsuite__consolidated_exchange_rates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates"]}, "config": {"enabled": true, "alias": "not_null_stg_netsuite__consoli_701f72321e6216b9c59fbdd954f93e86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.83de8c8e97", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__consoli_701f72321e6216b9c59fbdd954f93e86.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id", "alias": "not_null_stg_netsuite__consoli_701f72321e6216b9c59fbdd954f93e86", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__consolidated_exchange_rates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__consoli_701f72321e6216b9c59fbdd954f93e86.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_netsuite__consoli_701f72321e6216b9c59fbdd954f93e86"}, "created_at": 1658868251.717618, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "consolidated_exchange_rate_id", "file_key_name": "models.stg_netsuite__consolidated_exchange_rates"}, "test.netsuite_source.unique_stg_netsuite__currencies_currency_id.09ab867f2c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "currency_id", "model": "{{ get_where_subquery(ref('stg_netsuite__currencies')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__currencies"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite__currencies_currency_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite__currencies_currency_id.09ab867f2c", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite__currencies_currency_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "unique_stg_netsuite__currencies_currency_id", "alias": "unique_stg_netsuite__currencies_currency_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__currencies"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__currencies_currency_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.718658, "compiled_sql": "\n    \n    \n\nselect\n    currency_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__currencies\"\nwhere currency_id is not null\ngroup by currency_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "currency_id", "file_key_name": "models.stg_netsuite__currencies"}, "test.netsuite_source.not_null_stg_netsuite__currencies_currency_id.e8b331ffb3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_id", "model": "{{ get_where_subquery(ref('stg_netsuite__currencies')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__currencies"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__currencies_currency_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__currencies_currency_id.e8b331ffb3", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__currencies_currency_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__currencies_currency_id", "alias": "not_null_stg_netsuite__currencies_currency_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__currencies"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__currencies_currency_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.719624, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__currencies\"\nwhere currency_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "currency_id", "file_key_name": "models.stg_netsuite__currencies"}, "test.netsuite_source.unique_stg_netsuite__customers_customer_id.7c9debe8d9": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_netsuite__customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite__customers_customer_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite__customers_customer_id.7c9debe8d9", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite__customers_customer_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "unique_stg_netsuite__customers_customer_id", "alias": "unique_stg_netsuite__customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__customers_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.7207098, "compiled_sql": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.stg_netsuite__customers"}, "test.netsuite_source.not_null_stg_netsuite__customers_customer_id.bbb9eed2dc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_netsuite__customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__customers_customer_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__customers_customer_id.bbb9eed2dc", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__customers_customer_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__customers_customer_id", "alias": "not_null_stg_netsuite__customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__customers_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.721677, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__customers\"\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.stg_netsuite__customers"}, "test.netsuite_source.unique_stg_netsuite__departments_department_id.2df16a9aa1": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "department_id", "model": "{{ get_where_subquery(ref('stg_netsuite__departments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__departments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite__departments_department_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite__departments_department_id.2df16a9aa1", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite__departments_department_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "unique_stg_netsuite__departments_department_id", "alias": "unique_stg_netsuite__departments_department_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__departments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__departments_department_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.722635, "compiled_sql": "\n    \n    \n\nselect\n    department_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__departments\"\nwhere department_id is not null\ngroup by department_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "department_id", "file_key_name": "models.stg_netsuite__departments"}, "test.netsuite_source.not_null_stg_netsuite__departments_department_id.6d96b00002": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "department_id", "model": "{{ get_where_subquery(ref('stg_netsuite__departments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__departments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__departments_department_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__departments_department_id.6d96b00002", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__departments_department_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__departments_department_id", "alias": "not_null_stg_netsuite__departments_department_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__departments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__departments_department_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.723576, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__departments\"\nwhere department_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "department_id", "file_key_name": "models.stg_netsuite__departments"}, "test.netsuite_source.unique_stg_netsuite__expense_accounts_expense_account_id.5e813830ff": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "expense_account_id", "model": "{{ get_where_subquery(ref('stg_netsuite__expense_accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__expense_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite__expense_accounts_expense_account_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite__expense_accounts_expense_account_id.5e813830ff", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite__expense_accounts_expense_account_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "unique_stg_netsuite__expense_accounts_expense_account_id", "alias": "unique_stg_netsuite__expense_accounts_expense_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__expense_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__expense_accounts_expense_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.724925, "compiled_sql": "\n    \n    \n\nselect\n    expense_account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__expense_accounts\"\nwhere expense_account_id is not null\ngroup by expense_account_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "expense_account_id", "file_key_name": "models.stg_netsuite__expense_accounts"}, "test.netsuite_source.not_null_stg_netsuite__expense_accounts_expense_account_id.4de138ed23": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "expense_account_id", "model": "{{ get_where_subquery(ref('stg_netsuite__expense_accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__expense_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__expense_accounts_expense_account_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__expense_accounts_expense_account_id.4de138ed23", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__expense_accounts_expense_account_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__expense_accounts_expense_account_id", "alias": "not_null_stg_netsuite__expense_accounts_expense_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__expense_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__expense_accounts_expense_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.7258759, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__expense_accounts\"\nwhere expense_account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "expense_account_id", "file_key_name": "models.stg_netsuite__expense_accounts"}, "test.netsuite_source.unique_stg_netsuite__income_accounts_income_account_id.28b4166a07": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "income_account_id", "model": "{{ get_where_subquery(ref('stg_netsuite__income_accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__income_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite__income_accounts_income_account_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite__income_accounts_income_account_id.28b4166a07", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite__income_accounts_income_account_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "unique_stg_netsuite__income_accounts_income_account_id", "alias": "unique_stg_netsuite__income_accounts_income_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__income_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__income_accounts_income_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.726826, "compiled_sql": "\n    \n    \n\nselect\n    income_account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__income_accounts\"\nwhere income_account_id is not null\ngroup by income_account_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "income_account_id", "file_key_name": "models.stg_netsuite__income_accounts"}, "test.netsuite_source.not_null_stg_netsuite__income_accounts_income_account_id.a38311d5f9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "income_account_id", "model": "{{ get_where_subquery(ref('stg_netsuite__income_accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__income_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__income_accounts_income_account_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__income_accounts_income_account_id.a38311d5f9", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__income_accounts_income_account_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__income_accounts_income_account_id", "alias": "not_null_stg_netsuite__income_accounts_income_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__income_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__income_accounts_income_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.727914, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__income_accounts\"\nwhere income_account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "income_account_id", "file_key_name": "models.stg_netsuite__income_accounts"}, "test.netsuite_source.unique_stg_netsuite__items_item_id.760a674654": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('stg_netsuite__items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite__items_item_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite__items_item_id.760a674654", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite__items_item_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "unique_stg_netsuite__items_item_id", "alias": "unique_stg_netsuite__items_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__items_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.728857, "compiled_sql": "\n    \n    \n\nselect\n    item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__items\"\nwhere item_id is not null\ngroup by item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_id", "file_key_name": "models.stg_netsuite__items"}, "test.netsuite_source.not_null_stg_netsuite__items_item_id.ba322d7da3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('stg_netsuite__items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__items_item_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__items_item_id.ba322d7da3", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__items_item_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__items_item_id", "alias": "not_null_stg_netsuite__items_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__items_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.729795, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__items\"\nwhere item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_id", "file_key_name": "models.stg_netsuite__items"}, "test.netsuite_source.unique_stg_netsuite__locations_location_id.3857e2cac2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "location_id", "model": "{{ get_where_subquery(ref('stg_netsuite__locations')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__locations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite__locations_location_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite__locations_location_id.3857e2cac2", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite__locations_location_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "unique_stg_netsuite__locations_location_id", "alias": "unique_stg_netsuite__locations_location_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__locations"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__locations_location_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.730736, "compiled_sql": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__locations\"\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "location_id", "file_key_name": "models.stg_netsuite__locations"}, "test.netsuite_source.not_null_stg_netsuite__locations_location_id.9f68ecaa6b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "location_id", "model": "{{ get_where_subquery(ref('stg_netsuite__locations')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__locations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__locations_location_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__locations_location_id.9f68ecaa6b", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__locations_location_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__locations_location_id", "alias": "not_null_stg_netsuite__locations_location_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__locations"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__locations_location_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.731821, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__locations\"\nwhere location_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "location_id", "file_key_name": "models.stg_netsuite__locations"}, "test.netsuite_source.unique_stg_netsuite__subsidiaries_subsidiary_id.7d0dfe64f0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "subsidiary_id", "model": "{{ get_where_subquery(ref('stg_netsuite__subsidiaries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__subsidiaries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite__subsidiaries_subsidiary_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite__subsidiaries_subsidiary_id.7d0dfe64f0", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite__subsidiaries_subsidiary_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "unique_stg_netsuite__subsidiaries_subsidiary_id", "alias": "unique_stg_netsuite__subsidiaries_subsidiary_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__subsidiaries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__subsidiaries_subsidiary_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.7327628, "compiled_sql": "\n    \n    \n\nselect\n    subsidiary_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__subsidiaries\"\nwhere subsidiary_id is not null\ngroup by subsidiary_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subsidiary_id", "file_key_name": "models.stg_netsuite__subsidiaries"}, "test.netsuite_source.not_null_stg_netsuite__subsidiaries_subsidiary_id.9aa9c2d015": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subsidiary_id", "model": "{{ get_where_subquery(ref('stg_netsuite__subsidiaries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__subsidiaries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__subsidiaries_subsidiary_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__subsidiaries_subsidiary_id.9aa9c2d015", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__subsidiaries_subsidiary_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__subsidiaries_subsidiary_id", "alias": "not_null_stg_netsuite__subsidiaries_subsidiary_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__subsidiaries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__subsidiaries_subsidiary_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.7337, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__subsidiaries\"\nwhere subsidiary_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subsidiary_id", "file_key_name": "models.stg_netsuite__subsidiaries"}, "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_id.e8055d67bc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_netsuite__transaction_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__transaction_lines"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__transaction_lines_transaction_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_id.e8055d67bc", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__transaction_lines_transaction_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__transaction_lines_transaction_id", "alias": "not_null_stg_netsuite__transaction_lines_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__transaction_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__transaction_lines_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.7347782, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__transaction_lines\"\nwhere transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_id", "file_key_name": "models.stg_netsuite__transaction_lines"}, "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_line_id.420bd8637c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_line_id", "model": "{{ get_where_subquery(ref('stg_netsuite__transaction_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__transaction_lines"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__transaction_lines_transaction_line_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_line_id.420bd8637c", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__transaction_lines_transaction_line_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__transaction_lines_transaction_line_id", "alias": "not_null_stg_netsuite__transaction_lines_transaction_line_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__transaction_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__transaction_lines_transaction_line_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.735717, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__transaction_lines\"\nwhere transaction_line_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_line_id", "file_key_name": "models.stg_netsuite__transaction_lines"}, "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id.651bc3120d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e15a8751941b43ff25fc24538e6a10ad\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transaction_id", "transaction_line_id"], "model": "{{ get_where_subquery(ref('stg_netsuite__transaction_lines')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__transaction_lines"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e15a8751941b43ff25fc24538e6a10ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id"], "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id.651bc3120d", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "dbt_utils_unique_combination_o_e15a8751941b43ff25fc24538e6a10ad.sql", "original_file_path": "models/stg_netsuite.yml", "name": "dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id", "alias": "dbt_utils_unique_combination_o_e15a8751941b43ff25fc24538e6a10ad", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__transaction_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/dbt_utils_unique_combination_o_e15a8751941b43ff25fc24538e6a10ad.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e15a8751941b43ff25fc24538e6a10ad"}, "created_at": 1658868251.7366679, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id\n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__transaction_lines\"\n    group by transaction_id, transaction_line_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_netsuite__transaction_lines"}, "test.netsuite_source.unique_stg_netsuite__transactions_transaction_id.fd6bd3af79": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_netsuite__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite__transactions_transaction_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite__transactions_transaction_id.fd6bd3af79", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite__transactions_transaction_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "unique_stg_netsuite__transactions_transaction_id", "alias": "unique_stg_netsuite__transactions_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__transactions_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.739706, "compiled_sql": "\n    \n    \n\nselect\n    transaction_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__transactions\"\nwhere transaction_id is not null\ngroup by transaction_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_id", "file_key_name": "models.stg_netsuite__transactions"}, "test.netsuite_source.not_null_stg_netsuite__transactions_transaction_id.9439fe1532": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_netsuite__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__transactions_transaction_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__transactions_transaction_id.9439fe1532", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__transactions_transaction_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__transactions_transaction_id", "alias": "not_null_stg_netsuite__transactions_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__transactions_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.740679, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__transactions\"\nwhere transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_id", "file_key_name": "models.stg_netsuite__transactions"}, "test.netsuite_source.unique_stg_netsuite__vendor_types_vendor_type_id.6ba4f59b69": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "vendor_type_id", "model": "{{ get_where_subquery(ref('stg_netsuite__vendor_types')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__vendor_types"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite__vendor_types_vendor_type_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite__vendor_types_vendor_type_id.6ba4f59b69", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite__vendor_types_vendor_type_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "unique_stg_netsuite__vendor_types_vendor_type_id", "alias": "unique_stg_netsuite__vendor_types_vendor_type_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__vendor_types"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__vendor_types_vendor_type_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.7418098, "compiled_sql": "\n    \n    \n\nselect\n    vendor_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__vendor_types\"\nwhere vendor_type_id is not null\ngroup by vendor_type_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "vendor_type_id", "file_key_name": "models.stg_netsuite__vendor_types"}, "test.netsuite_source.not_null_stg_netsuite__vendor_types_vendor_type_id.faed6fe0e9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_type_id", "model": "{{ get_where_subquery(ref('stg_netsuite__vendor_types')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__vendor_types"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__vendor_types_vendor_type_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__vendor_types_vendor_type_id.faed6fe0e9", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__vendor_types_vendor_type_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__vendor_types_vendor_type_id", "alias": "not_null_stg_netsuite__vendor_types_vendor_type_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__vendor_types"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__vendor_types_vendor_type_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.742798, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__vendor_types\"\nwhere vendor_type_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "vendor_type_id", "file_key_name": "models.stg_netsuite__vendor_types"}, "test.netsuite_source.unique_stg_netsuite__vendors_vendor_id.a981580d39": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('stg_netsuite__vendors')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__vendors"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite__vendors_vendor_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite__vendors_vendor_id.a981580d39", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite__vendors_vendor_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "unique_stg_netsuite__vendors_vendor_id", "alias": "unique_stg_netsuite__vendors_vendor_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__vendors"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/unique_stg_netsuite__vendors_vendor_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.743774, "compiled_sql": "\n    \n    \n\nselect\n    vendor_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__vendors\"\nwhere vendor_id is not null\ngroup by vendor_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "vendor_id", "file_key_name": "models.stg_netsuite__vendors"}, "test.netsuite_source.not_null_stg_netsuite__vendors_vendor_id.15978cc531": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('stg_netsuite__vendors')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite__vendors"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite__vendors_vendor_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite__vendors_vendor_id.15978cc531", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite__vendors_vendor_id.sql", "original_file_path": "models/stg_netsuite.yml", "name": "not_null_stg_netsuite__vendors_vendor_id", "alias": "not_null_stg_netsuite__vendors_vendor_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite__vendors"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite.yml/not_null_stg_netsuite__vendors_vendor_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.744886, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite__vendors\"\nwhere vendor_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "vendor_id", "file_key_name": "models.stg_netsuite__vendors"}, "test.netsuite_source.unique_stg_netsuite2__account_types_account_type_id.aaea9bec0f": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "account_type_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__account_types')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__account_types"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__account_types_account_type_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__account_types_account_type_id.aaea9bec0f", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__account_types_account_type_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__account_types_account_type_id", "alias": "unique_stg_netsuite2__account_types_account_type_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__account_types"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__account_types_account_type_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.784134, "compiled_sql": "\n    \n    \n\nselect\n    account_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__account_types\"\nwhere account_type_id is not null\ngroup by account_type_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_type_id", "file_key_name": "models.stg_netsuite2__account_types"}, "test.netsuite_source.not_null_stg_netsuite2__account_types_account_type_id.20889967ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_type_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__account_types')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__account_types"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__account_types_account_type_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__account_types_account_type_id.20889967ef", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__account_types_account_type_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__account_types_account_type_id", "alias": "not_null_stg_netsuite2__account_types_account_type_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__account_types"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__account_types_account_type_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.785248, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__account_types\"\nwhere account_type_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_type_id", "file_key_name": "models.stg_netsuite2__account_types"}, "test.netsuite_source.unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.27ddb08396": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_fivetran_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_book_subsidiaries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.27ddb08396", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id", "alias": "unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__accounting_book_subsidiaries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.786299, "compiled_sql": "\n    \n    \n\nselect\n    _fivetran_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_book_subsidiaries\"\nwhere _fivetran_id is not null\ngroup by _fivetran_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_fivetran_id", "file_key_name": "models.stg_netsuite2__accounting_book_subsidiaries"}, "test.netsuite_source.not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.76e6e71411": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_netsuite2__accoun_d0fe84ff5fd09d9dcff0854dc4901127\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_book_subsidiaries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries"]}, "config": {"enabled": true, "alias": "not_null_stg_netsuite2__accoun_d0fe84ff5fd09d9dcff0854dc4901127", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.76e6e71411", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__accoun_d0fe84ff5fd09d9dcff0854dc4901127.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id", "alias": "not_null_stg_netsuite2__accoun_d0fe84ff5fd09d9dcff0854dc4901127", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__accounting_book_subsidiaries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__accoun_d0fe84ff5fd09d9dcff0854dc4901127.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_netsuite2__accoun_d0fe84ff5fd09d9dcff0854dc4901127"}, "created_at": 1658868251.787232, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_book_subsidiaries\"\nwhere _fivetran_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_fivetran_id", "file_key_name": "models.stg_netsuite2__accounting_book_subsidiaries"}, "test.netsuite_source.unique_stg_netsuite2__accounting_books_accounting_book_id.70d96d1230": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "accounting_book_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_books')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_books"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__accounting_books_accounting_book_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_books_accounting_book_id.70d96d1230", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__accounting_books_accounting_book_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__accounting_books_accounting_book_id", "alias": "unique_stg_netsuite2__accounting_books_accounting_book_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__accounting_books"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__accounting_books_accounting_book_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.78824, "compiled_sql": "\n    \n    \n\nselect\n    accounting_book_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_books\"\nwhere accounting_book_id is not null\ngroup by accounting_book_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "accounting_book_id", "file_key_name": "models.stg_netsuite2__accounting_books"}, "test.netsuite_source.not_null_stg_netsuite2__accounting_books_accounting_book_id.1b7504d30e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "accounting_book_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_books')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_books"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__accounting_books_accounting_book_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_books_accounting_book_id.1b7504d30e", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__accounting_books_accounting_book_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__accounting_books_accounting_book_id", "alias": "not_null_stg_netsuite2__accounting_books_accounting_book_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__accounting_books"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__accounting_books_accounting_book_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.789271, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_books\"\nwhere accounting_book_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "accounting_book_id", "file_key_name": "models.stg_netsuite2__accounting_books"}, "test.netsuite_source.unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.d2038de348": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_fivetran_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_period_fiscal_cal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.d2038de348", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id", "alias": "unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__accounting_period_fiscal_cal"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.790197, "compiled_sql": "\n    \n    \n\nselect\n    _fivetran_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_period_fiscal_cal\"\nwhere _fivetran_id is not null\ngroup by _fivetran_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_fivetran_id", "file_key_name": "models.stg_netsuite2__accounting_period_fiscal_cal"}, "test.netsuite_source.not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.ec8750b679": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_netsuite2__accoun_902ea903927e24c050ca1e7f36715415\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_fivetran_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_period_fiscal_cal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal"]}, "config": {"enabled": true, "alias": "not_null_stg_netsuite2__accoun_902ea903927e24c050ca1e7f36715415", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.ec8750b679", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__accoun_902ea903927e24c050ca1e7f36715415.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id", "alias": "not_null_stg_netsuite2__accoun_902ea903927e24c050ca1e7f36715415", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__accounting_period_fiscal_cal"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__accoun_902ea903927e24c050ca1e7f36715415.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_netsuite2__accoun_902ea903927e24c050ca1e7f36715415"}, "created_at": 1658868251.791113, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_period_fiscal_cal\"\nwhere _fivetran_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_fivetran_id", "file_key_name": "models.stg_netsuite2__accounting_period_fiscal_cal"}, "test.netsuite_source.unique_stg_netsuite2__accounting_periods_accounting_period_id.a9d8f4c6e1": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "accounting_period_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_periods')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_periods"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__accounting_periods_accounting_period_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounting_periods_accounting_period_id.a9d8f4c6e1", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__accounting_periods_accounting_period_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__accounting_periods_accounting_period_id", "alias": "unique_stg_netsuite2__accounting_periods_accounting_period_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__accounting_periods"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__accounting_periods_accounting_period_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.792104, "compiled_sql": "\n    \n    \n\nselect\n    accounting_period_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_periods\"\nwhere accounting_period_id is not null\ngroup by accounting_period_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "accounting_period_id", "file_key_name": "models.stg_netsuite2__accounting_periods"}, "test.netsuite_source.not_null_stg_netsuite2__accounting_periods_accounting_period_id.f2db2c547c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "accounting_period_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounting_periods')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounting_periods"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__accounting_periods_accounting_period_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounting_periods_accounting_period_id.f2db2c547c", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__accounting_periods_accounting_period_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__accounting_periods_accounting_period_id", "alias": "not_null_stg_netsuite2__accounting_periods_accounting_period_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__accounting_periods"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__accounting_periods_accounting_period_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.79329, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounting_periods\"\nwhere accounting_period_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "accounting_period_id", "file_key_name": "models.stg_netsuite2__accounting_periods"}, "test.netsuite_source.unique_stg_netsuite2__accounts_account_id.23a63b3e17": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__accounts_account_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__accounts_account_id.23a63b3e17", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__accounts_account_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__accounts_account_id", "alias": "unique_stg_netsuite2__accounts_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__accounts_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.794209, "compiled_sql": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounts\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_netsuite2__accounts"}, "test.netsuite_source.not_null_stg_netsuite2__accounts_account_id.5a542e47a2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__accounts_account_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__accounts_account_id.5a542e47a2", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__accounts_account_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__accounts_account_id", "alias": "not_null_stg_netsuite2__accounts_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__accounts_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.795111, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__accounts\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.stg_netsuite2__accounts"}, "test.netsuite_source.unique_stg_netsuite2__classes_class_id.d069e30c98": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "class_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__classes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__classes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__classes_class_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__classes_class_id.d069e30c98", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__classes_class_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__classes_class_id", "alias": "unique_stg_netsuite2__classes_class_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__classes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__classes_class_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.796302, "compiled_sql": "\n    \n    \n\nselect\n    class_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__classes\"\nwhere class_id is not null\ngroup by class_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "class_id", "file_key_name": "models.stg_netsuite2__classes"}, "test.netsuite_source.not_null_stg_netsuite2__classes_class_id.799b01ffba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "class_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__classes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__classes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__classes_class_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__classes_class_id.799b01ffba", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__classes_class_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__classes_class_id", "alias": "not_null_stg_netsuite2__classes_class_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__classes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__classes_class_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.7972548, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__classes\"\nwhere class_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "class_id", "file_key_name": "models.stg_netsuite2__classes"}, "test.netsuite_source.unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.2d4725bb7a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_netsuite2__consolid_8c677b22f536958a41ad7550ef138fc1\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "consolidated_exchange_rate_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__consolidated_exchange_rates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates"]}, "config": {"enabled": true, "alias": "unique_stg_netsuite2__consolid_8c677b22f536958a41ad7550ef138fc1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.2d4725bb7a", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__consolid_8c677b22f536958a41ad7550ef138fc1.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id", "alias": "unique_stg_netsuite2__consolid_8c677b22f536958a41ad7550ef138fc1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__consolidated_exchange_rates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__consolid_8c677b22f536958a41ad7550ef138fc1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_netsuite2__consolid_8c677b22f536958a41ad7550ef138fc1"}, "created_at": 1658868251.798191, "compiled_sql": "\n    \n    \n\nselect\n    consolidated_exchange_rate_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is not null\ngroup by consolidated_exchange_rate_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "consolidated_exchange_rate_id", "file_key_name": "models.stg_netsuite2__consolidated_exchange_rates"}, "test.netsuite_source.not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.09703507c6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_netsuite2__consol_a004a75f7882c268647404501df8e511\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "consolidated_exchange_rate_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__consolidated_exchange_rates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates"]}, "config": {"enabled": true, "alias": "not_null_stg_netsuite2__consol_a004a75f7882c268647404501df8e511", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.09703507c6", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__consol_a004a75f7882c268647404501df8e511.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id", "alias": "not_null_stg_netsuite2__consol_a004a75f7882c268647404501df8e511", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__consolidated_exchange_rates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__consol_a004a75f7882c268647404501df8e511.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_netsuite2__consol_a004a75f7882c268647404501df8e511"}, "created_at": 1658868251.7991738, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__consolidated_exchange_rates\"\nwhere consolidated_exchange_rate_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "consolidated_exchange_rate_id", "file_key_name": "models.stg_netsuite2__consolidated_exchange_rates"}, "test.netsuite_source.unique_stg_netsuite2__currencies_currency_id.50d9c37c78": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "currency_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__currencies')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__currencies"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__currencies_currency_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__currencies_currency_id.50d9c37c78", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__currencies_currency_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__currencies_currency_id", "alias": "unique_stg_netsuite2__currencies_currency_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__currencies"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__currencies_currency_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.800271, "compiled_sql": "\n    \n    \n\nselect\n    currency_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__currencies\"\nwhere currency_id is not null\ngroup by currency_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "currency_id", "file_key_name": "models.stg_netsuite2__currencies"}, "test.netsuite_source.not_null_stg_netsuite2__currencies_currency_id.7eff9f9c1c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__currencies')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__currencies"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__currencies_currency_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__currencies_currency_id.7eff9f9c1c", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__currencies_currency_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__currencies_currency_id", "alias": "not_null_stg_netsuite2__currencies_currency_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__currencies"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__currencies_currency_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.801176, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__currencies\"\nwhere currency_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "currency_id", "file_key_name": "models.stg_netsuite2__currencies"}, "test.netsuite_source.unique_stg_netsuite2__customers_customer_id.05ca0360f2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__customers_customer_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__customers_customer_id.05ca0360f2", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__customers_customer_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__customers_customer_id", "alias": "unique_stg_netsuite2__customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__customers_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.8021052, "compiled_sql": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.stg_netsuite2__customers"}, "test.netsuite_source.not_null_stg_netsuite2__customers_customer_id.65a5ae302a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__customers_customer_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__customers_customer_id.65a5ae302a", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__customers_customer_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__customers_customer_id", "alias": "not_null_stg_netsuite2__customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__customers_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.803138, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__customers\"\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.stg_netsuite2__customers"}, "test.netsuite_source.unique_stg_netsuite2__departments_department_id.13e4897f0b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "department_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__departments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__departments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__departments_department_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__departments_department_id.13e4897f0b", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__departments_department_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__departments_department_id", "alias": "unique_stg_netsuite2__departments_department_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__departments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__departments_department_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.804047, "compiled_sql": "\n    \n    \n\nselect\n    department_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__departments\"\nwhere department_id is not null\ngroup by department_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "department_id", "file_key_name": "models.stg_netsuite2__departments"}, "test.netsuite_source.not_null_stg_netsuite2__departments_department_id.7395bbfe71": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "department_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__departments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__departments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__departments_department_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__departments_department_id.7395bbfe71", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__departments_department_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__departments_department_id", "alias": "not_null_stg_netsuite2__departments_department_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__departments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__departments_department_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.804949, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__departments\"\nwhere department_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "department_id", "file_key_name": "models.stg_netsuite2__departments"}, "test.netsuite_source.unique_stg_netsuite2__entities_entity_id.f9acd04f50": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "entity_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__entities')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__entities"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__entities_entity_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__entities_entity_id.f9acd04f50", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__entities_entity_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__entities_entity_id", "alias": "unique_stg_netsuite2__entities_entity_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__entities"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__entities_entity_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.805992, "compiled_sql": "\n    \n    \n\nselect\n    entity_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__entities\"\nwhere entity_id is not null\ngroup by entity_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "entity_id", "file_key_name": "models.stg_netsuite2__entities"}, "test.netsuite_source.not_null_stg_netsuite2__entities_entity_id.f22c18cfa2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "entity_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__entities')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__entities"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__entities_entity_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__entities_entity_id.f22c18cfa2", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__entities_entity_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__entities_entity_id", "alias": "not_null_stg_netsuite2__entities_entity_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__entities"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__entities_entity_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.806912, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__entities\"\nwhere entity_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "entity_id", "file_key_name": "models.stg_netsuite2__entities"}, "test.netsuite_source.unique_stg_netsuite2__items_item_id.3fcafd9eee": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__items_item_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__items_item_id.3fcafd9eee", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__items_item_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__items_item_id", "alias": "unique_stg_netsuite2__items_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__items_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.807824, "compiled_sql": "\n    \n    \n\nselect\n    item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__items\"\nwhere item_id is not null\ngroup by item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_id", "file_key_name": "models.stg_netsuite2__items"}, "test.netsuite_source.not_null_stg_netsuite2__items_item_id.e216b5b06a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__items_item_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__items_item_id.e216b5b06a", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__items_item_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__items_item_id", "alias": "not_null_stg_netsuite2__items_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__items_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.808728, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__items\"\nwhere item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_id", "file_key_name": "models.stg_netsuite2__items"}, "test.netsuite_source.unique_stg_netsuite2__jobs_job_id.c294ea849c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "job_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__jobs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__jobs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__jobs_job_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__jobs_job_id.c294ea849c", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__jobs_job_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__jobs_job_id", "alias": "unique_stg_netsuite2__jobs_job_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__jobs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__jobs_job_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.809927, "compiled_sql": "\n    \n    \n\nselect\n    job_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__jobs\"\nwhere job_id is not null\ngroup by job_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "job_id", "file_key_name": "models.stg_netsuite2__jobs"}, "test.netsuite_source.not_null_stg_netsuite2__jobs_job_id.d7b5b06b33": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "job_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__jobs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__jobs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__jobs_job_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__jobs_job_id.d7b5b06b33", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__jobs_job_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__jobs_job_id", "alias": "not_null_stg_netsuite2__jobs_job_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__jobs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__jobs_job_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.810913, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__jobs\"\nwhere job_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "job_id", "file_key_name": "models.stg_netsuite2__jobs"}, "test.netsuite_source.unique_stg_netsuite2__locations_location_id.f1469a5149": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "location_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__locations')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__locations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__locations_location_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__locations_location_id.f1469a5149", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__locations_location_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__locations_location_id", "alias": "unique_stg_netsuite2__locations_location_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__locations"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__locations_location_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.811847, "compiled_sql": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__locations\"\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "location_id", "file_key_name": "models.stg_netsuite2__locations"}, "test.netsuite_source.not_null_stg_netsuite2__locations_location_id.c335a5985e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "location_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__locations')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__locations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__locations_location_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__locations_location_id.c335a5985e", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__locations_location_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__locations_location_id", "alias": "not_null_stg_netsuite2__locations_location_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__locations"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__locations_location_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.812893, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__locations\"\nwhere location_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "location_id", "file_key_name": "models.stg_netsuite2__locations"}, "test.netsuite_source.unique_stg_netsuite2__subsidiaries_subsidiary_id.8edc974229": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "subsidiary_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__subsidiaries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__subsidiaries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__subsidiaries_subsidiary_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__subsidiaries_subsidiary_id.8edc974229", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__subsidiaries_subsidiary_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__subsidiaries_subsidiary_id", "alias": "unique_stg_netsuite2__subsidiaries_subsidiary_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__subsidiaries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__subsidiaries_subsidiary_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.8138182, "compiled_sql": "\n    \n    \n\nselect\n    subsidiary_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__subsidiaries\"\nwhere subsidiary_id is not null\ngroup by subsidiary_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subsidiary_id", "file_key_name": "models.stg_netsuite2__subsidiaries"}, "test.netsuite_source.not_null_stg_netsuite2__subsidiaries_subsidiary_id.0ab6516626": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subsidiary_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__subsidiaries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__subsidiaries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__subsidiaries_subsidiary_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__subsidiaries_subsidiary_id.0ab6516626", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__subsidiaries_subsidiary_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__subsidiaries_subsidiary_id", "alias": "not_null_stg_netsuite2__subsidiaries_subsidiary_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__subsidiaries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__subsidiaries_subsidiary_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.8147259, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__subsidiaries\"\nwhere subsidiary_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subsidiary_id", "file_key_name": "models.stg_netsuite2__subsidiaries"}, "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_id.f28afbfa25": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_netsuite2__transa_ee27274f65dca2015601fab9d3e74ccc\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__transaction_accounting_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines"]}, "config": {"enabled": true, "alias": "not_null_stg_netsuite2__transa_ee27274f65dca2015601fab9d3e74ccc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__transaction_accounting_lines_transaction_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_id.f28afbfa25", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__transa_ee27274f65dca2015601fab9d3e74ccc.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__transaction_accounting_lines_transaction_id", "alias": "not_null_stg_netsuite2__transa_ee27274f65dca2015601fab9d3e74ccc", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__transaction_accounting_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__transa_ee27274f65dca2015601fab9d3e74ccc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_netsuite2__transa_ee27274f65dca2015601fab9d3e74ccc"}, "created_at": 1658868251.815647, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transaction_accounting_lines\"\nwhere transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_id", "file_key_name": "models.stg_netsuite2__transaction_accounting_lines"}, "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id.0f72869807": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_netsuite2__transa_37ee293e4f6a85021068b9cb363d1b54\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_line_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__transaction_accounting_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines"]}, "config": {"enabled": true, "alias": "not_null_stg_netsuite2__transa_37ee293e4f6a85021068b9cb363d1b54", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id.0f72869807", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__transa_37ee293e4f6a85021068b9cb363d1b54.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id", "alias": "not_null_stg_netsuite2__transa_37ee293e4f6a85021068b9cb363d1b54", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__transaction_accounting_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__transa_37ee293e4f6a85021068b9cb363d1b54.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_netsuite2__transa_37ee293e4f6a85021068b9cb363d1b54"}, "created_at": 1658868251.816736, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transaction_accounting_lines\"\nwhere transaction_line_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_line_id", "file_key_name": "models.stg_netsuite2__transaction_accounting_lines"}, "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id.34750610bd": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_db250db642d3e62f4e602ac2d32ef1c6\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transaction_id", "transaction_line_id"], "model": "{{ get_where_subquery(ref('stg_netsuite2__transaction_accounting_lines')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_db250db642d3e62f4e602ac2d32ef1c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id"], "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id.34750610bd", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "dbt_utils_unique_combination_o_db250db642d3e62f4e602ac2d32ef1c6.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id", "alias": "dbt_utils_unique_combination_o_db250db642d3e62f4e602ac2d32ef1c6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__transaction_accounting_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/dbt_utils_unique_combination_o_db250db642d3e62f4e602ac2d32ef1c6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_db250db642d3e62f4e602ac2d32ef1c6"}, "created_at": 1658868251.8177059, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id\n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transaction_accounting_lines\"\n    group by transaction_id, transaction_line_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_netsuite2__transaction_accounting_lines"}, "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_line_id.a82e70adc1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_line_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__transaction_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_lines"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__transaction_lines_transaction_line_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_line_id.a82e70adc1", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__transaction_lines_transaction_line_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__transaction_lines_transaction_line_id", "alias": "not_null_stg_netsuite2__transaction_lines_transaction_line_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__transaction_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__transaction_lines_transaction_line_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.820451, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transaction_lines\"\nwhere transaction_line_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_line_id", "file_key_name": "models.stg_netsuite2__transaction_lines"}, "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_id.267b150890": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__transaction_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_lines"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__transaction_lines_transaction_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_id.267b150890", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__transaction_lines_transaction_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__transaction_lines_transaction_id", "alias": "not_null_stg_netsuite2__transaction_lines_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__transaction_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__transaction_lines_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.8213959, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transaction_lines\"\nwhere transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_id", "file_key_name": "models.stg_netsuite2__transaction_lines"}, "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id.07b823514f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6fa30c59537c4064c2041e85d76e5145\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transaction_id", "transaction_line_id"], "model": "{{ get_where_subquery(ref('stg_netsuite2__transaction_lines')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transaction_lines"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6fa30c59537c4064c2041e85d76e5145", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id"], "unique_id": "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id.07b823514f", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "dbt_utils_unique_combination_o_6fa30c59537c4064c2041e85d76e5145.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id", "alias": "dbt_utils_unique_combination_o_6fa30c59537c4064c2041e85d76e5145", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__transaction_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/dbt_utils_unique_combination_o_6fa30c59537c4064c2041e85d76e5145.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6fa30c59537c4064c2041e85d76e5145"}, "created_at": 1658868251.822467, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_line_id\n    from \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transaction_lines\"\n    group by transaction_id, transaction_line_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_netsuite2__transaction_lines"}, "test.netsuite_source.unique_stg_netsuite2__transactions_transaction_id.af3d15dce4": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__transactions_transaction_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__transactions_transaction_id.af3d15dce4", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__transactions_transaction_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__transactions_transaction_id", "alias": "unique_stg_netsuite2__transactions_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__transactions_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.825005, "compiled_sql": "\n    \n    \n\nselect\n    transaction_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transactions\"\nwhere transaction_id is not null\ngroup by transaction_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_id", "file_key_name": "models.stg_netsuite2__transactions"}, "test.netsuite_source.not_null_stg_netsuite2__transactions_transaction_id.b4f6c6a72b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__transactions_transaction_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__transactions_transaction_id.b4f6c6a72b", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__transactions_transaction_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__transactions_transaction_id", "alias": "not_null_stg_netsuite2__transactions_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__transactions_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.82607, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__transactions\"\nwhere transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_id", "file_key_name": "models.stg_netsuite2__transactions"}, "test.netsuite_source.unique_stg_netsuite2__vendor_categories_vendor_category_id.874da088c6": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "vendor_category_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__vendor_categories')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__vendor_categories"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__vendor_categories_vendor_category_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__vendor_categories_vendor_category_id.874da088c6", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__vendor_categories_vendor_category_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__vendor_categories_vendor_category_id", "alias": "unique_stg_netsuite2__vendor_categories_vendor_category_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__vendor_categories"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__vendor_categories_vendor_category_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.826993, "compiled_sql": "\n    \n    \n\nselect\n    vendor_category_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__vendor_categories\"\nwhere vendor_category_id is not null\ngroup by vendor_category_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "vendor_category_id", "file_key_name": "models.stg_netsuite2__vendor_categories"}, "test.netsuite_source.not_null_stg_netsuite2__vendor_categories_vendor_category_id.60acd9acb2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_category_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__vendor_categories')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__vendor_categories"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__vendor_categories_vendor_category_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__vendor_categories_vendor_category_id.60acd9acb2", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__vendor_categories_vendor_category_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__vendor_categories_vendor_category_id", "alias": "not_null_stg_netsuite2__vendor_categories_vendor_category_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__vendor_categories"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__vendor_categories_vendor_category_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.827919, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__vendor_categories\"\nwhere vendor_category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "vendor_category_id", "file_key_name": "models.stg_netsuite2__vendor_categories"}, "test.netsuite_source.unique_stg_netsuite2__vendors_vendor_id.415829ac1d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__vendors')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__vendors"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "unique_stg_netsuite2__vendors_vendor_id"], "unique_id": "test.netsuite_source.unique_stg_netsuite2__vendors_vendor_id.415829ac1d", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "unique_stg_netsuite2__vendors_vendor_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "unique_stg_netsuite2__vendors_vendor_id", "alias": "unique_stg_netsuite2__vendors_vendor_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__vendors"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/unique_stg_netsuite2__vendors_vendor_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.828948, "compiled_sql": "\n    \n    \n\nselect\n    vendor_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__vendors\"\nwhere vendor_id is not null\ngroup by vendor_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "vendor_id", "file_key_name": "models.stg_netsuite2__vendors"}, "test.netsuite_source.not_null_stg_netsuite2__vendors_vendor_id.777b758daf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('stg_netsuite2__vendors')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_source.stg_netsuite2__vendors"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "netsuite_source_integration_tests_dbt_test__audit", "fqn": ["netsuite_source", "not_null_stg_netsuite2__vendors_vendor_id"], "unique_id": "test.netsuite_source.not_null_stg_netsuite2__vendors_vendor_id.777b758daf", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "not_null_stg_netsuite2__vendors_vendor_id.sql", "original_file_path": "models/stg_netsuite2.yml", "name": "not_null_stg_netsuite2__vendors_vendor_id", "alias": "not_null_stg_netsuite2__vendors_vendor_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_netsuite2__vendors"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/netsuite_source/models/stg_netsuite2.yml/not_null_stg_netsuite2__vendors_vendor_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1658868251.8298619, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"netsuite_source_integration_tests_netsuite_source\".\"stg_netsuite2__vendors\"\nwhere vendor_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "vendor_id", "file_key_name": "models.stg_netsuite2__vendors"}}, "sources": {"source.netsuite_source.netsuite2.account_type": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "account_type"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.account_type", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "account_type", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_account_type_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table containing the various account types within Netsuite.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique identifier of thea account type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balancesheet": {"name": "balancesheet", "description": "Boolean indicating if the account type is a balance sheet account. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "left": {"name": "left", "description": "Boolean indicating if the account type is leftside. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "longname": {"name": "longname", "description": "The name of the account type.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_account_type_data\"", "created_at": 1658868251.901237}, "source.netsuite_source.netsuite2.accounting_book_subsidiaries": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "accounting_book_subsidiaries"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.accounting_book_subsidiaries", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "accounting_book_subsidiaries", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_accounting_book_sub_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table containing the various account books and the respective subsidiaries.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountingbook": {"name": "accountingbook", "description": "Unique identifier of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the accounting book subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary": {"name": "subsidiary", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_accounting_book_sub_data\"", "created_at": 1658868251.9013472}, "source.netsuite_source.netsuite2.accounting_book": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "accounting_book"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.accounting_book", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "accounting_book", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_accounting_book_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all accounting books set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique identifier of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "basebook": {"name": "basebook", "description": "Reference to the base book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effectiveperiod": {"name": "effectiveperiod", "description": "Reference to the effective period of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isadjustmentonly": {"name": "isadjustmentonly", "description": "Boolean indicating if the accounting book is an adjustment only. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isconsolidated": {"name": "isconsolidated", "description": "Boolean indicating if the accounting book is a consolidated entry. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contingentrevenuehandling": {"name": "contingentrevenuehandling", "description": "Boolean indicating if the accounting book is contingent revenue handling. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isprimary": {"name": "isprimary", "description": "Boolean indicating if the accounting book is a primary entry. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "twosteprevenueallocation": {"name": "twosteprevenueallocation", "description": "Boolean indicating if the accounting book is a two step revenue allocation entry. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unbilledreceivablegrouping": {"name": "unbilledreceivablegrouping", "description": "Boolean indicating if the accounting book is an unbilled receivable grouping. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_accounting_book_data\"", "created_at": 1658868251.901428}, "source.netsuite_source.netsuite2.accounting_period_fiscal_calendars": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "accounting_period_fiscal_calendars"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.accounting_period_fiscal_calendars", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "accounting_period_fiscal_calendars", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_accounting_period_fiscal_cal_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table containing the accounting fiscal calendar periods.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountingperiod": {"name": "accountingperiod", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscalcalendar": {"name": "fiscalcalendar", "description": "Reference to the fiscal calendar used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent fiscal calendar accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_accounting_period_fiscal_cal_data\"", "created_at": 1658868251.901494}, "source.netsuite_source.netsuite2.accounting_period": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "accounting_period"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.accounting_period", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "accounting_period", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_accounting_period_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all accounting periods, including monthly, quarterly and yearly.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "periodname": {"name": "periodname", "description": "Name of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "startdate": {"name": "startdate", "description": "Timestamp of when the accounting period starts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enddate": {"name": "enddate", "description": "Timestamp if when the accounting period ends.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closedondate": {"name": "closedondate", "description": "Timestamp of when the accounting period is closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isquarter": {"name": "isquarter", "description": "Boolean indicating if the accounting period is the initial quarter. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isyear": {"name": "isyear", "description": "Boolean indicating if the accounting period is the initial period. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isadjust": {"name": "isadjust", "description": "Boolean indicating if the accounting period is an adjustment. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isposting": {"name": "isposting", "description": "Boolean indicating if the accounting period is posting. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed": {"name": "closed", "description": "Boolean indicating if the accounting period is closed. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alllocked": {"name": "alllocked", "description": "Boolean indicating if all the accounting periods are locked. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "arlocked": {"name": "arlocked", "description": "Boolean indicating if the ar accounting period is locked. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "aplocked": {"name": "aplocked", "description": "Boolean indicating if the ap accounting period is locked. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_accounting_period_data\"", "created_at": 1658868251.901571}, "source.netsuite_source.netsuite2.account": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "account"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.account", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "account", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_account_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all accounts set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique identifier associated with the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "externalid": {"name": "externalid", "description": "Reference to the external account,", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "acctnumber": {"name": "acctnumber", "description": "Netsuite generated account number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accttype": {"name": "accttype", "description": "Reference to the account type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fullname": {"name": "fullname", "description": "Name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferralacct": {"name": "deferralacct", "description": "Reference to the deferral account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cashflowrate": {"name": "cashflowrate", "description": "The cash flow rate type of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "generalrate": {"name": "generalrate", "description": "The general rate type of the account (Current, Historical, Average).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class": {"name": "class", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department": {"name": "department", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "includechildren": {"name": "includechildren", "description": "Boolean indicating if the account includes sub accounts. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isinactive": {"name": "isinactive", "description": "Boolean indicating if the account is inactive. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issummary": {"name": "issummary", "description": "Boolean indicating if the account is a summary account. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_account_data\"", "created_at": 1658868251.901651}, "source.netsuite_source.netsuite2.classification": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "classification"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.classification", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "classification", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_classification_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all classes set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "externalid": {"name": "externalid", "description": "Reference to the external class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fullname": {"name": "fullname", "description": "Full name of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isinactive": {"name": "isinactive", "description": "Boolean indicating if the class is active. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_classification_data\"", "created_at": 1658868251.901719}, "source.netsuite_source.netsuite2.consolidated_exchange_rate": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "consolidated_exchange_rate"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.consolidated_exchange_rate", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "consolidated_exchange_rate", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_consolidated_exchange_rate_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing average, historical and current exchange rates for all accounting periods.", "columns": {"id": {"name": "id", "description": "unique identifier for the consolidated exchange rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "postingperiod": {"name": "postingperiod", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fromcurrency": {"name": "fromcurrency", "description": "The currency id which the consolidated exchange rate is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fromsubsidiary": {"name": "fromsubsidiary", "description": "The subsidiary id which the consolidated exchange rate is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tocurrency": {"name": "tocurrency", "description": "The subsidiary id which the consolidated exchange rate is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tosubsidiary": {"name": "tosubsidiary", "description": "The subsidiary id which the consolidated exchange rate is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currentrate": {"name": "currentrate", "description": "The current rate associated with the exchange rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "averagerate": {"name": "averagerate", "description": "The consolidated exchange rates average rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "historicalrate": {"name": "historicalrate", "description": "The historical rate of the exchange rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_consolidated_exchange_rate_data\"", "created_at": 1658868251.90179}, "source.netsuite_source.netsuite2.currency": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "currency"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.currency", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "currency", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_currency_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all currency information.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "symbol": {"name": "symbol", "description": "Currency symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_currency_data\"", "created_at": 1658868251.901854}, "source.netsuite_source.netsuite2.customer": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "customer"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.customer", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "customer", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_customer_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all customer information.", "columns": {"id": {"name": "id", "description": "Unique identifier of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entityid": {"name": "entityid", "description": "The entity id of the entity used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "externalid": {"name": "externalid", "description": "Reference to the associated external customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isperson": {"name": "isperson", "description": "Boolean indicating if the customer is an individual person. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "companyname": {"name": "companyname", "description": "Name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstname": {"name": "firstname", "description": "First name of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lastname": {"name": "lastname", "description": "Last name of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Customers email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone": {"name": "phone", "description": "Phone number of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultbillingaddress": {"name": "defaultbillingaddress", "description": "Reference to the associated billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultshippingaddress": {"name": "defaultshippingaddress", "description": "Reference to the associated default shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receivablesaccount": {"name": "receivablesaccount", "description": "Reference to the associated receivables account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "firstorderdate": {"name": "firstorderdate", "description": "Timestamp of when the first order was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_customer_data\"", "created_at": 1658868251.90193}, "source.netsuite_source.netsuite2.department": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "department"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.department", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "department", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_department_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all departments set up in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fullname": {"name": "fullname", "description": "Full name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary": {"name": "subsidiary", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isinactive": {"name": "isinactive", "description": "Boolean indicating if the department is active. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when a record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_department_data\"", "created_at": 1658868251.901997}, "source.netsuite_source.netsuite2.entity": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "entity"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.entity", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "entity", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_entities_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all entities in Netsuite.", "columns": {"id": {"name": "id", "description": "Th \"The entity id of the entity used for the record.\"e unique identifier of the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact": {"name": "contact", "description": "The unique identifier of the contact associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer": {"name": "customer", "description": "The unique identifier of the customer associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "employee": {"name": "employee", "description": "The unique identifier of the employee associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entitytitle": {"name": "entitytitle", "description": "The entity name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isperson": {"name": "isperson", "description": "Value indicating whether the entity is a person (either yes or no).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "The unique identifier of the parent entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project": {"name": "project", "description": "The unique identifier of the project (job) associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The entity type (Contact, CustJob, Job, etc).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "The unique identifier of the vendor associated with the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_entities_data\"", "created_at": 1658868251.902102}, "source.netsuite_source.netsuite2.entity_address": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "entity_address"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.entity_address", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "entity_address", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_entity_address_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table containing addresses and the various entities which they map.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr1": {"name": "addr1", "description": "The associated address 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr2": {"name": "addr2", "description": "The associated address 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr3": {"name": "addr3", "description": "The associated address 3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addressee": {"name": "addressee", "description": "The individual associated with the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addrtext": {"name": "addrtext", "description": "The full address associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The associated city.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The associated country.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The associated state.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nkey": {"name": "nkey", "description": "The associated Netsuite key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip": {"name": "zip", "description": "The associated zipcode.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_entity_address_data\"", "created_at": 1658868251.9021719}, "source.netsuite_source.netsuite2.item": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "item"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.item", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "item", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_item_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing information about the items created in Netsuite.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique identifier of the item used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fullname": {"name": "fullname", "description": "Name of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "itemtype": {"name": "itemtype", "description": "Item type name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Sales description associated with the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department": {"name": "department", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class": {"name": "class", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary": {"name": "subsidiary", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assetaccount": {"name": "assetaccount", "description": "Reference to the asset account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expenseaccount": {"name": "expenseaccount", "description": "Reference to the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gainlossaccount": {"name": "gainlossaccount", "description": "Reference to the gain or loss account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "incomeaccount": {"name": "incomeaccount", "description": "Reference to the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intercoexpenseaccount": {"name": "intercoexpenseaccount", "description": "Reference to the intercompany expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intercoincomeaccount": {"name": "intercoincomeaccount", "description": "Reference to the intercompany income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferralaccount": {"name": "deferralaccount", "description": "Reference to the deferred expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferredrevenueaccount": {"name": "deferredrevenueaccount", "description": "Reference to the deferred revenue account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_item_data\"", "created_at": 1658868251.902248}, "source.netsuite_source.netsuite2.job": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "job"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.job", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "job", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_job_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all jobs.", "columns": {"id": {"name": "id", "description": "The unique identifier of the job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "externalid": {"name": "externalid", "description": "The unique identifier of the external job reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer": {"name": "customer", "description": "The unique identifier of the customer associated with the job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entityid": {"name": "entityid", "description": "Reference the the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultbillingaddress": {"name": "defaultbillingaddress", "description": "Default billing address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "defaultshippingaddress": {"name": "defaultshippingaddress", "description": "Default shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent job.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_job_data\"", "created_at": 1658868251.902312}, "source.netsuite_source.netsuite2.location_main_address": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "location_main_address"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.location_main_address", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "location_main_address", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_location_main_address_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table containing the location main addresses.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr1": {"name": "addr1", "description": "The associated address 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr2": {"name": "addr2", "description": "The associated address 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr3": {"name": "addr3", "description": "The associated address 3.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addressee": {"name": "addressee", "description": "The individual associated with the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addrtext": {"name": "addrtext", "description": "The full address associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The associated city.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The associated country.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The associated state.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nkey": {"name": "nkey", "description": "The associated Netsuite key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip": {"name": "zip", "description": "The associated zipcode.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_location_main_address_data\"", "created_at": 1658868251.90238}, "source.netsuite_source.netsuite2.location": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "location"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.location", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "location", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_location_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all locations, including store, warehouse and office locations.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fullname": {"name": "fullname", "description": "Full name of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mainaddress": {"name": "mainaddress", "description": "Reference to the main address used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary": {"name": "subsidiary", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_location_data\"", "created_at": 1658868251.902441}, "source.netsuite_source.netsuite2.subsidiary": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "subsidiary"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.subsidiary", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "subsidiary", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_subsidiary_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all subsidiaries.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fullname": {"name": "fullname", "description": "Full name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address associated with the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mainaddress": {"name": "mainaddress", "description": "Reference to the main address used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country which the subsidiary is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The state which the subsidiary is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscalcalendar": {"name": "fiscalcalendar", "description": "Reference to the fiscal calendar used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent": {"name": "parent", "description": "Reference to the parent subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_subsidiary_data\"", "created_at": 1658868251.9025102}, "source.netsuite_source.netsuite2.transaction_accounting_line": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "transaction_accounting_line"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.transaction_accounting_line", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "transaction_accounting_line", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_tran_acct_line_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all transaction lines for all transactions.", "columns": {"transaction": {"name": "transaction", "description": "The transaction id which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transactionline": {"name": "transactionline", "description": "The unique identifier of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "netamount": {"name": "netamount", "description": "The net amount of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountingbook": {"name": "accountingbook", "description": "Reference to the accounting book of the entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account": {"name": "account", "description": "Reference to the account associated with the entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting": {"name": "posting", "description": "Boolean indicating if the entry is posting. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit": {"name": "credit", "description": "Amount associated as a credit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "debit": {"name": "debit", "description": "Amount associated as a debit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amountpaid": {"name": "amountpaid", "description": "Total amount paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amountunpaid": {"name": "amountunpaid", "description": "Total amount unpaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_tran_acct_line_data\"", "created_at": 1658868251.9025831}, "source.netsuite_source.netsuite2.transaction_line": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "transaction_line"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.transaction_line", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "transaction_line", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_transaction_line_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all transaction lines for all transactions.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique identifier of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction": {"name": "transaction", "description": "The transaction id of referenced for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "linesequencenumber": {"name": "linesequencenumber", "description": "Netsuite generated number associated with the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "The memo attached to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity": {"name": "entity", "description": "The entity id of the entity used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item": {"name": "item", "description": "The unique identifier of the item used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class": {"name": "class", "description": "The unique identifier of the class used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "The unique identifier of the location used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary": {"name": "subsidiary", "description": "The unique identifier of the subsidiary used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department": {"name": "department", "description": "The unique identifier of the department used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isclosed": {"name": "isclosed", "description": "Boolean indicating if the transaction line is closed. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isbillable": {"name": "isbillable", "description": "Boolean indicating if the transaction line is billable. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "iscogs": {"name": "iscogs", "description": "Boolean indicating if the transaction line is a cost of goods sold entry. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cleared": {"name": "cleared", "description": "Boolean indicating if the transaction line is cleared. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "commitmentfirm": {"name": "commitmentfirm", "description": "Boolean indicating if the transaction line is a commitment firm. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mainline": {"name": "mainline", "description": "Boolean indicating if the transaction line is a main line entry. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taxline": {"name": "taxline", "description": "Boolean indicating if the transaction line is a tax line. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_transaction_line_data\"", "created_at": 1658868251.902658}, "source.netsuite_source.netsuite2.transaction": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "transaction"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.transaction", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "transaction", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_transaction_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all transactions.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The transaction id of referenced for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transactionnumber": {"name": "transactionnumber", "description": "The Netsuite generated number of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "Memo attached to the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trandate": {"name": "trandate", "description": "The timestamp of the transaction date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "createddate": {"name": "createddate", "description": "Timestamp of when the record was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duedate": {"name": "duedate", "description": "Timestamp of the transactions due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closedate": {"name": "closedate", "description": "Timestamp of when the transaction was closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency id of the currency used within the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity": {"name": "entity", "description": "The entity id of the entity used for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "postingperiod": {"name": "postingperiod", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting": {"name": "posting", "description": "Boolean indicating if the transaction is a posting event. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intercoadj": {"name": "intercoadj", "description": "Boolean indicating if the transaction is an intercompany adjustment. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isreversal": {"name": "isreversal", "description": "Boolean indicating if the transaction is a reversal entry. Represented as \"T\" or \"F\" for true and false respectively.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_transaction_data\"", "created_at": 1658868251.90273}, "source.netsuite_source.netsuite2.vendor_category": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "vendor_category"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.vendor_category", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "vendor_category", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_vendor_category_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table containing categories and how they map to vendors.", "columns": {"id": {"name": "id", "description": "Unique identifier of the vendor category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the vendor category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_vendor_category_data\"", "created_at": 1658868251.902793}, "source.netsuite_source.netsuite2.vendor": {"fqn": ["netsuite_source", "netsuite2", "netsuite2", "vendor"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite2.vendor", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite2/src_netsuite2.yml", "original_file_path": "models/netsuite2/src_netsuite2.yml", "name": "vendor", "source_name": "netsuite2", "source_description": "", "loader": "fivetran", "identifier": "netsuite2_vendor_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all vendor information.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique identifier of the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "companyname": {"name": "companyname", "description": "Name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "datecreated": {"name": "datecreated", "description": "Timestamp of the record creation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Unique identifier of the vendor category.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite2_vendor_data\"", "created_at": 1658868251.9028559}, "source.netsuite_source.netsuite.accounting_books": {"fqn": ["netsuite_source", "netsuite", "netsuite", "accounting_books"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.accounting_books", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "accounting_books", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_accounting_books_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all accounting books set up in Netsuite.", "columns": {"accounting_book_id": {"name": "accounting_book_id", "description": "The unique identifier of the accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_primary": {"name": "is_primary", "description": "Boolean indicating whether it is a primary accounting book.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_accounting_books_data\"", "created_at": 1658868251.9029162}, "source.netsuite_source.netsuite.accounting_periods": {"fqn": ["netsuite_source", "netsuite", "netsuite", "accounting_periods"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.accounting_periods", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "accounting_periods", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_accounting_periods_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all accounting periods, including monthly, quarterly and yearly.", "columns": {"accounting_period_id": {"name": "accounting_period_id", "description": "The unique identifier of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year_id": {"name": "year_id", "description": "The year id the accounting period is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscal_calendar_id": {"name": "fiscal_calendar_id", "description": "The fiscal calendar id the accounting period is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quarter": {"name": "quarter", "description": "The quarter which the accounting period takes place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "starting": {"name": "starting", "description": "The timestamp indicating the start of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ending": {"name": "ending", "description": "The timestamp indicating the end of the accounting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year_0": {"name": "year_0", "description": "Value indicating whether the accounting period is in it's initial year.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_adjustment": {"name": "is_adjustment", "description": "Value indicating whether the accounting period is an adjustment (either yes or no).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed": {"name": "closed", "description": "Value indicating whether the accounting period is closed (either yes or no).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_accounting_periods_data\"", "created_at": 1658868251.902986}, "source.netsuite_source.netsuite.accounts": {"fqn": ["netsuite_source", "netsuite", "netsuite", "accounts"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.accounts", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "accounts", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_accounts_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table that provides a complete listing of every account in the accounting system.", "columns": {"account_id": {"name": "account_id", "description": "The unique identifier associated with the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The accounts associated parent account id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type_name": {"name": "type_name", "description": "The name of the type of the account (ie. Bank, Equity, Income, Expense).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accountingnumber": {"name": "accountingnumber", "description": "The account number associated with the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "general_rate_type": {"name": "general_rate_type", "description": "The general rate type of the account (Current, Historical, Average).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_leftside": {"name": "is_leftside", "description": "Value indicating whether the account is on the leftside (debit).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_balancesheet": {"name": "is_balancesheet", "description": "Value indicating whether the account is a balance sheet account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_accounts_data\"", "created_at": 1658868251.903051}, "source.netsuite_source.netsuite.classes": {"fqn": ["netsuite_source", "netsuite", "netsuite", "classes"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.classes", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "classes", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_classes_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all classes set up in Netsuite.", "columns": {"class_id": {"name": "class_id", "description": "The unique identifier of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_classes_data\"", "created_at": 1658868251.90313}, "source.netsuite_source.netsuite.consolidated_exchange_rates": {"fqn": ["netsuite_source", "netsuite", "netsuite", "consolidated_exchange_rates"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.consolidated_exchange_rates", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "consolidated_exchange_rates", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_consolidated_exchange_rates_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing average, historical and current exchange rates for all accounting periods.", "columns": {"accounting_book_id": {"name": "accounting_book_id", "description": "The accounting book the consolidated exchange rate is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period the consolidated exchange rate is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_rate": {"name": "average_rate", "description": "The consolidated exchange rates average rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_rate": {"name": "current_rate", "description": "The consolidated exchange rates current rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "historical_rate": {"name": "historical_rate", "description": "The consolidated exchange rates historical rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_subsidiary_id": {"name": "from_subsidiary_id", "description": "The subsidiary id which the consolidated exchange rate is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_subsidiary_id": {"name": "to_subsidiary_id", "description": "THe subsidiary id which the consolidated exchange rate is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_consolidated_exchange_rates_data\"", "created_at": 1658868251.9031942}, "source.netsuite_source.netsuite.currencies": {"fqn": ["netsuite_source", "netsuite", "netsuite", "currencies"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.currencies", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "currencies", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_currencies_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "The names and symbols for all currencies set up in Netsuite.", "columns": {"currency_id": {"name": "currency_id", "description": "The unique identifier of the currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "symbol": {"name": "symbol", "description": "The currency's three letter symbol (ie. USD, EUR, CAD).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_currencies_data\"", "created_at": 1658868251.903255}, "source.netsuite_source.netsuite.customers": {"fqn": ["netsuite_source", "netsuite", "netsuite", "customers"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.customers", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "customers", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_customers_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all customer information.", "columns": {"customer_id": {"name": "customer_id", "description": "The unique identifier of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "companyname": {"name": "companyname", "description": "The name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_extid": {"name": "customer_extid", "description": "The unique identifier of the external customer reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The city where the customer is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The state where the customer is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zipcode": {"name": "zipcode", "description": "The zipcode of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country where the customer is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_first_order": {"name": "date_first_order", "description": "The timestamp of the customers first order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_customers_data\"", "created_at": 1658868251.90332}, "source.netsuite_source.netsuite.departments": {"fqn": ["netsuite_source", "netsuite", "netsuite", "departments"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.departments", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "departments", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_departments_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all departments set up in Netsuite.", "columns": {"department_id": {"name": "department_id", "description": "The unique identifier of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The department's full name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_departments_data\"", "created_at": 1658868251.903379}, "source.netsuite_source.netsuite.expense_accounts": {"fqn": ["netsuite_source", "netsuite", "netsuite", "expense_accounts"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.expense_accounts", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "expense_accounts", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_expense_accounts_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all expense accounts.", "columns": {"expense_account_id": {"name": "expense_account_id", "description": "The unique identifier of the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The expense account's associated parent account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "The account number associated with the expense account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_expense_accounts_data\"", "created_at": 1658868251.9034398}, "source.netsuite_source.netsuite.income_accounts": {"fqn": ["netsuite_source", "netsuite", "netsuite", "income_accounts"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.income_accounts", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "income_accounts", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_income_accounts_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all income accounts.", "columns": {"income_account_id": {"name": "income_account_id", "description": "The unique identifier of the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The income account's associated parent account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "The account number associated with the income account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_income_accounts_data\"", "created_at": 1658868251.903501}, "source.netsuite_source.netsuite.items": {"fqn": ["netsuite_source", "netsuite", "netsuite", "items"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.items", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "items", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_items_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing information about the items created in Netsuite.", "columns": {"item_id": {"name": "item_id", "description": "The unique identifier of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type_name": {"name": "type_name", "description": "The type of the item (ie. Markup, Service, Discount).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesdescription": {"name": "salesdescription", "description": "The items sales description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_items_data\"", "created_at": 1658868251.903562}, "source.netsuite_source.netsuite.locations": {"fqn": ["netsuite_source", "netsuite", "netsuite", "locations"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.locations", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "locations", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_locations_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all locations, including store, warehouse and office locations.", "columns": {"location_id": {"name": "location_id", "description": "The unique identifier of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The location's name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The location's city.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The location's country.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_locations_data\"", "created_at": 1658868251.9036238}, "source.netsuite_source.netsuite.subsidiaries": {"fqn": ["netsuite_source", "netsuite", "netsuite", "subsidiaries"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.subsidiaries", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "subsidiaries", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_subsidiaries_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "Table detailing all subsidiaries.", "columns": {"subsidiary_id": {"name": "subsidiary_id", "description": "The unique identifier of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fiscal_calendar_id": {"name": "fiscal_calendar_id", "description": "The fiscal calendar id associated with the fiscal calendar the subsidiary is on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "The full name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the subsidiary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The parent subsidiary id which the subsidiary is under.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_subsidiaries_data\"", "created_at": 1658868251.903682}, "source.netsuite_source.netsuite.transaction_lines": {"fqn": ["netsuite_source", "netsuite", "netsuite", "transaction_lines"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.transaction_lines", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "transaction_lines", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_transaction_lines_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all transaction lines for all transactions.", "columns": {"transaction_id": {"name": "transaction_id", "description": "The transaction id which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_line_id": {"name": "transaction_line_id", "description": "The unique identifier of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subsidiary_id": {"name": "subsidiary_id", "description": "The subsidiary id of the subsidiary which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account id of the account linked to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The company id of the company linked to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "The item id of the item which is included in the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "non_posting_line": {"name": "non_posting_line", "description": "Value indicating whether the transaction line is a non posting line (either Yes or No).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "The class id of the class which the transaction line is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "The location id of the location which the transaction line took place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "The department id of the department linked to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "The memo attached to the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_transaction_lines_data\"", "created_at": 1658868251.9037461}, "source.netsuite_source.netsuite.transactions": {"fqn": ["netsuite_source", "netsuite", "netsuite", "transactions"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.transactions", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "transactions", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_transactions_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all transactions.", "columns": {"transaction_id": {"name": "transaction_id", "description": "The unique identifier of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the transaction (ie. Paid In Full, Open, Cancelled).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trandate": {"name": "trandate", "description": "The timestamp of the transaction date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "The currency id of the currency used in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The accounting period id of the accounting period which the transaction took place in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The timestamp of the transaction due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "The transaction type (ie. Bill, Check, Deposit).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_intercompany": {"name": "is_intercompany", "description": "Value indicating whether the transaction is intercompany (either Yes or No).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_advanced_intercompany": {"name": "is_advanced_intercompany", "description": "Value indicating whether the transaction is an advanced intercompany journal entry (either Yes or No).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_transactions_data\"", "created_at": 1658868251.903808}, "source.netsuite_source.netsuite.vendor_types": {"fqn": ["netsuite_source", "netsuite", "netsuite", "vendor_types"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.vendor_types", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "vendor_types", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_vendor_types_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all the various types of vendors.", "columns": {"vendor_type_id": {"name": "vendor_type_id", "description": "The unique identifier of the vendor type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the vendor type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_vendor_types_data\"", "created_at": 1658868251.903863}, "source.netsuite_source.netsuite.vendors": {"fqn": ["netsuite_source", "netsuite", "netsuite", "vendors"], "database": "postgres", "schema": "netsuite_source_integration_tests", "unique_id": "source.netsuite_source.netsuite.vendors", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "models/netsuite/src_netsuite.yml", "original_file_path": "models/netsuite/src_netsuite.yml", "name": "vendors", "source_name": "netsuite", "source_description": "", "loader": "fivetran", "identifier": "netsuite_vendors_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "A table detailing all vendor information.", "columns": {"vendor_id": {"name": "vendor_id", "description": "The unique identifier of the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_type_id": {"name": "vendor_type_id", "description": "The vendor type the vendor is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "companyname": {"name": "companyname", "description": "The vendor's company name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The timestamp of the date the vendor was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"netsuite_source_integration_tests\".\"netsuite_vendors_data\"", "created_at": 1658868251.903921}}, "macros": {"macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1145139}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.115247}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.12072}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.121235}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1215591}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.121886}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.122452}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1228359}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.123013}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1233711}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.12378}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.123862}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.124047}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.124151}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.125074}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.12554}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1257799}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1264052}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.127351}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1285381}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.128739}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.128889}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.129035}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.129181}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.129627}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1299388}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.130254}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.130761}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.131048}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.134475}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.134652}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.134878}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.135021}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.135117}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.135839}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.136012}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1361809}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.137169}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.139176}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.142575}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.142869}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.143039}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.143126}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.143338}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.144222}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.144417}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.14468}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.145129}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.151221}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.153475}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.154016}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1543381}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.154786}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.15519}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.15616}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1567512}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.157391}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.160249}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.161443}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.161689}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.162118}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.162388}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.163053}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.163877}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.168996}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1739829}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1752598}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.176499}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.177217}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.180979}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1814778}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.181658}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.181854}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1822631}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.185845}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.186211}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1864269}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.18766}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1880739}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.188232}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.188415}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.188668}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.191494}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.195358}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1962612}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.196495}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1969721}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.197116}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1972322}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.19739}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.197501}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.197983}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.1982431}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.199507}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.200042}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2002728}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.200861}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2011268}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.201417}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.201878}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.202128}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.202533}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.202771}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2030878}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.203712}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.204847}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2054322}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.205725}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.207434}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.208695}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.209434}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2096682}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2101}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.210283}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.210444}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.210619}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.211112}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.211252}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.211411}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2117949}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2133608}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.213662}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2138398}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2140632}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.214245}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.214408}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.214617}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2148979}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.215204}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.215916}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2161732}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.216376}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2169862}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.217134}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2173572}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.217772}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2184849}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2186508}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2188501}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.21901}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.219279}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.219769}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2212322}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2214882}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2216718}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.221822}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2220001}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.222239}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.222442}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.22281}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.222991}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.223149}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2248452}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.225003}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2253141}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.225496}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2258298}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.226061}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.22666}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2269099}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.227691}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2282612}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.228487}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.228776}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2290492}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2293692}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2294421}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2295098}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.229905}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.230062}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.230388}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.230581}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.231288}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.231359}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.231427}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2314932}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.231561}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.231724}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2317948}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.231862}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.231926}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.23208}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.232147}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.232214}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2323751}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.232445}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.232511}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.232667}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.232738}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.232804}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2330189}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.233089}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.233155}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.233668}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.234114}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.234267}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2346282}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.234782}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.234889}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.235308}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2354162}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2355158}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.236131}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.236296}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.236452}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.236607}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.236798}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.237111}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.237184}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2372549}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2376409}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.237783}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.237993}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.238127}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.238723}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.238854}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.239006}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.239157}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.241367}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.241772}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.242047}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.242433}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.24338}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.245922}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.246102}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.246269}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.248141}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.24837}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.248909}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2490509}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.249175}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2492979}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.249661}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.249804}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.249929}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.250305}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2504451}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.250575}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.251105}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2512078}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.251306}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.251677}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.251779}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.251881}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2523022}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2524369}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.252565}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.252948}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.25305}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.253639}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.253749}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2538161}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.253885}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.254039}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.254146}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.254303}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.254416}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2545412}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.255947}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2564101}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2568672}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.257052}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.257487}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2576141}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.25774}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2578628}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.258243}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.258344}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.258507}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.258604}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2592041}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.259472}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.259618}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2600021}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2601779}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.261625}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.261784}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.262005}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.26233}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.262652}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.262998}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.263393}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.263517}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.263641}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2642}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2644422}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2645812}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.264714}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.264847}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.265787}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2662148}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2663481}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2665322}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.266714}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.272363}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.272932}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2732701}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.273765}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2790332}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.279569}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.280046}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.280592}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.281259}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.281652}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.281972}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.28256}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2827818}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.283231}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2835279}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2842171}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.284547}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.284998}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.285325}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2857}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2858691}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.286552}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.287101}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2877178}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.288096}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.288586}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.288755}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.289144}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.28932}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.289981}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.290625}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2912488}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.291593}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.29211}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.292402}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.292879}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2933939}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.294111}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.294795}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.295265}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.2954319}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.296205}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.297136}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.3001752}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.30164}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.3019981}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.302163}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.302523}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.3027189}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.3030531}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.303224}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.303746}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.304467}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.305054}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.305286}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.305639}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.3060129}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.306425}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.3071349}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.3080478}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.30895}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.309372}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.3095622}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.310072}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.310804}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.311646}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.312124}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.312402}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.313133}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.314097}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.315802}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.317881}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.320409}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.323379}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.32376}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.3240042}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.326379}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.326593}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.3267882}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.326974}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.327132}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.3272939}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.327915}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.328833}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.329275}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.329559}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.329941}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.33026}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.331738}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.332004}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.332795}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.3333068}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.33443}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.335916}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.336999}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.337824}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.33834}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.339063}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.33951}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.3400981}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.340608}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.34069}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.34077}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.340846}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.341881}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.342156}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.3436642}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.344519}, "macro.netsuite_source.get_expense_accounts_columns": {"unique_id": "macro.netsuite_source.get_expense_accounts_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_expense_accounts_columns.sql", "original_file_path": "macros/get_expense_accounts_columns.sql", "name": "get_expense_accounts_columns", "macro_sql": "{% macro get_expense_accounts_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"comments\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"current_balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"desription\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"expense_account_extid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"expense_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"full_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_including_child_subs\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_summary\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"legal_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.346464}, "macro.netsuite_source.get_locationmainaddress_columns": {"unique_id": "macro.netsuite_source.get_locationmainaddress_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_locationmainaddress_columns.sql", "original_file_path": "macros/get_locationmainaddress_columns.sql", "name": "get_locationmainaddress_columns", "macro_sql": "{% macro get_locationmainaddress_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"addr1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"addr2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"addr3\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"addressee\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"addrphone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"addrtext\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"attention\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"dropdownstate\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"nkey\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"override\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"recordowner\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"zip\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.348607}, "macro.netsuite_source.get_accounts_columns": {"unique_id": "macro.netsuite_source.get_accounts_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_accounts_columns.sql", "original_file_path": "macros/get_accounts_columns.sql", "name": "get_accounts_columns", "macro_sql": "{% macro get_accounts_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"accountnumber\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"general_rate_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_balancesheet\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_leftside\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"type_name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('accounts_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.350263}, "macro.netsuite_source.get_netsuite2_accounts_columns": {"unique_id": "macro.netsuite_source.get_netsuite2_accounts_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_accounts_columns.sql", "original_file_path": "macros/get_accounts_columns.sql", "name": "get_netsuite2_accounts_columns", "macro_sql": "{% macro get_netsuite2_accounts_columns() %}\n\n{% set columns = [\n\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"externalid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"acctnumber\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"accttype\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fullname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deferralacct\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cashflowrate\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"generalrate\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"class\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"department\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"location\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"includechildren\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"issummary\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('accounts_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.352107}, "macro.netsuite_source.get_classes_columns": {"unique_id": "macro.netsuite_source.get_classes_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_classes_columns.sql", "original_file_path": "macros/get_classes_columns.sql", "name": "get_classes_columns", "macro_sql": "{% macro get_classes_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"class_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"full_name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('classes_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.3529332}, "macro.netsuite_source.get_netsuite2_classes_columns": {"unique_id": "macro.netsuite_source.get_netsuite2_classes_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_classes_columns.sql", "original_file_path": "macros/get_classes_columns.sql", "name": "get_netsuite2_classes_columns", "macro_sql": "{% macro get_netsuite2_classes_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"externalid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fullname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('classes_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.353781}, "macro.netsuite_source.get_accountingperiodfiscalcalendars_columns": {"unique_id": "macro.netsuite_source.get_accountingperiodfiscalcalendars_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_accountingperiodfiscalcalendars_columns.sql", "original_file_path": "macros/get_accountingperiodfiscalcalendars_columns.sql", "name": "get_accountingperiodfiscalcalendars_columns", "macro_sql": "{% macro get_accountingperiodfiscalcalendars_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"accountingperiod\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"fiscalcalendar\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"parent\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.354707}, "macro.netsuite_source.get_accountingbooksubsidiaries_columns": {"unique_id": "macro.netsuite_source.get_accountingbooksubsidiaries_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_accountingbooksubsidiaries_columns.sql", "original_file_path": "macros/get_accountingbooksubsidiaries_columns.sql", "name": "get_accountingbooksubsidiaries_columns", "macro_sql": "{% macro get_accountingbooksubsidiaries_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"accountingbook\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subsidiary\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.355655}, "macro.netsuite_source.get_items_columns": {"unique_id": "macro.netsuite_source.get_items_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_items_columns.sql", "original_file_path": "macros/get_items_columns.sql", "name": "get_items_columns", "macro_sql": "{% macro get_items_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"allow_drop_ship\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"alt_demand_source_item_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"asset_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"atp_lead_time\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"atp_method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"available_to_partners\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"avatax_taxcode\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"averagecost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"backward_consumption_days\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"build_sub_assemblies\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"class_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"code_of_supply_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"commodity_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"consumption_unit_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cost_0\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cost_category\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cost_estimate_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"costing_method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"country_of_manufacture\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"create_plan_on_event_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"current_on_order_count\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"custreturn_variance_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"date_of_last_transaction\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"default_return_cost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"deferred_expense_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"deferred_revenue_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"demand_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"demand_time_fence\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"department_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"deposit\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"displayname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"distribution_category\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"distribution_network\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"dropship_expense_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"effective_bom_control_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"expense_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"featureddescription\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"featureditem\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fixed_lot_size\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"forward_consumption_days\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"fraud_risk\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"full_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fx_adjustment_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"gain_loss_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"handling_cost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"hazmat\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"hazmat_hazard_class\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"hazmat_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"hazmat_item_units\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"hazmat_item_units_qty\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"hazmat_packing_group\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"hazmat_shipping_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"include_child_subsidiaries\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"income_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"interco_expense_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"interco_income_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"invt_count_classification\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"invt_count_interval\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"is_cont_rev_handling\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_enforce_min_qty_internally\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_hold_rev_rec\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_moss\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_phantom\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_special_order_item\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isonline\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"istaxable\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_defined_cost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"item_extid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"item_image\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"item_revenue_category\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_term_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"last_cogs_correction\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"last_invt_count_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"last_purchase_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"location_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"lot_numbered_item\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lot_sizing_method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"manufacturer\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"manufacturing_charge_item\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"match_bill_to_receipt\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"matrix_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"maximum_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"minimum_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"modified\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"mpn\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"nature_of_transaction_codes_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"next_invt_count_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ng_asset_type_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"ns_lead_time\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"offersupport\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"onspecial\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"overhead_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"periodic_lot_size_days\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"periodic_lot_size_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"pref_purchase_tax_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"pref_sale_tax_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"pref_stock_level\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"prices_include_tax\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"pricing_group_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"print_sub_items\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"prod_price_var_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"prod_qty_var_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"prompt_payment_discount_item\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"purchase_price_var_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchase_unit_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchasedescription\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"purchaseorderamount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchaseorderquantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchaseorderquantitydiff\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"quantityavailable\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"quantitybackordered\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"quantityonhand\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"receiptamount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"receiptquantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"receiptquantitydiff\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"reorder_multiple\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"reorderpoint\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"replenishment_method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"resalable\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"reschedule_in_days\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"reschedule_out_days\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"rev_rec_forecast_rule_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"rev_rec_rule_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"revenue_allocation_group\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"round_up_as_component\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"safety_stock_days\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"safety_stock_level\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sale_unit_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"salesdescription\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"salesforce_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"salesprice\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"scrap_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"serialized_item\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shippingcost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"special_work_order_item\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"specialsdescription\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"stock_unit_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"storedescription\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"storedetaileddescription\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"storedisplayname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subtype\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"supplementary_unit__abberviat\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"supplementary_unit_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"supply_time_fence\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"supply_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_item_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"totalvalue\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transferprice\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"type_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type_of_goods_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"udf1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"udf2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"un_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unbuild_variance_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"units_type_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"upc_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"use_component_yield\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"vendorname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vendreturn_variance_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"vsoe_deferral\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vsoe_delivered\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vsoe_discount\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vsoe_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"weight\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"weight_in_user_defined_unit\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"weight_unit_index\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"wip_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"wip_cost_variance_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"work_order_lead_time\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.397985}, "macro.netsuite_source.get_netsuite2_items_columns": {"unique_id": "macro.netsuite_source.get_netsuite2_items_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_items_columns.sql", "original_file_path": "macros/get_items_columns.sql", "name": "get_netsuite2_items_columns", "macro_sql": "{% macro get_netsuite2_items_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"alternatedemandsourceitem\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amortizationperiod\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amortizationtemplate\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"assetaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"atpmethod\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"autoexpandkitforrevenuemgmt\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"averagecost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"backwardconsumptiondays\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"billexchratevarianceacct\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"billingschedule\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"billpricevarianceacct\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"billqtyvarianceacct\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"buildentireassembly\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"buildtime\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"class\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"consumptionunit\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"copydescription\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"costestimate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"costestimatetype\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"costingmethod\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"costingmethoddisplay\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"countryofmanufacture\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"createddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"createexpenseplanson\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"createjob\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"createrevenueplanson\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"deferralaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"deferredrevenueaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"deferrevrec\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"demandmodifier\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"demandsource\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"demandtimefence\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"department\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"directrevenueposting\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"displayname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"dropshipexpenseaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"enforceminqtyinternally\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"excludefromsitemap\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"expenseaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"expenseamortizationrule\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"externalid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fixedlotsize\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"forwardconsumptiondays\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"froogleproductfeed\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fullname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fxcost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"gainlossaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"generateaccruals\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"handlingcost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"includechildren\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"incomeaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"intercodefrevaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"intercoexpenseaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"intercoincomeaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"isdropshipitem\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isfulfillable\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"islotitem\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isonline\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isphantom\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isserialitem\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isspecialorderitem\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isspecialworkorderitem\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"itemid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"itemrevenuecategory\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"itemtype\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"lastpurchaseprice\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"leadtime\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"location\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"manufacturer\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"matchbilltoreceipt\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"matrixitemnametemplate\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"matrixtype\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"maximumquantity\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"minimumquantity\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"mpn\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"nextagcategory\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"nextagproductfeed\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"overallquantitypricingtype\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"periodiclotsizedays\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"periodiclotsizetype\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"preferredlocation\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"pricinggroup\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"printitems\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"prodpricevarianceacct\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"prodqtyvarianceacct\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"projectexpensetype\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"projecttemplate\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"purchasedescription\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"purchaseorderamount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchaseorderquantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchaseorderquantitydiff\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchasepricevarianceacct\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"purchaseunit\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"quantitypricingschedule\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"receiptamount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"receiptquantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"receiptquantitydiff\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"relateditemsdescription\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"rescheduleindays\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"rescheduleoutdays\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"residual\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"revenueallocationgroup\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"revenuerecognitionrule\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"revrecforecastrule\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"revreclassfxaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"roundupascomponent\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"safetystocklevel\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"saleunit\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"scrapacct\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"searchkeywords\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"seasonaldemand\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipindividually\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shippackage\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"shippingcost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"shoppingdotcomcategory\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shoppingproductfeed\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shopzillacategoryid\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"shopzillaproductfeed\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sitemappriority\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"stockdescription\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"stockunit\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"storedescription\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"storedisplayimage\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"storedisplayname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"storedisplaythumbnail\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"subsidiary\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subtype\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"supplylotsizingmethod\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"supplyreplenishmentmethod\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"supplytimefence\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"supplytype\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"totalquantityonhand\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"totalvalue\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transferprice\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"unbuildvarianceaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"unitstype\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"upccode\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"usebins\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"usemarginalrates\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vendorname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vendreturnvarianceaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"vsoedelivered\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vsoepermitdiscount\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vsoesopgroup\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"weight\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"weightunit\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"weightunits\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"wipacct\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"wipvarianceacct\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"yahooproductfeed\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.4113731}, "macro.netsuite_source.get_transaction_lines_columns": {"unique_id": "macro.netsuite_source.get_transaction_lines_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_transaction_lines_columns.sql", "original_file_path": "macros/get_transaction_lines_columns.sql", "name": "get_transaction_lines_columns", "macro_sql": "{% macro get_transaction_lines_columns() %}\n\n{% set columns = [\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"class_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"company_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"department_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"item_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"location_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"memo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"non_posting_line\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subsidiary_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transaction_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transaction_line_id\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('transaction_lines_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.413451}, "macro.netsuite_source.get_netsuite2_transaction_lines_columns": {"unique_id": "macro.netsuite_source.get_netsuite2_transaction_lines_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_transaction_lines_columns.sql", "original_file_path": "macros/get_transaction_lines_columns.sql", "name": "get_netsuite2_transaction_lines_columns", "macro_sql": "{% macro get_netsuite2_transaction_lines_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"transaction\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"linesequencenumber\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"memo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"entity\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"item\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"class\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"location\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"subsidiary\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"department\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"isclosed\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isbillable\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"iscogs\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cleared\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"commitmentfirm\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"mainline\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"taxline\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('transaction_lines_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.415275}, "macro.netsuite_source.get_vendors_columns": {"unique_id": "macro.netsuite_source.get_vendors_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_vendors_columns.sql", "original_file_path": "macros/get_vendors_columns.sql", "name": "get_vendors_columns", "macro_sql": "{% macro get_vendors_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_owner\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"accountnumber\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"accounts_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"annual_revenue\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"auto_renewals\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"auto_send_statements\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billaddress\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_class_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"comments\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"companyname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"create_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creditlimit\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"dic\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email_bill_payment_vouchers\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email_cash_sales\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email_credit_notes\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email_invoices\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email_item_fulfilments\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email_purchase_orders\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email_quotes\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email_sales_orders\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email_statements\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"employee_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exemption_certificate_no\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"expense_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"fax\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"full_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"home_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"hris_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ico\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id_number_in_the_country_of_r\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id_type_in_the_country_of_r_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"in_transit_balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"incoterm\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"industry_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"invoice_via_procurement_syste\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoicing_details\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is1099eligible\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_partner\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_person\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isemailhtml\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isemailpdf\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"labor_cost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"last_modified_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"last_sales_activity\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"line1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"line2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"line3\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"loginaccess\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lsa_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lsa_link_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"mobile_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"msa_effective_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"no__of_employees\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"openbalance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"openbalance_foreign\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"payables_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"payment_terms_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"prepayment_balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"printoncheckas\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"purchaseorderamount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchaseorderquantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchaseorderquantitydiff\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchases_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"receiptamount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"receiptquantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"receiptquantitydiff\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"represents_subsidiary_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"restrict_access_to_expensify\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"salesforce_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipaddress\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subsidiary\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"tax_contact_first_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_contact_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"tax_contact_last_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_contact_middle_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"taxidnum\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"time_approver_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transactions_need_approval\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"uen\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unbilled_orders\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"unbilled_orders_foreign\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vat_registration_no\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vendor_extid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"vendor_type_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"zipcode\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.4316611}, "macro.netsuite_source.get_netsuite2_vendors_columns": {"unique_id": "macro.netsuite_source.get_netsuite2_vendors_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_vendors_columns.sql", "original_file_path": "macros/get_vendors_columns.sql", "name": "get_netsuite2_vendors_columns", "macro_sql": "{% macro get_netsuite2_vendors_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"accountnumber\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"altemail\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"altname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"altphone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"balanceprimary\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"billingclass\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"category\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"comments\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"companyname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"contact\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"contactlist\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"creditlimit\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"datecreated\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"defaultbankaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"defaultbillingaddress\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"defaultshippingaddress\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"defaultvendorpaymentaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"emailpreference\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"emailtransactions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"entityid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"entitynumber\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"entitytitle\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"expenseaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"externalid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fax\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"faxtransactions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"firstname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"giveaccess\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"homephone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"incoterm\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"isautogeneratedrepresentingentity\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isjobresourcevend\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isperson\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"laborcost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"lastname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"legalname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"middlename\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"mobilephone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payablesaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"printoncheckas\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"printtransactions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"purchaseorderamount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchaseorderquantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchaseorderquantitydiff\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"receiptamount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"receiptquantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"receiptquantitydiff\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"representingsubsidiary\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"rolesforsearch\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"salutation\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subsidiaryedition\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"terms\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unbilledorders\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"unbilledordersprimary\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"workcalendar\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.4375072}, "macro.netsuite_source.get_transactionaccountingline_columns": {"unique_id": "macro.netsuite_source.get_transactionaccountingline_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_transactionaccountingline_columns.sql", "original_file_path": "macros/get_transactionaccountingline_columns.sql", "name": "get_transactionaccountingline_columns", "macro_sql": "{% macro get_transactionaccountingline_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"accountingbook\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"amountlinked\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"amountpaid\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"amountunpaid\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"credit\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"debit\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"exchangerate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"netamount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"overheadparentitem\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"paymentamountunused\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"paymentamountused\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"posting\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transaction\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"transactionline\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.4396942}, "macro.netsuite_source.get_netsuite2_transaction_accounting_lines_columns": {"unique_id": "macro.netsuite_source.get_netsuite2_transaction_accounting_lines_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_transaction_accounting_lines_columns.sql", "original_file_path": "macros/get_transaction_accounting_lines_columns.sql", "name": "get_netsuite2_transaction_accounting_lines_columns", "macro_sql": "{% macro get_netsuite2_transaction_accounting_lines_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"accountingbook\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"amountpaid\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"amountunpaid\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"credit\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"debit\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"exchangerate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"netamount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"paymentamountunused\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"paymentamountused\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"posting\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transaction\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"transactionline\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.4416199}, "macro.netsuite_source.get_vendorcategory_columns": {"unique_id": "macro.netsuite_source.get_vendorcategory_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_vendorcategory_columns.sql", "original_file_path": "macros/get_vendorcategory_columns.sql", "name": "get_vendorcategory_columns", "macro_sql": "{% macro get_vendorcategory_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"externalid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"istaxagency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.442732}, "macro.netsuite_source.get_accounttype_columns": {"unique_id": "macro.netsuite_source.get_accounttype_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_accounttype_columns.sql", "original_file_path": "macros/get_accounttype_columns.sql", "name": "get_accounttype_columns", "macro_sql": "{% macro get_accounttype_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"balancesheet\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"defaultcashflowratetype\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"defaultgeneralratetype\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"eliminationalgo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"includeinrevaldefault\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"internalid\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"left\", \"datatype\": dbt_utils.type_string(), \"quote\": True},\n    {\"name\": \"longname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"seqnum\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"usercanchangerevaloption\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.444396}, "macro.netsuite_source.get_accounting_books_columns": {"unique_id": "macro.netsuite_source.get_accounting_books_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_accounting_books_columns.sql", "original_file_path": "macros/get_accounting_books_columns.sql", "name": "get_accounting_books_columns", "macro_sql": "{% macro get_accounting_books_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"accounting_book_extid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"accounting_book_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"accounting_book_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"base_book_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"date_created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"effective_period_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"form_template_component_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"form_template_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"is_adjustment_only\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_arrangement_level_reclass\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_consolidated\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_contingent_revenue_handling\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_include_child_subsidiaries\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_primary\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_two_step_revenue_allocation\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unbilled_receivable_grouping\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.447118}, "macro.netsuite_source.get_netsuite2_accounting_books_columns": {"unique_id": "macro.netsuite_source.get_netsuite2_accounting_books_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_accounting_books_columns.sql", "original_file_path": "macros/get_accounting_books_columns.sql", "name": "get_netsuite2_accounting_books_columns", "macro_sql": "{% macro get_netsuite2_accounting_books_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"basebook\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"contingentrevenuehandling\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"effectiveperiod\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"externalid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"isadjustmentonly\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isconsolidated\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isprimary\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subsidiariesstring\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"twosteprevenueallocation\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unbilledreceivablegrouping\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.4486442}, "macro.netsuite_source.get_departments_columns": {"unique_id": "macro.netsuite_source.get_departments_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_departments_columns.sql", "original_file_path": "macros/get_departments_columns.sql", "name": "get_departments_columns", "macro_sql": "{% macro get_departments_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"department_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"full_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('departments_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.449568}, "macro.netsuite_source.get_netsuite2_departments_columns": {"unique_id": "macro.netsuite_source.get_netsuite2_departments_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_departments_columns.sql", "original_file_path": "macros/get_departments_columns.sql", "name": "get_netsuite2_departments_columns", "macro_sql": "{% macro get_netsuite2_departments_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"fullname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"subsidiary\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('departments_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.45045}, "macro.netsuite_source.get_transactions_columns": {"unique_id": "macro.netsuite_source.get_transactions_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_transactions_columns.sql", "original_file_path": "macros/get_transactions_columns.sql", "name": "get_transactions_columns", "macro_sql": "{% macro get_transactions_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"accounting_period_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"due_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"is_advanced_intercompany\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_intercompany\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"trandate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"transaction_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transaction_type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('transactions_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.452147}, "macro.netsuite_source.get_netsuite2_transactions_columns": {"unique_id": "macro.netsuite_source.get_netsuite2_transactions_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_transactions_columns.sql", "original_file_path": "macros/get_transactions_columns.sql", "name": "get_netsuite2_transactions_columns", "macro_sql": "{% macro get_netsuite2_transactions_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"transactionnumber\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"memo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"trandate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"createddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"duedate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"closedate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"entity\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"postingperiod\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"posting\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"intercoadj\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isreversal\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('transactions_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.45382}, "macro.netsuite_source.get_entity_columns": {"unique_id": "macro.netsuite_source.get_entity_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_entity_columns.sql", "original_file_path": "macros/get_entity_columns.sql", "name": "get_entity_columns", "macro_sql": "{% macro get_entity_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"altemail\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"altname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"altphone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"comments\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"contact\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"customer\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"datecreated\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"employee\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"entityid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"entitynumber\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"entitytitle\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"externalid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fax\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"firstname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"genericresource\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"homephone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isperson\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"laborcost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"lastname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"middlename\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"mobilephone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"othername\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"parent\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"partner\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"project\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"projecttemplate\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"salutation\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"toplevelparent\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vendor\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.4582112}, "macro.netsuite_source.get_accounting_periods_columns": {"unique_id": "macro.netsuite_source.get_accounting_periods_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_accounting_periods_columns.sql", "original_file_path": "macros/get_accounting_periods_columns.sql", "name": "get_accounting_periods_columns", "macro_sql": "{% macro get_accounting_periods_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"accounting_period_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"closed\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"closed_accounts_payable\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"closed_accounts_receivable\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"closed_all\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"closed_on\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"closed_payroll\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ending\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"fiscal_calendar_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"fivetran_index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"full_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_adjustment\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"locked_accounts_payable\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"locked_accounts_receivable\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"locked_all\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"locked_payroll\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"quarter\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"starting\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"year_0\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"year_id\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.461793}, "macro.netsuite_source.get_netsuite2_accounting_periods_columns": {"unique_id": "macro.netsuite_source.get_netsuite2_accounting_periods_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_accounting_periods_columns.sql", "original_file_path": "macros/get_accounting_periods_columns.sql", "name": "get_netsuite2_accounting_periods_columns", "macro_sql": "{% macro get_netsuite2_accounting_periods_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"alllocked\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"allownonglchanges\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"aplocked\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"arlocked\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"closed\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"closedondate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"enddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"isadjust\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isposting\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isquarter\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isyear\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"parent\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"periodname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"startdate\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.463626}, "macro.netsuite_source.get_consolidated_exchange_rates_columns": {"unique_id": "macro.netsuite_source.get_consolidated_exchange_rates_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_consolidated_exchange_rates_columns.sql", "original_file_path": "macros/get_consolidated_exchange_rates_columns.sql", "name": "get_consolidated_exchange_rates_columns", "macro_sql": "{% macro get_consolidated_exchange_rates_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"accounting_book_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"accounting_period_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"average_budget_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"average_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"consolidated_exchange_rate_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"current_budget_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"current_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"from_subsidiary_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"historical_budget_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"historical_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"to_subsidiary_id\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('consolidated_exchange_rates_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.46568}, "macro.netsuite_source.get_netsuite2_consolidated_exchange_rates_columns": {"unique_id": "macro.netsuite_source.get_netsuite2_consolidated_exchange_rates_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_consolidated_exchange_rates_columns.sql", "original_file_path": "macros/get_consolidated_exchange_rates_columns.sql", "name": "get_netsuite2_consolidated_exchange_rates_columns", "macro_sql": "{% macro get_netsuite2_consolidated_exchange_rates_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"averagerate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"currentrate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"fromcurrency\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"fromsubsidiary\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"historicalrate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"postingperiod\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"tocurrency\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"tosubsidiary\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('consolidated_exchange_rates_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_float", "macro.dbt_utils.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.46689}, "macro.netsuite_source.get_income_accounts_columns": {"unique_id": "macro.netsuite_source.get_income_accounts_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_income_accounts_columns.sql", "original_file_path": "macros/get_income_accounts_columns.sql", "name": "get_income_accounts_columns", "macro_sql": "{% macro get_income_accounts_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"comments\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"current_balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"desription\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"full_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"income_account_extid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"income_account_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"is_including_child_subs\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_summary\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"legal_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.468856}, "macro.netsuite_source.get_customers_columns": {"unique_id": "macro.netsuite_source.get_customers_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_customers_columns.sql", "original_file_path": "macros/get_customers_columns.sql", "name": "get_customers_columns", "macro_sql": "{% macro get_customers_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"companyname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_extid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"date_first_order\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"zipcode\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('customers_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_float", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.470458}, "macro.netsuite_source.get_netsuite2_customers_columns": {"unique_id": "macro.netsuite_source.get_netsuite2_customers_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_customers_columns.sql", "original_file_path": "macros/get_customers_columns.sql", "name": "get_netsuite2_customers_columns", "macro_sql": "{% macro get_netsuite2_customers_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"entityid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"externalid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"isperson\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"companyname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"firstname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lastname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"defaultbillingaddress\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"defaultshippingaddress\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"receivablesaccount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"firstorderdate\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('customers_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.472051}, "macro.netsuite_source.get_locations_columns": {"unique_id": "macro.netsuite_source.get_locations_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_locations_columns.sql", "original_file_path": "macros/get_locations_columns.sql", "name": "get_locations_columns", "macro_sql": "{% macro get_locations_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"full_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"location_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('locations_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.473254}, "macro.netsuite_source.get_netsuite2_locations_columns": {"unique_id": "macro.netsuite_source.get_netsuite2_locations_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_locations_columns.sql", "original_file_path": "macros/get_locations_columns.sql", "name": "get_netsuite2_locations_columns", "macro_sql": "{% macro get_netsuite2_locations_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fullname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"mainaddress\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"parent\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"subsidiary\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('locations_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.474139}, "macro.netsuite_source.get_entityaddress_columns": {"unique_id": "macro.netsuite_source.get_entityaddress_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_entityaddress_columns.sql", "original_file_path": "macros/get_entityaddress_columns.sql", "name": "get_entityaddress_columns", "macro_sql": "{% macro get_entityaddress_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"addr1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"addr2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"addr3\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"addressee\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"addrphone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"addrtext\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"attention\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"dropdownstate\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"nkey\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"override\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"recordowner\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"zip\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.4762728}, "macro.netsuite_source.get_vendor_types_columns": {"unique_id": "macro.netsuite_source.get_vendor_types_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_vendor_types_columns.sql", "original_file_path": "macros/get_vendor_types_columns.sql", "name": "get_vendor_types_columns", "macro_sql": "{% macro get_vendor_types_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"vendor_type_extid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vendor_type_id\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.4773052}, "macro.netsuite_source.get_subsidiaries_columns": {"unique_id": "macro.netsuite_source.get_subsidiaries_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_subsidiaries_columns.sql", "original_file_path": "macros/get_subsidiaries_columns.sql", "name": "get_subsidiaries_columns", "macro_sql": "{% macro get_subsidiaries_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"address\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"base_currency_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"branch_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"brn\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"edition\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"federal_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fiscal_calendar_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"full_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_elimination\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_moss\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isinactive_bool\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"legal_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"moss_nexus_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchaseorderamount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchaseorderquantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchaseorderquantitydiff\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"receiptamount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"receiptquantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"receiptquantitydiff\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"return_address\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"return_address1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"return_address2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"return_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"return_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"return_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"return_zipcode\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_zipcode\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"state_tax_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subnav__searchable_subsidiary\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"subsidiary_extid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subsidiary_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"taxonomy_reference_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"tran_num_prefix\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"uen\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"zipcode\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('subsidiaries_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.484065}, "macro.netsuite_source.get_netsuite2_subsidiaries_columns": {"unique_id": "macro.netsuite_source.get_netsuite2_subsidiaries_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_subsidiaries_columns.sql", "original_file_path": "macros/get_subsidiaries_columns.sql", "name": "get_netsuite2_subsidiaries_columns", "macro_sql": "{% macro get_netsuite2_subsidiaries_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fullname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"mainaddress\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fiscalcalendar\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"parent\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('subsidiaries_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.485263}, "macro.netsuite_source.get_job_columns": {"unique_id": "macro.netsuite_source.get_job_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_job_columns.sql", "original_file_path": "macros/get_job_columns.sql", "name": "get_job_columns", "macro_sql": "{% macro get_job_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"accountnumber\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"actualtime\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"allowallresourcesfortasks\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"allowexpenses\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"allowtime\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"alternatecontact\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"altname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billingschedule\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"calculatedenddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"calculatedenddatebaseline\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"category\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"comments\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"companyname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"contact\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"contactlist\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"currencyprecision\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"custentity1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"custentity4\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"custentity5\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"customer\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"datecreated\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"defaultbillingaddress\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"defaultshippingaddress\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"enddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"entityid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"entitynumber\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"entitystatus\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"entitytitle\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"estimatedcost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"estimatedgrossprofit\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"estimatedgrossprofitpercent\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"estimatedlaborcost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"estimatedlaborcostbaseline\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"estimatedlaborrevenue\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"estimatedrevenue\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"estimatedtime\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"estimatedtimeoverride\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"estimatedtimeoverridebaseline\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"externalid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"files\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"forecastchargerunondemand\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fxrate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"includecrmtasksintotals\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isexempttime\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isproductivetime\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isutilizedtime\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"jobbillingtype\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"jobitem\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"jobprice\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"jobtype\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"lastbaselinedate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"limittimetoassignees\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"materializetime\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"percentcomplete\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"percenttimecomplete\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"primarycontact\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"projectedenddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"projectedenddatebaseline\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"projectmanager\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"startdate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"startdatebaseline\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"timeapproval\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"timeremaining\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.4940312}, "macro.netsuite_source.get_currencies_columns": {"unique_id": "macro.netsuite_source.get_currencies_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_currencies_columns.sql", "original_file_path": "macros/get_currencies_columns.sql", "name": "get_currencies_columns", "macro_sql": "{% macro get_currencies_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency_extid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"date_last_modified\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"is_inactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"precision_0\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"symbol\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.4956741}, "macro.netsuite_source.get_netsuite2_currencies_columns": {"unique_id": "macro.netsuite_source.get_netsuite2_currencies_columns", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "macros/get_currencies_columns.sql", "original_file_path": "macros/get_currencies_columns.sql", "name": "get_netsuite2_currencies_columns", "macro_sql": "{% macro get_netsuite2_currencies_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currencyprecision\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date_deleted\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"displaysymbol\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exchangerate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"externalid\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fxrateupdatetimezone\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"includeinfxrateupdates\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isbasecurrency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"isinactive\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lastmodifieddate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"overridecurrencyformat\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"symbol\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"symbolplacement\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.497209}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.497684}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__percentile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.4985979}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.498763}, "macro.fivetran_utils.redshift__percentile": {"unique_id": "macro.fivetran_utils.redshift__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.49892}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.4990761}, "macro.fivetran_utils.postgres__percentile": {"unique_id": "macro.fivetran_utils.postgres__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.499224}, "macro.fivetran_utils.spark__percentile": {"unique_id": "macro.fivetran_utils.spark__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.4993799}, "macro.fivetran_utils.pivot_json_extract": {"unique_id": "macro.fivetran_utils.pivot_json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "name": "pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.49987}, "macro.fivetran_utils.persist_pass_through_columns": {"unique_id": "macro.fivetran_utils.persist_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "name": "persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.500314}, "macro.fivetran_utils.json_parse": {"unique_id": "macro.fivetran_utils.json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.501368}, "macro.fivetran_utils.default__json_parse": {"unique_id": "macro.fivetran_utils.default__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5016088}, "macro.fivetran_utils.redshift__json_parse": {"unique_id": "macro.fivetran_utils.redshift__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5018518}, "macro.fivetran_utils.bigquery__json_parse": {"unique_id": "macro.fivetran_utils.bigquery__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.502084}, "macro.fivetran_utils.postgres__json_parse": {"unique_id": "macro.fivetran_utils.postgres__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5023181}, "macro.fivetran_utils.snowflake__json_parse": {"unique_id": "macro.fivetran_utils.snowflake__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.502576}, "macro.fivetran_utils.spark__json_parse": {"unique_id": "macro.fivetran_utils.spark__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.502906}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.503278}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.503377}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.503472}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5035641}, "macro.fivetran_utils.calculated_fields": {"unique_id": "macro.fivetran_utils.calculated_fields", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "name": "calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.503983}, "macro.fivetran_utils.seed_data_helper": {"unique_id": "macro.fivetran_utils.seed_data_helper", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "name": "seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5046122}, "macro.fivetran_utils.fill_pass_through_columns": {"unique_id": "macro.fivetran_utils.fill_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "name": "fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field.transform_sql %}\n            , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n        {% else %}\n            , {{ field.alias if field.alias else field.name }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5052679}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.505772}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5059001}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.506027}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.506149}, "macro.fivetran_utils.spark__string_agg": {"unique_id": "macro.fivetran_utils.spark__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5062752}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5089478}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5091069}, "macro.fivetran_utils.redshift__timestamp_diff": {"unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.50926}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.509411}, "macro.fivetran_utils.postgres__timestamp_diff": {"unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.511256}, "macro.fivetran_utils.try_cast": {"unique_id": "macro.fivetran_utils.try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5121121}, "macro.fivetran_utils.default__safe_cast": {"unique_id": "macro.fivetran_utils.default__safe_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.512256}, "macro.fivetran_utils.redshift__try_cast": {"unique_id": "macro.fivetran_utils.redshift__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.512528}, "macro.fivetran_utils.postgres__try_cast": {"unique_id": "macro.fivetran_utils.postgres__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.512804}, "macro.fivetran_utils.snowflake__try_cast": {"unique_id": "macro.fivetran_utils.snowflake__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.512931}, "macro.fivetran_utils.bigquery__try_cast": {"unique_id": "macro.fivetran_utils.bigquery__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.513055}, "macro.fivetran_utils.spark__try_cast": {"unique_id": "macro.fivetran_utils.spark__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.513175}, "macro.fivetran_utils.source_relation": {"unique_id": "macro.fivetran_utils.source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5137122}, "macro.fivetran_utils.default__source_relation": {"unique_id": "macro.fivetran_utils.default__source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt_utils.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.514276}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5148091}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.515008}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5152278}, "macro.fivetran_utils.add_dbt_source_relation": {"unique_id": "macro.fivetran_utils.add_dbt_source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "name": "add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.515556}, "macro.fivetran_utils.add_pass_through_columns": {"unique_id": "macro.fivetran_utils.add_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "name": "add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n      {% if column.alias %}\n\n      {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n\n      {% else %}\n\n      {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n        \n      {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5164218}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.520311}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5206668}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.52111}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.522635}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.523177}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5237918}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.523943}, "macro.fivetran_utils.snowflake__json_extract": {"unique_id": "macro.fivetran_utils.snowflake__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.524092}, "macro.fivetran_utils.redshift__json_extract": {"unique_id": "macro.fivetran_utils.redshift__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.524257}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.524408}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5245519}, "macro.fivetran_utils.collect_freshness": {"unique_id": "macro.fivetran_utils.collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.525277}, "macro.fivetran_utils.default__collect_freshness": {"unique_id": "macro.fivetran_utils.default__collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.526248}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5269608}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.527123}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.527275}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5274282}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.52758}, "macro.fivetran_utils.spark__timestamp_add": {"unique_id": "macro.fivetran_utils.spark__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt_utils.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.527756}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.528063}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.528162}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5282612}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5290098}, "macro.fivetran_utils.union_data": {"unique_id": "macro.fivetran_utils.union_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.530217}, "macro.fivetran_utils.default__union_data": {"unique_id": "macro.fivetran_utils.default__union_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "default__union_data", "macro_sql": "{% macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) %}\n\n{% if var(union_schema_variable, none) %}\n\n    {% set relations = [] %}\n    \n    {% if var(union_schema_variable) is string %}\n    {% set trimmed = var(union_schema_variable)|trim('[')|trim(']') %}\n    {% set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") %}\n    {% else %}\n    {% set schemas = var(union_schema_variable) %}\n    {% endif %}\n\n    {% for schema in var(union_schema_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=var(database_variable, default_database),\n        schema=schema,\n        identifier=table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var(union_database_variable, none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var(union_database_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=database,\n        schema=var(schema_variable, default_schema),\n        identifier=table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.5319521}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.533403}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.533741}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.533838}, "macro.fivetran_utils.redshift__array_agg": {"unique_id": "macro.fivetran_utils.redshift__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.533934}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.534379}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1658868250.534824}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "netsuite_source.account_periods_table": {"unique_id": "netsuite_source.account_periods_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "account_periods_table", "block_contents": "Table detailing all accounting periods, including monthly, quarterly and yearly."}, "netsuite_source.accounting_books_table": {"unique_id": "netsuite_source.accounting_books_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "accounting_books_table", "block_contents": "Table detailing all accounting books set up in Netsuite."}, "netsuite_source.accounts_table": {"unique_id": "netsuite_source.accounts_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "accounts_table", "block_contents": "Table detailing all accounts set up in Netsuite."}, "netsuite_source.classes_table": {"unique_id": "netsuite_source.classes_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "classes_table", "block_contents": "Table detailing all classes set up in Netsuite."}, "netsuite_source.consolidated_exchange_rates_table": {"unique_id": "netsuite_source.consolidated_exchange_rates_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "consolidated_exchange_rates_table", "block_contents": "Table detailing average, historical and current exchange rates for all accounting periods."}, "netsuite_source.customers_table": {"unique_id": "netsuite_source.customers_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "customers_table", "block_contents": "Table detailing all customer information."}, "netsuite_source.currencies_table": {"unique_id": "netsuite_source.currencies_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "currencies_table", "block_contents": "Table detailing all currency information."}, "netsuite_source.departments_table": {"unique_id": "netsuite_source.departments_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "departments_table", "block_contents": "Table detailing all departments set up in Netsuite."}, "netsuite_source.expense_accounts_table": {"unique_id": "netsuite_source.expense_accounts_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "expense_accounts_table", "block_contents": "Table detailing all expense accounts."}, "netsuite_source.income_accounts_table": {"unique_id": "netsuite_source.income_accounts_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "income_accounts_table", "block_contents": "Table detailing all income accounts."}, "netsuite_source.items_table": {"unique_id": "netsuite_source.items_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "items_table", "block_contents": "Table detailing information about the items created in Netsuite."}, "netsuite_source.locations_table": {"unique_id": "netsuite_source.locations_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "locations_table", "block_contents": "Table detailing all locations, including store, warehouse and office locations."}, "netsuite_source.subsidiaries_table": {"unique_id": "netsuite_source.subsidiaries_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "subsidiaries_table", "block_contents": "Table detailing all subsidiaries."}, "netsuite_source.transaction_lines_table": {"unique_id": "netsuite_source.transaction_lines_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "transaction_lines_table", "block_contents": "A table detailing all transaction lines for all transactions."}, "netsuite_source.transaction_table": {"unique_id": "netsuite_source.transaction_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "transaction_table", "block_contents": "A table detailing all transactions."}, "netsuite_source.vendor_types_table": {"unique_id": "netsuite_source.vendor_types_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "vendor_types_table", "block_contents": "A table detailing all the various types of vendors."}, "netsuite_source.vendor_table": {"unique_id": "netsuite_source.vendor_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "vendor_table", "block_contents": "A table detailing all vendor information."}, "netsuite_source.entities_table": {"unique_id": "netsuite_source.entities_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "entities_table", "block_contents": "Table detailing all entities in Netsuite."}, "netsuite_source.jobs_table": {"unique_id": "netsuite_source.jobs_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "jobs_table", "block_contents": "Table detailing all jobs."}, "netsuite_source.transaction_accounting_lines_table": {"unique_id": "netsuite_source.transaction_accounting_lines_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "transaction_accounting_lines_table", "block_contents": "A table detailing all transaction lines for all transactions."}, "netsuite_source.vendor_categories_table": {"unique_id": "netsuite_source.vendor_categories_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "vendor_categories_table", "block_contents": "A table containing categories and how they map to vendors."}, "netsuite_source.accounting_book_subsidiaries_table": {"unique_id": "netsuite_source.accounting_book_subsidiaries_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "accounting_book_subsidiaries_table", "block_contents": "A table containing the various account books and the respective subsidiaries."}, "netsuite_source.accounting_period_fiscal_calendars_table": {"unique_id": "netsuite_source.accounting_period_fiscal_calendars_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "accounting_period_fiscal_calendars_table", "block_contents": "A table containing the accounting fiscal calendar periods."}, "netsuite_source.account_types_table": {"unique_id": "netsuite_source.account_types_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "account_types_table", "block_contents": "A table containing the various account types within Netsuite."}, "netsuite_source.entity_address_table": {"unique_id": "netsuite_source.entity_address_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "entity_address_table", "block_contents": "A table containing addresses and the various entities which they map."}, "netsuite_source.location_main_address_table": {"unique_id": "netsuite_source.location_main_address_table", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "location_main_address_table", "block_contents": "A table containing the location main addresses."}, "netsuite_source._fivetran_id": {"unique_id": "netsuite_source._fivetran_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_id", "block_contents": "Unique ID used by Fivetran to sync and dedupe data."}, "netsuite_source._fivetran_synced": {"unique_id": "netsuite_source._fivetran_synced", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "Timestamp of when a record was last synced."}, "netsuite_source._fivetran_deleted": {"unique_id": "netsuite_source._fivetran_deleted", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_deleted", "block_contents": "Timestamp of when a record was deleted."}, "netsuite_source.vendor_id": {"unique_id": "netsuite_source.vendor_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "vendor_id", "block_contents": "The unique identifier of the vendor."}, "netsuite_source.company_name": {"unique_id": "netsuite_source.company_name", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "company_name", "block_contents": "Name of the company."}, "netsuite_source.create_date_at": {"unique_id": "netsuite_source.create_date_at", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "create_date_at", "block_contents": "Timestamp of the record creation."}, "netsuite_source.vendor_category_id": {"unique_id": "netsuite_source.vendor_category_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "vendor_category_id", "block_contents": "Unique identifier of the vendor category."}, "netsuite_source.accounting_period_id": {"unique_id": "netsuite_source.accounting_period_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "accounting_period_id", "block_contents": "The accounting period id of the accounting period which the transaction took place in."}, "netsuite_source.created_at": {"unique_id": "netsuite_source.created_at", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "created_at", "block_contents": "Timestamp of when the record was created."}, "netsuite_source.currency_id": {"unique_id": "netsuite_source.currency_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "currency_id", "block_contents": "The currency id of the currency used within the record."}, "netsuite_source.entity_id": {"unique_id": "netsuite_source.entity_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "entity_id", "block_contents": "The entity id of the entity used for the record."}, "netsuite_source.transaction_id": {"unique_id": "netsuite_source.transaction_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "transaction_id", "block_contents": "The transaction id of referenced for the record."}, "netsuite_source.department_id": {"unique_id": "netsuite_source.department_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "department_id", "block_contents": "The unique identifier of the department used for the record."}, "netsuite_source.subsidiary_id": {"unique_id": "netsuite_source.subsidiary_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "subsidiary_id", "block_contents": "The unique identifier of the subsidiary used for the record."}, "netsuite_source.location_id": {"unique_id": "netsuite_source.location_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "location_id", "block_contents": "The unique identifier of the location used for the record."}, "netsuite_source.class_id": {"unique_id": "netsuite_source.class_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "class_id", "block_contents": "The unique identifier of the class used for the record."}, "netsuite_source.item_id": {"unique_id": "netsuite_source.item_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "item_id", "block_contents": "The unique identifier of the item used within the record."}, "netsuite_source.fiscal_calendar_id": {"unique_id": "netsuite_source.fiscal_calendar_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "fiscal_calendar_id", "block_contents": "Reference to the fiscal calendar used for the record."}, "netsuite_source.main_address_id": {"unique_id": "netsuite_source.main_address_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "main_address_id", "block_contents": "Reference to the main address used for the record."}, "netsuite_source.addr1": {"unique_id": "netsuite_source.addr1", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "addr1", "block_contents": "The associated address 1."}, "netsuite_source.addr2": {"unique_id": "netsuite_source.addr2", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "addr2", "block_contents": "The associated address 2."}, "netsuite_source.addr3": {"unique_id": "netsuite_source.addr3", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "addr3", "block_contents": "The associated address 3."}, "netsuite_source.addressee": {"unique_id": "netsuite_source.addressee", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "addressee", "block_contents": "The individual associated with the address"}, "netsuite_source.full_address": {"unique_id": "netsuite_source.full_address", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "full_address", "block_contents": "The full address associated."}, "netsuite_source.city": {"unique_id": "netsuite_source.city", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "city", "block_contents": "The associated city."}, "netsuite_source.country": {"unique_id": "netsuite_source.country", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "country", "block_contents": "The associated country."}, "netsuite_source.state": {"unique_id": "netsuite_source.state", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "state", "block_contents": "The associated state."}, "netsuite_source.nkey": {"unique_id": "netsuite_source.nkey", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "nkey", "block_contents": "The associated Netsuite key."}, "netsuite_source.zipcode": {"unique_id": "netsuite_source.zipcode", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "zipcode", "block_contents": "The associated zipcode."}, "netsuite_source.customer_id": {"unique_id": "netsuite_source.customer_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "customer_id", "block_contents": "Unique identifier of the customer."}, "netsuite_source.accounting_book_id": {"unique_id": "netsuite_source.accounting_book_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "accounting_book_id", "block_contents": "Unique identifier of the accounting book."}, "netsuite_source.account_type_id": {"unique_id": "netsuite_source.account_type_id", "package_name": "netsuite_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/netsuite/dbt_netsuite_source/integration_tests/dbt_packages/netsuite_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "account_type_id", "block_contents": "Unique identifier of thea account type."}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"seed.netsuite_source_integration_tests.netsuite2_currency_data": [], "seed.netsuite_source_integration_tests.netsuite_vendors_data": [], "seed.netsuite_source_integration_tests.netsuite2_classification_data": [], "seed.netsuite_source_integration_tests.netsuite_accounting_books_data": [], "seed.netsuite_source_integration_tests.netsuite2_entities_data": [], "seed.netsuite_source_integration_tests.netsuite2_vendor_data": [], "seed.netsuite_source_integration_tests.netsuite_consolidated_exchange_rates_data": [], "seed.netsuite_source_integration_tests.netsuite_customers_data": [], "seed.netsuite_source_integration_tests.netsuite_locations_data": [], "seed.netsuite_source_integration_tests.netsuite2_transaction_line_data": [], "seed.netsuite_source_integration_tests.netsuite2_account_data": [], "seed.netsuite_source_integration_tests.netsuite_items_data": [], "seed.netsuite_source_integration_tests.netsuite2_subsidiary_data": [], "seed.netsuite_source_integration_tests.netsuite2_account_type_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_period_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_period_fiscal_cal_data": [], "seed.netsuite_source_integration_tests.netsuite_classes_data": [], "seed.netsuite_source_integration_tests.netsuite2_entity_address_data": [], "seed.netsuite_source_integration_tests.netsuite_departments_data": [], "seed.netsuite_source_integration_tests.netsuite2_customer_data": [], "seed.netsuite_source_integration_tests.netsuite2_tran_acct_line_data": [], "seed.netsuite_source_integration_tests.netsuite2_department_data": [], "seed.netsuite_source_integration_tests.netsuite_expense_accounts_data": [], "seed.netsuite_source_integration_tests.netsuite_currencies_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_book_sub_data": [], "seed.netsuite_source_integration_tests.netsuite_accounts_data": [], "seed.netsuite_source_integration_tests.netsuite2_vendor_category_data": [], "seed.netsuite_source_integration_tests.netsuite_accounting_periods_data": [], "seed.netsuite_source_integration_tests.netsuite_subsidiaries_data": [], "seed.netsuite_source_integration_tests.netsuite2_job_data": [], "seed.netsuite_source_integration_tests.netsuite2_transaction_data": [], "seed.netsuite_source_integration_tests.netsuite2_location_data": [], "seed.netsuite_source_integration_tests.netsuite_income_accounts_data": [], "seed.netsuite_source_integration_tests.netsuite2_consolidated_exchange_rate_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_book_data": [], "seed.netsuite_source_integration_tests.netsuite2_location_main_address_data": [], "seed.netsuite_source_integration_tests.netsuite_vendor_types_data": [], "seed.netsuite_source_integration_tests.netsuite2_item_data": [], "seed.netsuite_source_integration_tests.netsuite_transactions_data": [], "seed.netsuite_source_integration_tests.netsuite_transaction_lines_data": [], "model.netsuite_source.stg_netsuite2__transactions": ["model.netsuite_source.stg_netsuite2__transactions_tmp", "model.netsuite_source.stg_netsuite2__transactions_tmp"], "model.netsuite_source.stg_netsuite2__jobs": ["model.netsuite_source.stg_netsuite2__jobs_tmp", "model.netsuite_source.stg_netsuite2__jobs_tmp"], "model.netsuite_source.stg_netsuite2__vendors": ["model.netsuite_source.stg_netsuite2__vendors_tmp", "model.netsuite_source.stg_netsuite2__vendors_tmp"], "model.netsuite_source.stg_netsuite2__classes": ["model.netsuite_source.stg_netsuite2__classes_tmp", "model.netsuite_source.stg_netsuite2__classes_tmp"], "model.netsuite_source.stg_netsuite2__account_types": ["model.netsuite_source.stg_netsuite2__account_types_tmp", "model.netsuite_source.stg_netsuite2__account_types_tmp"], "model.netsuite_source.stg_netsuite2__entities": ["model.netsuite_source.stg_netsuite2__entities_tmp", "model.netsuite_source.stg_netsuite2__entities_tmp"], "model.netsuite_source.stg_netsuite2__accounting_periods": ["model.netsuite_source.stg_netsuite2__accounting_periods_tmp", "model.netsuite_source.stg_netsuite2__accounting_periods_tmp"], "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp", "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp"], "model.netsuite_source.stg_netsuite2__customers": ["model.netsuite_source.stg_netsuite2__customers_tmp", "model.netsuite_source.stg_netsuite2__customers_tmp"], "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp", "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp"], "model.netsuite_source.stg_netsuite2__accounts": ["model.netsuite_source.stg_netsuite2__accounts_tmp", "model.netsuite_source.stg_netsuite2__accounts_tmp"], "model.netsuite_source.stg_netsuite2__transaction_lines": ["model.netsuite_source.stg_netsuite2__transaction_lines_tmp", "model.netsuite_source.stg_netsuite2__transaction_lines_tmp"], "model.netsuite_source.stg_netsuite2__subsidiaries": ["model.netsuite_source.stg_netsuite2__subsidiaries_tmp", "model.netsuite_source.stg_netsuite2__subsidiaries_tmp"], "model.netsuite_source.stg_netsuite2__entity_address": ["model.netsuite_source.stg_netsuite2__entity_address_tmp", "model.netsuite_source.stg_netsuite2__entity_address_tmp"], "model.netsuite_source.stg_netsuite2__location_main_address": ["model.netsuite_source.stg_netsuite2__location_main_address_tmp", "model.netsuite_source.stg_netsuite2__location_main_address_tmp"], "model.netsuite_source.stg_netsuite2__vendor_categories": ["model.netsuite_source.stg_netsuite2__vendor_categories_tmp", "model.netsuite_source.stg_netsuite2__vendor_categories_tmp"], "model.netsuite_source.stg_netsuite2__departments": ["model.netsuite_source.stg_netsuite2__departments_tmp", "model.netsuite_source.stg_netsuite2__departments_tmp"], "model.netsuite_source.stg_netsuite2__transaction_accounting_lines": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp", "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp"], "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp", "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp"], "model.netsuite_source.stg_netsuite2__accounting_books": ["model.netsuite_source.stg_netsuite2__accounting_books_tmp", "model.netsuite_source.stg_netsuite2__accounting_books_tmp"], "model.netsuite_source.stg_netsuite2__items": ["model.netsuite_source.stg_netsuite2__items_tmp", "model.netsuite_source.stg_netsuite2__items_tmp"], "model.netsuite_source.stg_netsuite2__currencies": ["model.netsuite_source.stg_netsuite2__currencies_tmp", "model.netsuite_source.stg_netsuite2__currencies_tmp"], "model.netsuite_source.stg_netsuite2__locations": ["model.netsuite_source.stg_netsuite2__locations_tmp", "model.netsuite_source.stg_netsuite2__locations_tmp"], "model.netsuite_source.stg_netsuite2__subsidiaries_tmp": ["source.netsuite_source.netsuite2.subsidiary"], "model.netsuite_source.stg_netsuite2__transactions_tmp": ["source.netsuite_source.netsuite2.transaction"], "model.netsuite_source.stg_netsuite2__entity_address_tmp": ["source.netsuite_source.netsuite2.entity_address"], "model.netsuite_source.stg_netsuite2__account_types_tmp": ["source.netsuite_source.netsuite2.account_type"], "model.netsuite_source.stg_netsuite2__accounting_periods_tmp": ["source.netsuite_source.netsuite2.accounting_period"], "model.netsuite_source.stg_netsuite2__jobs_tmp": ["source.netsuite_source.netsuite2.job"], "model.netsuite_source.stg_netsuite2__transaction_lines_tmp": ["source.netsuite_source.netsuite2.transaction_line"], "model.netsuite_source.stg_netsuite2__accounts_tmp": ["source.netsuite_source.netsuite2.account"], "model.netsuite_source.stg_netsuite2__customers_tmp": ["source.netsuite_source.netsuite2.customer"], "model.netsuite_source.stg_netsuite2__entities_tmp": ["source.netsuite_source.netsuite2.entity"], "model.netsuite_source.stg_netsuite2__currencies_tmp": ["source.netsuite_source.netsuite2.currency"], "model.netsuite_source.stg_netsuite2__vendors_tmp": ["source.netsuite_source.netsuite2.vendor"], "model.netsuite_source.stg_netsuite2__items_tmp": ["source.netsuite_source.netsuite2.item"], "model.netsuite_source.stg_netsuite2__accounting_books_tmp": ["source.netsuite_source.netsuite2.accounting_book"], "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp": ["source.netsuite_source.netsuite2.accounting_period_fiscal_calendars"], "model.netsuite_source.stg_netsuite2__vendor_categories_tmp": ["source.netsuite_source.netsuite2.vendor_category"], "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp": ["source.netsuite_source.netsuite2.accounting_book_subsidiaries"], "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp": ["source.netsuite_source.netsuite2.transaction_accounting_line"], "model.netsuite_source.stg_netsuite2__location_main_address_tmp": ["source.netsuite_source.netsuite2.location_main_address"], "model.netsuite_source.stg_netsuite2__locations_tmp": ["source.netsuite_source.netsuite2.location"], "model.netsuite_source.stg_netsuite2__departments_tmp": ["source.netsuite_source.netsuite2.department"], "model.netsuite_source.stg_netsuite2__classes_tmp": ["source.netsuite_source.netsuite2.classification"], "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp": ["source.netsuite_source.netsuite2.consolidated_exchange_rate"], "model.netsuite_source.stg_netsuite__transactions": ["model.netsuite_source.stg_netsuite__transactions_tmp", "model.netsuite_source.stg_netsuite__transactions_tmp"], "model.netsuite_source.stg_netsuite__customers": ["model.netsuite_source.stg_netsuite__customers_tmp", "model.netsuite_source.stg_netsuite__customers_tmp"], "model.netsuite_source.stg_netsuite__accounting_books": ["model.netsuite_source.stg_netsuite__accounting_books_tmp", "model.netsuite_source.stg_netsuite__accounting_books_tmp"], "model.netsuite_source.stg_netsuite__consolidated_exchange_rates": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp", "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp"], "model.netsuite_source.stg_netsuite__transaction_lines": ["model.netsuite_source.stg_netsuite__transaction_lines_tmp", "model.netsuite_source.stg_netsuite__transaction_lines_tmp"], "model.netsuite_source.stg_netsuite__income_accounts": ["model.netsuite_source.stg_netsuite__income_accounts_tmp", "model.netsuite_source.stg_netsuite__income_accounts_tmp"], "model.netsuite_source.stg_netsuite__expense_accounts": ["model.netsuite_source.stg_netsuite__expense_accounts_tmp", "model.netsuite_source.stg_netsuite__expense_accounts_tmp"], "model.netsuite_source.stg_netsuite__vendors": ["model.netsuite_source.stg_netsuite__vendors_tmp", "model.netsuite_source.stg_netsuite__vendors_tmp"], "model.netsuite_source.stg_netsuite__classes": ["model.netsuite_source.stg_netsuite__classes_tmp", "model.netsuite_source.stg_netsuite__classes_tmp"], "model.netsuite_source.stg_netsuite__subsidiaries": ["model.netsuite_source.stg_netsuite__subsidiaries_tmp", "model.netsuite_source.stg_netsuite__subsidiaries_tmp"], "model.netsuite_source.stg_netsuite__accounts": ["model.netsuite_source.stg_netsuite__accounts_tmp", "model.netsuite_source.stg_netsuite__accounts_tmp"], "model.netsuite_source.stg_netsuite__items": ["model.netsuite_source.stg_netsuite__items_tmp", "model.netsuite_source.stg_netsuite__items_tmp"], "model.netsuite_source.stg_netsuite__locations": ["model.netsuite_source.stg_netsuite__locations_tmp", "model.netsuite_source.stg_netsuite__locations_tmp"], "model.netsuite_source.stg_netsuite__departments": ["model.netsuite_source.stg_netsuite__departments_tmp", "model.netsuite_source.stg_netsuite__departments_tmp"], "model.netsuite_source.stg_netsuite__currencies": ["model.netsuite_source.stg_netsuite__currencies_tmp", "model.netsuite_source.stg_netsuite__currencies_tmp"], "model.netsuite_source.stg_netsuite__vendor_types": ["model.netsuite_source.stg_netsuite__vendor_types_tmp", "model.netsuite_source.stg_netsuite__vendor_types_tmp"], "model.netsuite_source.stg_netsuite__accounting_periods": ["model.netsuite_source.stg_netsuite__accounting_periods_tmp", "model.netsuite_source.stg_netsuite__accounting_periods_tmp"], "model.netsuite_source.stg_netsuite__accounting_periods_tmp": ["source.netsuite_source.netsuite.accounting_periods"], "model.netsuite_source.stg_netsuite__accounting_books_tmp": ["source.netsuite_source.netsuite.accounting_books"], "model.netsuite_source.stg_netsuite__customers_tmp": ["source.netsuite_source.netsuite.customers"], "model.netsuite_source.stg_netsuite__transaction_lines_tmp": ["source.netsuite_source.netsuite.transaction_lines"], "model.netsuite_source.stg_netsuite__income_accounts_tmp": ["source.netsuite_source.netsuite.income_accounts"], "model.netsuite_source.stg_netsuite__accounts_tmp": ["source.netsuite_source.netsuite.accounts"], "model.netsuite_source.stg_netsuite__departments_tmp": ["source.netsuite_source.netsuite.departments"], "model.netsuite_source.stg_netsuite__currencies_tmp": ["source.netsuite_source.netsuite.currencies"], "model.netsuite_source.stg_netsuite__vendor_types_tmp": ["source.netsuite_source.netsuite.vendor_types"], "model.netsuite_source.stg_netsuite__vendors_tmp": ["source.netsuite_source.netsuite.vendors"], "model.netsuite_source.stg_netsuite__locations_tmp": ["source.netsuite_source.netsuite.locations"], "model.netsuite_source.stg_netsuite__items_tmp": ["source.netsuite_source.netsuite.items"], "model.netsuite_source.stg_netsuite__subsidiaries_tmp": ["source.netsuite_source.netsuite.subsidiaries"], "model.netsuite_source.stg_netsuite__transactions_tmp": ["source.netsuite_source.netsuite.transactions"], "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp": ["source.netsuite_source.netsuite.consolidated_exchange_rates"], "model.netsuite_source.stg_netsuite__classes_tmp": ["source.netsuite_source.netsuite.classes"], "model.netsuite_source.stg_netsuite__expense_accounts_tmp": ["source.netsuite_source.netsuite.expense_accounts"], "test.netsuite_source.unique_stg_netsuite__accounting_books_accounting_book_id.22e0106417": ["model.netsuite_source.stg_netsuite__accounting_books"], "test.netsuite_source.not_null_stg_netsuite__accounting_books_accounting_book_id.12972ee6fc": ["model.netsuite_source.stg_netsuite__accounting_books"], "test.netsuite_source.not_null_stg_netsuite__accounting_periods_accounting_period_id.5c1c46821c": ["model.netsuite_source.stg_netsuite__accounting_periods"], "test.netsuite_source.not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.8d75190563": ["model.netsuite_source.stg_netsuite__accounting_periods"], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id.43005ecb69": ["model.netsuite_source.stg_netsuite__accounting_periods"], "test.netsuite_source.unique_stg_netsuite__accounts_account_id.e94563d281": ["model.netsuite_source.stg_netsuite__accounts"], "test.netsuite_source.not_null_stg_netsuite__accounts_account_id.f03cddbace": ["model.netsuite_source.stg_netsuite__accounts"], "test.netsuite_source.unique_stg_netsuite__classes_class_id.c63c54840b": ["model.netsuite_source.stg_netsuite__classes"], "test.netsuite_source.not_null_stg_netsuite__classes_class_id.462bfda765": ["model.netsuite_source.stg_netsuite__classes"], "test.netsuite_source.unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.2ca94ecb54": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates"], "test.netsuite_source.not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.83de8c8e97": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates"], "test.netsuite_source.unique_stg_netsuite__currencies_currency_id.09ab867f2c": ["model.netsuite_source.stg_netsuite__currencies"], "test.netsuite_source.not_null_stg_netsuite__currencies_currency_id.e8b331ffb3": ["model.netsuite_source.stg_netsuite__currencies"], "test.netsuite_source.unique_stg_netsuite__customers_customer_id.7c9debe8d9": ["model.netsuite_source.stg_netsuite__customers"], "test.netsuite_source.not_null_stg_netsuite__customers_customer_id.bbb9eed2dc": ["model.netsuite_source.stg_netsuite__customers"], "test.netsuite_source.unique_stg_netsuite__departments_department_id.2df16a9aa1": ["model.netsuite_source.stg_netsuite__departments"], "test.netsuite_source.not_null_stg_netsuite__departments_department_id.6d96b00002": ["model.netsuite_source.stg_netsuite__departments"], "test.netsuite_source.unique_stg_netsuite__expense_accounts_expense_account_id.5e813830ff": ["model.netsuite_source.stg_netsuite__expense_accounts"], "test.netsuite_source.not_null_stg_netsuite__expense_accounts_expense_account_id.4de138ed23": ["model.netsuite_source.stg_netsuite__expense_accounts"], "test.netsuite_source.unique_stg_netsuite__income_accounts_income_account_id.28b4166a07": ["model.netsuite_source.stg_netsuite__income_accounts"], "test.netsuite_source.not_null_stg_netsuite__income_accounts_income_account_id.a38311d5f9": ["model.netsuite_source.stg_netsuite__income_accounts"], "test.netsuite_source.unique_stg_netsuite__items_item_id.760a674654": ["model.netsuite_source.stg_netsuite__items"], "test.netsuite_source.not_null_stg_netsuite__items_item_id.ba322d7da3": ["model.netsuite_source.stg_netsuite__items"], "test.netsuite_source.unique_stg_netsuite__locations_location_id.3857e2cac2": ["model.netsuite_source.stg_netsuite__locations"], "test.netsuite_source.not_null_stg_netsuite__locations_location_id.9f68ecaa6b": ["model.netsuite_source.stg_netsuite__locations"], "test.netsuite_source.unique_stg_netsuite__subsidiaries_subsidiary_id.7d0dfe64f0": ["model.netsuite_source.stg_netsuite__subsidiaries"], "test.netsuite_source.not_null_stg_netsuite__subsidiaries_subsidiary_id.9aa9c2d015": ["model.netsuite_source.stg_netsuite__subsidiaries"], "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_id.e8055d67bc": ["model.netsuite_source.stg_netsuite__transaction_lines"], "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_line_id.420bd8637c": ["model.netsuite_source.stg_netsuite__transaction_lines"], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id.651bc3120d": ["model.netsuite_source.stg_netsuite__transaction_lines"], "test.netsuite_source.unique_stg_netsuite__transactions_transaction_id.fd6bd3af79": ["model.netsuite_source.stg_netsuite__transactions"], "test.netsuite_source.not_null_stg_netsuite__transactions_transaction_id.9439fe1532": ["model.netsuite_source.stg_netsuite__transactions"], "test.netsuite_source.unique_stg_netsuite__vendor_types_vendor_type_id.6ba4f59b69": ["model.netsuite_source.stg_netsuite__vendor_types"], "test.netsuite_source.not_null_stg_netsuite__vendor_types_vendor_type_id.faed6fe0e9": ["model.netsuite_source.stg_netsuite__vendor_types"], "test.netsuite_source.unique_stg_netsuite__vendors_vendor_id.a981580d39": ["model.netsuite_source.stg_netsuite__vendors"], "test.netsuite_source.not_null_stg_netsuite__vendors_vendor_id.15978cc531": ["model.netsuite_source.stg_netsuite__vendors"], "test.netsuite_source.unique_stg_netsuite2__account_types_account_type_id.aaea9bec0f": ["model.netsuite_source.stg_netsuite2__account_types"], "test.netsuite_source.not_null_stg_netsuite2__account_types_account_type_id.20889967ef": ["model.netsuite_source.stg_netsuite2__account_types"], "test.netsuite_source.unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.27ddb08396": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries"], "test.netsuite_source.not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.76e6e71411": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries"], "test.netsuite_source.unique_stg_netsuite2__accounting_books_accounting_book_id.70d96d1230": ["model.netsuite_source.stg_netsuite2__accounting_books"], "test.netsuite_source.not_null_stg_netsuite2__accounting_books_accounting_book_id.1b7504d30e": ["model.netsuite_source.stg_netsuite2__accounting_books"], "test.netsuite_source.unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.d2038de348": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal"], "test.netsuite_source.not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.ec8750b679": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal"], "test.netsuite_source.unique_stg_netsuite2__accounting_periods_accounting_period_id.a9d8f4c6e1": ["model.netsuite_source.stg_netsuite2__accounting_periods"], "test.netsuite_source.not_null_stg_netsuite2__accounting_periods_accounting_period_id.f2db2c547c": ["model.netsuite_source.stg_netsuite2__accounting_periods"], "test.netsuite_source.unique_stg_netsuite2__accounts_account_id.23a63b3e17": ["model.netsuite_source.stg_netsuite2__accounts"], "test.netsuite_source.not_null_stg_netsuite2__accounts_account_id.5a542e47a2": ["model.netsuite_source.stg_netsuite2__accounts"], "test.netsuite_source.unique_stg_netsuite2__classes_class_id.d069e30c98": ["model.netsuite_source.stg_netsuite2__classes"], "test.netsuite_source.not_null_stg_netsuite2__classes_class_id.799b01ffba": ["model.netsuite_source.stg_netsuite2__classes"], "test.netsuite_source.unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.2d4725bb7a": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates"], "test.netsuite_source.not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.09703507c6": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates"], "test.netsuite_source.unique_stg_netsuite2__currencies_currency_id.50d9c37c78": ["model.netsuite_source.stg_netsuite2__currencies"], "test.netsuite_source.not_null_stg_netsuite2__currencies_currency_id.7eff9f9c1c": ["model.netsuite_source.stg_netsuite2__currencies"], "test.netsuite_source.unique_stg_netsuite2__customers_customer_id.05ca0360f2": ["model.netsuite_source.stg_netsuite2__customers"], "test.netsuite_source.not_null_stg_netsuite2__customers_customer_id.65a5ae302a": ["model.netsuite_source.stg_netsuite2__customers"], "test.netsuite_source.unique_stg_netsuite2__departments_department_id.13e4897f0b": ["model.netsuite_source.stg_netsuite2__departments"], "test.netsuite_source.not_null_stg_netsuite2__departments_department_id.7395bbfe71": ["model.netsuite_source.stg_netsuite2__departments"], "test.netsuite_source.unique_stg_netsuite2__entities_entity_id.f9acd04f50": ["model.netsuite_source.stg_netsuite2__entities"], "test.netsuite_source.not_null_stg_netsuite2__entities_entity_id.f22c18cfa2": ["model.netsuite_source.stg_netsuite2__entities"], "test.netsuite_source.unique_stg_netsuite2__items_item_id.3fcafd9eee": ["model.netsuite_source.stg_netsuite2__items"], "test.netsuite_source.not_null_stg_netsuite2__items_item_id.e216b5b06a": ["model.netsuite_source.stg_netsuite2__items"], "test.netsuite_source.unique_stg_netsuite2__jobs_job_id.c294ea849c": ["model.netsuite_source.stg_netsuite2__jobs"], "test.netsuite_source.not_null_stg_netsuite2__jobs_job_id.d7b5b06b33": ["model.netsuite_source.stg_netsuite2__jobs"], "test.netsuite_source.unique_stg_netsuite2__locations_location_id.f1469a5149": ["model.netsuite_source.stg_netsuite2__locations"], "test.netsuite_source.not_null_stg_netsuite2__locations_location_id.c335a5985e": ["model.netsuite_source.stg_netsuite2__locations"], "test.netsuite_source.unique_stg_netsuite2__subsidiaries_subsidiary_id.8edc974229": ["model.netsuite_source.stg_netsuite2__subsidiaries"], "test.netsuite_source.not_null_stg_netsuite2__subsidiaries_subsidiary_id.0ab6516626": ["model.netsuite_source.stg_netsuite2__subsidiaries"], "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_id.f28afbfa25": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines"], "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id.0f72869807": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines"], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id.34750610bd": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines"], "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_line_id.a82e70adc1": ["model.netsuite_source.stg_netsuite2__transaction_lines"], "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_id.267b150890": ["model.netsuite_source.stg_netsuite2__transaction_lines"], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id.07b823514f": ["model.netsuite_source.stg_netsuite2__transaction_lines"], "test.netsuite_source.unique_stg_netsuite2__transactions_transaction_id.af3d15dce4": ["model.netsuite_source.stg_netsuite2__transactions"], "test.netsuite_source.not_null_stg_netsuite2__transactions_transaction_id.b4f6c6a72b": ["model.netsuite_source.stg_netsuite2__transactions"], "test.netsuite_source.unique_stg_netsuite2__vendor_categories_vendor_category_id.874da088c6": ["model.netsuite_source.stg_netsuite2__vendor_categories"], "test.netsuite_source.not_null_stg_netsuite2__vendor_categories_vendor_category_id.60acd9acb2": ["model.netsuite_source.stg_netsuite2__vendor_categories"], "test.netsuite_source.unique_stg_netsuite2__vendors_vendor_id.415829ac1d": ["model.netsuite_source.stg_netsuite2__vendors"], "test.netsuite_source.not_null_stg_netsuite2__vendors_vendor_id.777b758daf": ["model.netsuite_source.stg_netsuite2__vendors"], "source.netsuite_source.netsuite2.account_type": [], "source.netsuite_source.netsuite2.accounting_book_subsidiaries": [], "source.netsuite_source.netsuite2.accounting_book": [], "source.netsuite_source.netsuite2.accounting_period_fiscal_calendars": [], "source.netsuite_source.netsuite2.accounting_period": [], "source.netsuite_source.netsuite2.account": [], "source.netsuite_source.netsuite2.classification": [], "source.netsuite_source.netsuite2.consolidated_exchange_rate": [], "source.netsuite_source.netsuite2.currency": [], "source.netsuite_source.netsuite2.customer": [], "source.netsuite_source.netsuite2.department": [], "source.netsuite_source.netsuite2.entity": [], "source.netsuite_source.netsuite2.entity_address": [], "source.netsuite_source.netsuite2.item": [], "source.netsuite_source.netsuite2.job": [], "source.netsuite_source.netsuite2.location_main_address": [], "source.netsuite_source.netsuite2.location": [], "source.netsuite_source.netsuite2.subsidiary": [], "source.netsuite_source.netsuite2.transaction_accounting_line": [], "source.netsuite_source.netsuite2.transaction_line": [], "source.netsuite_source.netsuite2.transaction": [], "source.netsuite_source.netsuite2.vendor_category": [], "source.netsuite_source.netsuite2.vendor": [], "source.netsuite_source.netsuite.accounting_books": [], "source.netsuite_source.netsuite.accounting_periods": [], "source.netsuite_source.netsuite.accounts": [], "source.netsuite_source.netsuite.classes": [], "source.netsuite_source.netsuite.consolidated_exchange_rates": [], "source.netsuite_source.netsuite.currencies": [], "source.netsuite_source.netsuite.customers": [], "source.netsuite_source.netsuite.departments": [], "source.netsuite_source.netsuite.expense_accounts": [], "source.netsuite_source.netsuite.income_accounts": [], "source.netsuite_source.netsuite.items": [], "source.netsuite_source.netsuite.locations": [], "source.netsuite_source.netsuite.subsidiaries": [], "source.netsuite_source.netsuite.transaction_lines": [], "source.netsuite_source.netsuite.transactions": [], "source.netsuite_source.netsuite.vendor_types": [], "source.netsuite_source.netsuite.vendors": []}, "child_map": {"seed.netsuite_source_integration_tests.netsuite2_currency_data": [], "seed.netsuite_source_integration_tests.netsuite_vendors_data": [], "seed.netsuite_source_integration_tests.netsuite2_classification_data": [], "seed.netsuite_source_integration_tests.netsuite_accounting_books_data": [], "seed.netsuite_source_integration_tests.netsuite2_entities_data": [], "seed.netsuite_source_integration_tests.netsuite2_vendor_data": [], "seed.netsuite_source_integration_tests.netsuite_consolidated_exchange_rates_data": [], "seed.netsuite_source_integration_tests.netsuite_customers_data": [], "seed.netsuite_source_integration_tests.netsuite_locations_data": [], "seed.netsuite_source_integration_tests.netsuite2_transaction_line_data": [], "seed.netsuite_source_integration_tests.netsuite2_account_data": [], "seed.netsuite_source_integration_tests.netsuite_items_data": [], "seed.netsuite_source_integration_tests.netsuite2_subsidiary_data": [], "seed.netsuite_source_integration_tests.netsuite2_account_type_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_period_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_period_fiscal_cal_data": [], "seed.netsuite_source_integration_tests.netsuite_classes_data": [], "seed.netsuite_source_integration_tests.netsuite2_entity_address_data": [], "seed.netsuite_source_integration_tests.netsuite_departments_data": [], "seed.netsuite_source_integration_tests.netsuite2_customer_data": [], "seed.netsuite_source_integration_tests.netsuite2_tran_acct_line_data": [], "seed.netsuite_source_integration_tests.netsuite2_department_data": [], "seed.netsuite_source_integration_tests.netsuite_expense_accounts_data": [], "seed.netsuite_source_integration_tests.netsuite_currencies_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_book_sub_data": [], "seed.netsuite_source_integration_tests.netsuite_accounts_data": [], "seed.netsuite_source_integration_tests.netsuite2_vendor_category_data": [], "seed.netsuite_source_integration_tests.netsuite_accounting_periods_data": [], "seed.netsuite_source_integration_tests.netsuite_subsidiaries_data": [], "seed.netsuite_source_integration_tests.netsuite2_job_data": [], "seed.netsuite_source_integration_tests.netsuite2_transaction_data": [], "seed.netsuite_source_integration_tests.netsuite2_location_data": [], "seed.netsuite_source_integration_tests.netsuite_income_accounts_data": [], "seed.netsuite_source_integration_tests.netsuite2_consolidated_exchange_rate_data": [], "seed.netsuite_source_integration_tests.netsuite2_accounting_book_data": [], "seed.netsuite_source_integration_tests.netsuite2_location_main_address_data": [], "seed.netsuite_source_integration_tests.netsuite_vendor_types_data": [], "seed.netsuite_source_integration_tests.netsuite2_item_data": [], "seed.netsuite_source_integration_tests.netsuite_transactions_data": [], "seed.netsuite_source_integration_tests.netsuite_transaction_lines_data": [], "model.netsuite_source.stg_netsuite2__transactions": ["test.netsuite_source.not_null_stg_netsuite2__transactions_transaction_id.b4f6c6a72b", "test.netsuite_source.unique_stg_netsuite2__transactions_transaction_id.af3d15dce4"], "model.netsuite_source.stg_netsuite2__jobs": ["test.netsuite_source.not_null_stg_netsuite2__jobs_job_id.d7b5b06b33", "test.netsuite_source.unique_stg_netsuite2__jobs_job_id.c294ea849c"], "model.netsuite_source.stg_netsuite2__vendors": ["test.netsuite_source.not_null_stg_netsuite2__vendors_vendor_id.777b758daf", "test.netsuite_source.unique_stg_netsuite2__vendors_vendor_id.415829ac1d"], "model.netsuite_source.stg_netsuite2__classes": ["test.netsuite_source.not_null_stg_netsuite2__classes_class_id.799b01ffba", "test.netsuite_source.unique_stg_netsuite2__classes_class_id.d069e30c98"], "model.netsuite_source.stg_netsuite2__account_types": ["test.netsuite_source.not_null_stg_netsuite2__account_types_account_type_id.20889967ef", "test.netsuite_source.unique_stg_netsuite2__account_types_account_type_id.aaea9bec0f"], "model.netsuite_source.stg_netsuite2__entities": ["test.netsuite_source.not_null_stg_netsuite2__entities_entity_id.f22c18cfa2", "test.netsuite_source.unique_stg_netsuite2__entities_entity_id.f9acd04f50"], "model.netsuite_source.stg_netsuite2__accounting_periods": ["test.netsuite_source.not_null_stg_netsuite2__accounting_periods_accounting_period_id.f2db2c547c", "test.netsuite_source.unique_stg_netsuite2__accounting_periods_accounting_period_id.a9d8f4c6e1"], "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal": ["test.netsuite_source.not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.ec8750b679", "test.netsuite_source.unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.d2038de348"], "model.netsuite_source.stg_netsuite2__customers": ["test.netsuite_source.not_null_stg_netsuite2__customers_customer_id.65a5ae302a", "test.netsuite_source.unique_stg_netsuite2__customers_customer_id.05ca0360f2"], "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries": ["test.netsuite_source.not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.76e6e71411", "test.netsuite_source.unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.27ddb08396"], "model.netsuite_source.stg_netsuite2__accounts": ["test.netsuite_source.not_null_stg_netsuite2__accounts_account_id.5a542e47a2", "test.netsuite_source.unique_stg_netsuite2__accounts_account_id.23a63b3e17"], "model.netsuite_source.stg_netsuite2__transaction_lines": ["test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id.07b823514f", "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_id.267b150890", "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_line_id.a82e70adc1"], "model.netsuite_source.stg_netsuite2__subsidiaries": ["test.netsuite_source.not_null_stg_netsuite2__subsidiaries_subsidiary_id.0ab6516626", "test.netsuite_source.unique_stg_netsuite2__subsidiaries_subsidiary_id.8edc974229"], "model.netsuite_source.stg_netsuite2__entity_address": [], "model.netsuite_source.stg_netsuite2__location_main_address": [], "model.netsuite_source.stg_netsuite2__vendor_categories": ["test.netsuite_source.not_null_stg_netsuite2__vendor_categories_vendor_category_id.60acd9acb2", "test.netsuite_source.unique_stg_netsuite2__vendor_categories_vendor_category_id.874da088c6"], "model.netsuite_source.stg_netsuite2__departments": ["test.netsuite_source.not_null_stg_netsuite2__departments_department_id.7395bbfe71", "test.netsuite_source.unique_stg_netsuite2__departments_department_id.13e4897f0b"], "model.netsuite_source.stg_netsuite2__transaction_accounting_lines": ["test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id.34750610bd", "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_id.f28afbfa25", "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id.0f72869807"], "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates": ["test.netsuite_source.not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.09703507c6", "test.netsuite_source.unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.2d4725bb7a"], "model.netsuite_source.stg_netsuite2__accounting_books": ["test.netsuite_source.not_null_stg_netsuite2__accounting_books_accounting_book_id.1b7504d30e", "test.netsuite_source.unique_stg_netsuite2__accounting_books_accounting_book_id.70d96d1230"], "model.netsuite_source.stg_netsuite2__items": ["test.netsuite_source.not_null_stg_netsuite2__items_item_id.e216b5b06a", "test.netsuite_source.unique_stg_netsuite2__items_item_id.3fcafd9eee"], "model.netsuite_source.stg_netsuite2__currencies": ["test.netsuite_source.not_null_stg_netsuite2__currencies_currency_id.7eff9f9c1c", "test.netsuite_source.unique_stg_netsuite2__currencies_currency_id.50d9c37c78"], "model.netsuite_source.stg_netsuite2__locations": ["test.netsuite_source.not_null_stg_netsuite2__locations_location_id.c335a5985e", "test.netsuite_source.unique_stg_netsuite2__locations_location_id.f1469a5149"], "model.netsuite_source.stg_netsuite2__subsidiaries_tmp": ["model.netsuite_source.stg_netsuite2__subsidiaries", "model.netsuite_source.stg_netsuite2__subsidiaries"], "model.netsuite_source.stg_netsuite2__transactions_tmp": ["model.netsuite_source.stg_netsuite2__transactions", "model.netsuite_source.stg_netsuite2__transactions"], "model.netsuite_source.stg_netsuite2__entity_address_tmp": ["model.netsuite_source.stg_netsuite2__entity_address", "model.netsuite_source.stg_netsuite2__entity_address"], "model.netsuite_source.stg_netsuite2__account_types_tmp": ["model.netsuite_source.stg_netsuite2__account_types", "model.netsuite_source.stg_netsuite2__account_types"], "model.netsuite_source.stg_netsuite2__accounting_periods_tmp": ["model.netsuite_source.stg_netsuite2__accounting_periods", "model.netsuite_source.stg_netsuite2__accounting_periods"], "model.netsuite_source.stg_netsuite2__jobs_tmp": ["model.netsuite_source.stg_netsuite2__jobs", "model.netsuite_source.stg_netsuite2__jobs"], "model.netsuite_source.stg_netsuite2__transaction_lines_tmp": ["model.netsuite_source.stg_netsuite2__transaction_lines", "model.netsuite_source.stg_netsuite2__transaction_lines"], "model.netsuite_source.stg_netsuite2__accounts_tmp": ["model.netsuite_source.stg_netsuite2__accounts", "model.netsuite_source.stg_netsuite2__accounts"], "model.netsuite_source.stg_netsuite2__customers_tmp": ["model.netsuite_source.stg_netsuite2__customers", "model.netsuite_source.stg_netsuite2__customers"], "model.netsuite_source.stg_netsuite2__entities_tmp": ["model.netsuite_source.stg_netsuite2__entities", "model.netsuite_source.stg_netsuite2__entities"], "model.netsuite_source.stg_netsuite2__currencies_tmp": ["model.netsuite_source.stg_netsuite2__currencies", "model.netsuite_source.stg_netsuite2__currencies"], "model.netsuite_source.stg_netsuite2__vendors_tmp": ["model.netsuite_source.stg_netsuite2__vendors", "model.netsuite_source.stg_netsuite2__vendors"], "model.netsuite_source.stg_netsuite2__items_tmp": ["model.netsuite_source.stg_netsuite2__items", "model.netsuite_source.stg_netsuite2__items"], "model.netsuite_source.stg_netsuite2__accounting_books_tmp": ["model.netsuite_source.stg_netsuite2__accounting_books", "model.netsuite_source.stg_netsuite2__accounting_books"], "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal", "model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal"], "model.netsuite_source.stg_netsuite2__vendor_categories_tmp": ["model.netsuite_source.stg_netsuite2__vendor_categories", "model.netsuite_source.stg_netsuite2__vendor_categories"], "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries", "model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries"], "model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines", "model.netsuite_source.stg_netsuite2__transaction_accounting_lines"], "model.netsuite_source.stg_netsuite2__location_main_address_tmp": ["model.netsuite_source.stg_netsuite2__location_main_address", "model.netsuite_source.stg_netsuite2__location_main_address"], "model.netsuite_source.stg_netsuite2__locations_tmp": ["model.netsuite_source.stg_netsuite2__locations", "model.netsuite_source.stg_netsuite2__locations"], "model.netsuite_source.stg_netsuite2__departments_tmp": ["model.netsuite_source.stg_netsuite2__departments", "model.netsuite_source.stg_netsuite2__departments"], "model.netsuite_source.stg_netsuite2__classes_tmp": ["model.netsuite_source.stg_netsuite2__classes", "model.netsuite_source.stg_netsuite2__classes"], "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates", "model.netsuite_source.stg_netsuite2__consolidated_exchange_rates"], "model.netsuite_source.stg_netsuite__transactions": ["test.netsuite_source.not_null_stg_netsuite__transactions_transaction_id.9439fe1532", "test.netsuite_source.unique_stg_netsuite__transactions_transaction_id.fd6bd3af79"], "model.netsuite_source.stg_netsuite__customers": ["test.netsuite_source.not_null_stg_netsuite__customers_customer_id.bbb9eed2dc", "test.netsuite_source.unique_stg_netsuite__customers_customer_id.7c9debe8d9"], "model.netsuite_source.stg_netsuite__accounting_books": ["test.netsuite_source.not_null_stg_netsuite__accounting_books_accounting_book_id.12972ee6fc", "test.netsuite_source.unique_stg_netsuite__accounting_books_accounting_book_id.22e0106417"], "model.netsuite_source.stg_netsuite__consolidated_exchange_rates": ["test.netsuite_source.not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.83de8c8e97", "test.netsuite_source.unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.2ca94ecb54"], "model.netsuite_source.stg_netsuite__transaction_lines": ["test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id.651bc3120d", "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_id.e8055d67bc", "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_line_id.420bd8637c"], "model.netsuite_source.stg_netsuite__income_accounts": ["test.netsuite_source.not_null_stg_netsuite__income_accounts_income_account_id.a38311d5f9", "test.netsuite_source.unique_stg_netsuite__income_accounts_income_account_id.28b4166a07"], "model.netsuite_source.stg_netsuite__expense_accounts": ["test.netsuite_source.not_null_stg_netsuite__expense_accounts_expense_account_id.4de138ed23", "test.netsuite_source.unique_stg_netsuite__expense_accounts_expense_account_id.5e813830ff"], "model.netsuite_source.stg_netsuite__vendors": ["test.netsuite_source.not_null_stg_netsuite__vendors_vendor_id.15978cc531", "test.netsuite_source.unique_stg_netsuite__vendors_vendor_id.a981580d39"], "model.netsuite_source.stg_netsuite__classes": ["test.netsuite_source.not_null_stg_netsuite__classes_class_id.462bfda765", "test.netsuite_source.unique_stg_netsuite__classes_class_id.c63c54840b"], "model.netsuite_source.stg_netsuite__subsidiaries": ["test.netsuite_source.not_null_stg_netsuite__subsidiaries_subsidiary_id.9aa9c2d015", "test.netsuite_source.unique_stg_netsuite__subsidiaries_subsidiary_id.7d0dfe64f0"], "model.netsuite_source.stg_netsuite__accounts": ["test.netsuite_source.not_null_stg_netsuite__accounts_account_id.f03cddbace", "test.netsuite_source.unique_stg_netsuite__accounts_account_id.e94563d281"], "model.netsuite_source.stg_netsuite__items": ["test.netsuite_source.not_null_stg_netsuite__items_item_id.ba322d7da3", "test.netsuite_source.unique_stg_netsuite__items_item_id.760a674654"], "model.netsuite_source.stg_netsuite__locations": ["test.netsuite_source.not_null_stg_netsuite__locations_location_id.9f68ecaa6b", "test.netsuite_source.unique_stg_netsuite__locations_location_id.3857e2cac2"], "model.netsuite_source.stg_netsuite__departments": ["test.netsuite_source.not_null_stg_netsuite__departments_department_id.6d96b00002", "test.netsuite_source.unique_stg_netsuite__departments_department_id.2df16a9aa1"], "model.netsuite_source.stg_netsuite__currencies": ["test.netsuite_source.not_null_stg_netsuite__currencies_currency_id.e8b331ffb3", "test.netsuite_source.unique_stg_netsuite__currencies_currency_id.09ab867f2c"], "model.netsuite_source.stg_netsuite__vendor_types": ["test.netsuite_source.not_null_stg_netsuite__vendor_types_vendor_type_id.faed6fe0e9", "test.netsuite_source.unique_stg_netsuite__vendor_types_vendor_type_id.6ba4f59b69"], "model.netsuite_source.stg_netsuite__accounting_periods": ["test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id.43005ecb69", "test.netsuite_source.not_null_stg_netsuite__accounting_periods_accounting_period_id.5c1c46821c", "test.netsuite_source.not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.8d75190563"], "model.netsuite_source.stg_netsuite__accounting_periods_tmp": ["model.netsuite_source.stg_netsuite__accounting_periods", "model.netsuite_source.stg_netsuite__accounting_periods"], "model.netsuite_source.stg_netsuite__accounting_books_tmp": ["model.netsuite_source.stg_netsuite__accounting_books", "model.netsuite_source.stg_netsuite__accounting_books"], "model.netsuite_source.stg_netsuite__customers_tmp": ["model.netsuite_source.stg_netsuite__customers", "model.netsuite_source.stg_netsuite__customers"], "model.netsuite_source.stg_netsuite__transaction_lines_tmp": ["model.netsuite_source.stg_netsuite__transaction_lines", "model.netsuite_source.stg_netsuite__transaction_lines"], "model.netsuite_source.stg_netsuite__income_accounts_tmp": ["model.netsuite_source.stg_netsuite__income_accounts", "model.netsuite_source.stg_netsuite__income_accounts"], "model.netsuite_source.stg_netsuite__accounts_tmp": ["model.netsuite_source.stg_netsuite__accounts", "model.netsuite_source.stg_netsuite__accounts"], "model.netsuite_source.stg_netsuite__departments_tmp": ["model.netsuite_source.stg_netsuite__departments", "model.netsuite_source.stg_netsuite__departments"], "model.netsuite_source.stg_netsuite__currencies_tmp": ["model.netsuite_source.stg_netsuite__currencies", "model.netsuite_source.stg_netsuite__currencies"], "model.netsuite_source.stg_netsuite__vendor_types_tmp": ["model.netsuite_source.stg_netsuite__vendor_types", "model.netsuite_source.stg_netsuite__vendor_types"], "model.netsuite_source.stg_netsuite__vendors_tmp": ["model.netsuite_source.stg_netsuite__vendors", "model.netsuite_source.stg_netsuite__vendors"], "model.netsuite_source.stg_netsuite__locations_tmp": ["model.netsuite_source.stg_netsuite__locations", "model.netsuite_source.stg_netsuite__locations"], "model.netsuite_source.stg_netsuite__items_tmp": ["model.netsuite_source.stg_netsuite__items", "model.netsuite_source.stg_netsuite__items"], "model.netsuite_source.stg_netsuite__subsidiaries_tmp": ["model.netsuite_source.stg_netsuite__subsidiaries", "model.netsuite_source.stg_netsuite__subsidiaries"], "model.netsuite_source.stg_netsuite__transactions_tmp": ["model.netsuite_source.stg_netsuite__transactions", "model.netsuite_source.stg_netsuite__transactions"], "model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates", "model.netsuite_source.stg_netsuite__consolidated_exchange_rates"], "model.netsuite_source.stg_netsuite__classes_tmp": ["model.netsuite_source.stg_netsuite__classes", "model.netsuite_source.stg_netsuite__classes"], "model.netsuite_source.stg_netsuite__expense_accounts_tmp": ["model.netsuite_source.stg_netsuite__expense_accounts", "model.netsuite_source.stg_netsuite__expense_accounts"], "test.netsuite_source.unique_stg_netsuite__accounting_books_accounting_book_id.22e0106417": [], "test.netsuite_source.not_null_stg_netsuite__accounting_books_accounting_book_id.12972ee6fc": [], "test.netsuite_source.not_null_stg_netsuite__accounting_periods_accounting_period_id.5c1c46821c": [], "test.netsuite_source.not_null_stg_netsuite__accounting_periods_fiscal_calendar_id.8d75190563": [], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__accounting_periods_accounting_period_id__fiscal_calendar_id.43005ecb69": [], "test.netsuite_source.unique_stg_netsuite__accounts_account_id.e94563d281": [], "test.netsuite_source.not_null_stg_netsuite__accounts_account_id.f03cddbace": [], "test.netsuite_source.unique_stg_netsuite__classes_class_id.c63c54840b": [], "test.netsuite_source.not_null_stg_netsuite__classes_class_id.462bfda765": [], "test.netsuite_source.unique_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.2ca94ecb54": [], "test.netsuite_source.not_null_stg_netsuite__consolidated_exchange_rates_consolidated_exchange_rate_id.83de8c8e97": [], "test.netsuite_source.unique_stg_netsuite__currencies_currency_id.09ab867f2c": [], "test.netsuite_source.not_null_stg_netsuite__currencies_currency_id.e8b331ffb3": [], "test.netsuite_source.unique_stg_netsuite__customers_customer_id.7c9debe8d9": [], "test.netsuite_source.not_null_stg_netsuite__customers_customer_id.bbb9eed2dc": [], "test.netsuite_source.unique_stg_netsuite__departments_department_id.2df16a9aa1": [], "test.netsuite_source.not_null_stg_netsuite__departments_department_id.6d96b00002": [], "test.netsuite_source.unique_stg_netsuite__expense_accounts_expense_account_id.5e813830ff": [], "test.netsuite_source.not_null_stg_netsuite__expense_accounts_expense_account_id.4de138ed23": [], "test.netsuite_source.unique_stg_netsuite__income_accounts_income_account_id.28b4166a07": [], "test.netsuite_source.not_null_stg_netsuite__income_accounts_income_account_id.a38311d5f9": [], "test.netsuite_source.unique_stg_netsuite__items_item_id.760a674654": [], "test.netsuite_source.not_null_stg_netsuite__items_item_id.ba322d7da3": [], "test.netsuite_source.unique_stg_netsuite__locations_location_id.3857e2cac2": [], "test.netsuite_source.not_null_stg_netsuite__locations_location_id.9f68ecaa6b": [], "test.netsuite_source.unique_stg_netsuite__subsidiaries_subsidiary_id.7d0dfe64f0": [], "test.netsuite_source.not_null_stg_netsuite__subsidiaries_subsidiary_id.9aa9c2d015": [], "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_id.e8055d67bc": [], "test.netsuite_source.not_null_stg_netsuite__transaction_lines_transaction_line_id.420bd8637c": [], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite__transaction_lines_transaction_id__transaction_line_id.651bc3120d": [], "test.netsuite_source.unique_stg_netsuite__transactions_transaction_id.fd6bd3af79": [], "test.netsuite_source.not_null_stg_netsuite__transactions_transaction_id.9439fe1532": [], "test.netsuite_source.unique_stg_netsuite__vendor_types_vendor_type_id.6ba4f59b69": [], "test.netsuite_source.not_null_stg_netsuite__vendor_types_vendor_type_id.faed6fe0e9": [], "test.netsuite_source.unique_stg_netsuite__vendors_vendor_id.a981580d39": [], "test.netsuite_source.not_null_stg_netsuite__vendors_vendor_id.15978cc531": [], "test.netsuite_source.unique_stg_netsuite2__account_types_account_type_id.aaea9bec0f": [], "test.netsuite_source.not_null_stg_netsuite2__account_types_account_type_id.20889967ef": [], "test.netsuite_source.unique_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.27ddb08396": [], "test.netsuite_source.not_null_stg_netsuite2__accounting_book_subsidiaries__fivetran_id.76e6e71411": [], "test.netsuite_source.unique_stg_netsuite2__accounting_books_accounting_book_id.70d96d1230": [], "test.netsuite_source.not_null_stg_netsuite2__accounting_books_accounting_book_id.1b7504d30e": [], "test.netsuite_source.unique_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.d2038de348": [], "test.netsuite_source.not_null_stg_netsuite2__accounting_period_fiscal_cal__fivetran_id.ec8750b679": [], "test.netsuite_source.unique_stg_netsuite2__accounting_periods_accounting_period_id.a9d8f4c6e1": [], "test.netsuite_source.not_null_stg_netsuite2__accounting_periods_accounting_period_id.f2db2c547c": [], "test.netsuite_source.unique_stg_netsuite2__accounts_account_id.23a63b3e17": [], "test.netsuite_source.not_null_stg_netsuite2__accounts_account_id.5a542e47a2": [], "test.netsuite_source.unique_stg_netsuite2__classes_class_id.d069e30c98": [], "test.netsuite_source.not_null_stg_netsuite2__classes_class_id.799b01ffba": [], "test.netsuite_source.unique_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.2d4725bb7a": [], "test.netsuite_source.not_null_stg_netsuite2__consolidated_exchange_rates_consolidated_exchange_rate_id.09703507c6": [], "test.netsuite_source.unique_stg_netsuite2__currencies_currency_id.50d9c37c78": [], "test.netsuite_source.not_null_stg_netsuite2__currencies_currency_id.7eff9f9c1c": [], "test.netsuite_source.unique_stg_netsuite2__customers_customer_id.05ca0360f2": [], "test.netsuite_source.not_null_stg_netsuite2__customers_customer_id.65a5ae302a": [], "test.netsuite_source.unique_stg_netsuite2__departments_department_id.13e4897f0b": [], "test.netsuite_source.not_null_stg_netsuite2__departments_department_id.7395bbfe71": [], "test.netsuite_source.unique_stg_netsuite2__entities_entity_id.f9acd04f50": [], "test.netsuite_source.not_null_stg_netsuite2__entities_entity_id.f22c18cfa2": [], "test.netsuite_source.unique_stg_netsuite2__items_item_id.3fcafd9eee": [], "test.netsuite_source.not_null_stg_netsuite2__items_item_id.e216b5b06a": [], "test.netsuite_source.unique_stg_netsuite2__jobs_job_id.c294ea849c": [], "test.netsuite_source.not_null_stg_netsuite2__jobs_job_id.d7b5b06b33": [], "test.netsuite_source.unique_stg_netsuite2__locations_location_id.f1469a5149": [], "test.netsuite_source.not_null_stg_netsuite2__locations_location_id.c335a5985e": [], "test.netsuite_source.unique_stg_netsuite2__subsidiaries_subsidiary_id.8edc974229": [], "test.netsuite_source.not_null_stg_netsuite2__subsidiaries_subsidiary_id.0ab6516626": [], "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_id.f28afbfa25": [], "test.netsuite_source.not_null_stg_netsuite2__transaction_accounting_lines_transaction_line_id.0f72869807": [], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_accounting_lines_transaction_id__transaction_line_id.34750610bd": [], "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_line_id.a82e70adc1": [], "test.netsuite_source.not_null_stg_netsuite2__transaction_lines_transaction_id.267b150890": [], "test.netsuite_source.dbt_utils_unique_combination_of_columns_stg_netsuite2__transaction_lines_transaction_id__transaction_line_id.07b823514f": [], "test.netsuite_source.unique_stg_netsuite2__transactions_transaction_id.af3d15dce4": [], "test.netsuite_source.not_null_stg_netsuite2__transactions_transaction_id.b4f6c6a72b": [], "test.netsuite_source.unique_stg_netsuite2__vendor_categories_vendor_category_id.874da088c6": [], "test.netsuite_source.not_null_stg_netsuite2__vendor_categories_vendor_category_id.60acd9acb2": [], "test.netsuite_source.unique_stg_netsuite2__vendors_vendor_id.415829ac1d": [], "test.netsuite_source.not_null_stg_netsuite2__vendors_vendor_id.777b758daf": [], "source.netsuite_source.netsuite2.account_type": ["model.netsuite_source.stg_netsuite2__account_types_tmp"], "source.netsuite_source.netsuite2.accounting_book_subsidiaries": ["model.netsuite_source.stg_netsuite2__accounting_book_subsidiaries_tmp"], "source.netsuite_source.netsuite2.accounting_book": ["model.netsuite_source.stg_netsuite2__accounting_books_tmp"], "source.netsuite_source.netsuite2.accounting_period_fiscal_calendars": ["model.netsuite_source.stg_netsuite2__accounting_period_fiscal_cal_tmp"], "source.netsuite_source.netsuite2.accounting_period": ["model.netsuite_source.stg_netsuite2__accounting_periods_tmp"], "source.netsuite_source.netsuite2.account": ["model.netsuite_source.stg_netsuite2__accounts_tmp"], "source.netsuite_source.netsuite2.classification": ["model.netsuite_source.stg_netsuite2__classes_tmp"], "source.netsuite_source.netsuite2.consolidated_exchange_rate": ["model.netsuite_source.stg_netsuite2__consolidated_exchange_rates_tmp"], "source.netsuite_source.netsuite2.currency": ["model.netsuite_source.stg_netsuite2__currencies_tmp"], "source.netsuite_source.netsuite2.customer": ["model.netsuite_source.stg_netsuite2__customers_tmp"], "source.netsuite_source.netsuite2.department": ["model.netsuite_source.stg_netsuite2__departments_tmp"], "source.netsuite_source.netsuite2.entity": ["model.netsuite_source.stg_netsuite2__entities_tmp"], "source.netsuite_source.netsuite2.entity_address": ["model.netsuite_source.stg_netsuite2__entity_address_tmp"], "source.netsuite_source.netsuite2.item": ["model.netsuite_source.stg_netsuite2__items_tmp"], "source.netsuite_source.netsuite2.job": ["model.netsuite_source.stg_netsuite2__jobs_tmp"], "source.netsuite_source.netsuite2.location_main_address": ["model.netsuite_source.stg_netsuite2__location_main_address_tmp"], "source.netsuite_source.netsuite2.location": ["model.netsuite_source.stg_netsuite2__locations_tmp"], "source.netsuite_source.netsuite2.subsidiary": ["model.netsuite_source.stg_netsuite2__subsidiaries_tmp"], "source.netsuite_source.netsuite2.transaction_accounting_line": ["model.netsuite_source.stg_netsuite2__transaction_accounting_lines_tmp"], "source.netsuite_source.netsuite2.transaction_line": ["model.netsuite_source.stg_netsuite2__transaction_lines_tmp"], "source.netsuite_source.netsuite2.transaction": ["model.netsuite_source.stg_netsuite2__transactions_tmp"], "source.netsuite_source.netsuite2.vendor_category": ["model.netsuite_source.stg_netsuite2__vendor_categories_tmp"], "source.netsuite_source.netsuite2.vendor": ["model.netsuite_source.stg_netsuite2__vendors_tmp"], "source.netsuite_source.netsuite.accounting_books": ["model.netsuite_source.stg_netsuite__accounting_books_tmp"], "source.netsuite_source.netsuite.accounting_periods": ["model.netsuite_source.stg_netsuite__accounting_periods_tmp"], "source.netsuite_source.netsuite.accounts": ["model.netsuite_source.stg_netsuite__accounts_tmp"], "source.netsuite_source.netsuite.classes": ["model.netsuite_source.stg_netsuite__classes_tmp"], "source.netsuite_source.netsuite.consolidated_exchange_rates": ["model.netsuite_source.stg_netsuite__consolidated_exchange_rates_tmp"], "source.netsuite_source.netsuite.currencies": ["model.netsuite_source.stg_netsuite__currencies_tmp"], "source.netsuite_source.netsuite.customers": ["model.netsuite_source.stg_netsuite__customers_tmp"], "source.netsuite_source.netsuite.departments": ["model.netsuite_source.stg_netsuite__departments_tmp"], "source.netsuite_source.netsuite.expense_accounts": ["model.netsuite_source.stg_netsuite__expense_accounts_tmp"], "source.netsuite_source.netsuite.income_accounts": ["model.netsuite_source.stg_netsuite__income_accounts_tmp"], "source.netsuite_source.netsuite.items": ["model.netsuite_source.stg_netsuite__items_tmp"], "source.netsuite_source.netsuite.locations": ["model.netsuite_source.stg_netsuite__locations_tmp"], "source.netsuite_source.netsuite.subsidiaries": ["model.netsuite_source.stg_netsuite__subsidiaries_tmp"], "source.netsuite_source.netsuite.transaction_lines": ["model.netsuite_source.stg_netsuite__transaction_lines_tmp"], "source.netsuite_source.netsuite.transactions": ["model.netsuite_source.stg_netsuite__transactions_tmp"], "source.netsuite_source.netsuite.vendor_types": ["model.netsuite_source.stg_netsuite__vendor_types_tmp"], "source.netsuite_source.netsuite.vendors": ["model.netsuite_source.stg_netsuite__vendors_tmp"]}}